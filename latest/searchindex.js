Search.setIndex({"docnames": ["api/generated/deeptime.base.Dataset", "api/generated/deeptime.base.Estimator", "api/generated/deeptime.base.Model", "api/generated/deeptime.base.Transformer", "api/generated/deeptime.basis.Concatenation", "api/generated/deeptime.basis.Identity", "api/generated/deeptime.basis.Monomials", "api/generated/deeptime.basis.Observable", "api/generated/deeptime.clustering.BoxDiscretization", "api/generated/deeptime.clustering.BoxDiscretizationModel", "api/generated/deeptime.clustering.ClusterModel", "api/generated/deeptime.clustering.KMeans", "api/generated/deeptime.clustering.KMeansModel", "api/generated/deeptime.clustering.MetricRegistry", "api/generated/deeptime.clustering.MiniBatchKMeans", "api/generated/deeptime.clustering.RegularSpace", "api/generated/deeptime.clustering.kmeans_plusplus", "api/generated/deeptime.clustering.metrics", "api/generated/deeptime.covariance.Covariance", "api/generated/deeptime.covariance.CovarianceModel", "api/generated/deeptime.covariance.KoopmanWeightingEstimator", "api/generated/deeptime.covariance.KoopmanWeightingModel", "api/generated/deeptime.data.abc_flow", "api/generated/deeptime.data.bickley_jet", "api/generated/deeptime.data.birth_death_chain", "api/generated/deeptime.data.custom_ode", "api/generated/deeptime.data.custom_sde", "api/generated/deeptime.data.double_well_2d", "api/generated/deeptime.data.double_well_discrete", "api/generated/deeptime.data.drunkards_walk", "api/generated/deeptime.data.ellipsoids", "api/generated/deeptime.data.lorenz_system", "api/generated/deeptime.data.ornstein_uhlenbeck", "api/generated/deeptime.data.position_based_fluids", "api/generated/deeptime.data.prinz_potential", "api/generated/deeptime.data.quadruple_well", "api/generated/deeptime.data.quadruple_well_asymmetric", "api/generated/deeptime.data.sqrt_model", "api/generated/deeptime.data.swissroll_model", "api/generated/deeptime.data.thomas_attractor", "api/generated/deeptime.data.time_dependent_quintuple_well", "api/generated/deeptime.data.tmatrix_metropolis1d", "api/generated/deeptime.data.triple_well_1d", "api/generated/deeptime.data.triple_well_2d", "api/generated/deeptime.decomposition.CovarianceKoopmanModel", "api/generated/deeptime.decomposition.DMD", "api/generated/deeptime.decomposition.DMDModel", "api/generated/deeptime.decomposition.EDMD", "api/generated/deeptime.decomposition.EDMDModel", "api/generated/deeptime.decomposition.KVAD", "api/generated/deeptime.decomposition.KVADModel", "api/generated/deeptime.decomposition.KernelCCA", "api/generated/deeptime.decomposition.KernelCCAModel", "api/generated/deeptime.decomposition.KernelEDMD", "api/generated/deeptime.decomposition.KernelEDMDModel", "api/generated/deeptime.decomposition.TICA", "api/generated/deeptime.decomposition.TransferOperatorModel", "api/generated/deeptime.decomposition.VAMP", "api/generated/deeptime.decomposition.blocksplit_trajs", "api/generated/deeptime.decomposition.cvsplit_trajs", "api/generated/deeptime.decomposition.deep.TAE", "api/generated/deeptime.decomposition.deep.TAEModel", "api/generated/deeptime.decomposition.deep.TVAE", "api/generated/deeptime.decomposition.deep.TVAEEncoder", "api/generated/deeptime.decomposition.deep.TVAEModel", "api/generated/deeptime.decomposition.deep.VAMPNet", "api/generated/deeptime.decomposition.deep.VAMPNetModel", "api/generated/deeptime.decomposition.deep.covariances", "api/generated/deeptime.decomposition.deep.koopman_matrix", "api/generated/deeptime.decomposition.deep.kvad_score", "api/generated/deeptime.decomposition.deep.sym_inverse", "api/generated/deeptime.decomposition.deep.vamp_score", "api/generated/deeptime.decomposition.deep.vampnet_loss", "api/generated/deeptime.decomposition.vamp_score", "api/generated/deeptime.decomposition.vamp_score_cv", "api/generated/deeptime.decomposition.vamp_score_data", "api/generated/deeptime.kernels.GaussianKernel", "api/generated/deeptime.kernels.GeneralizedGaussianKernel", "api/generated/deeptime.kernels.Kernel", "api/generated/deeptime.kernels.LaplacianKernel", "api/generated/deeptime.kernels.PolynomialKernel", "api/generated/deeptime.kernels.TorchGaussianKernel", "api/generated/deeptime.kernels.is_torch_kernel", "api/generated/deeptime.markov.PCCAModel", "api/generated/deeptime.markov.ReactiveFlux", "api/generated/deeptime.markov.TransitionCountEstimator", "api/generated/deeptime.markov.TransitionCountModel", "api/generated/deeptime.markov.compute_connected_sets", "api/generated/deeptime.markov.compute_dtrajs_effective", "api/generated/deeptime.markov.compute_effective_stride", "api/generated/deeptime.markov.count_states", "api/generated/deeptime.markov.hmm.BayesianHMM", "api/generated/deeptime.markov.hmm.BayesianHMMPosterior", "api/generated/deeptime.markov.hmm.DiscreteOutputModel", "api/generated/deeptime.markov.hmm.GaussianOutputModel", "api/generated/deeptime.markov.hmm.HiddenMarkovModel", "api/generated/deeptime.markov.hmm.MaximumLikelihoodHMM", "api/generated/deeptime.markov.hmm.OutputModel", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_data", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_msm", "api/generated/deeptime.markov.hmm.init.discrete.random_guess", "api/generated/deeptime.markov.hmm.init.gaussian.from_data", "api/generated/deeptime.markov.msm.AugmentedMSM", "api/generated/deeptime.markov.msm.AugmentedMSMEstimator", "api/generated/deeptime.markov.msm.BayesianMSM", "api/generated/deeptime.markov.msm.BayesianMSMPosterior", "api/generated/deeptime.markov.msm.KoopmanReweightedMSM", "api/generated/deeptime.markov.msm.MarkovStateModel", "api/generated/deeptime.markov.msm.MarkovStateModelCollection", "api/generated/deeptime.markov.msm.MaximumLikelihoodMSM", "api/generated/deeptime.markov.msm.OOMReweightedMSM", "api/generated/deeptime.markov.msm.TRAM", "api/generated/deeptime.markov.msm.TRAMDataset", "api/generated/deeptime.markov.msm.TRAMModel", "api/generated/deeptime.markov.number_of_states", "api/generated/deeptime.markov.pcca", "api/generated/deeptime.markov.reactive_flux", "api/generated/deeptime.markov.sample.compute_index_states", "api/generated/deeptime.markov.sample.indices_by_distribution", "api/generated/deeptime.markov.sample.indices_by_sequence", "api/generated/deeptime.markov.sample.indices_by_state", "api/generated/deeptime.markov.tools.analysis.committor", "api/generated/deeptime.markov.tools.analysis.committor_sensitivity", "api/generated/deeptime.markov.tools.analysis.correlation", "api/generated/deeptime.markov.tools.analysis.eigenvalue_sensitivity", "api/generated/deeptime.markov.tools.analysis.eigenvalues", "api/generated/deeptime.markov.tools.analysis.eigenvector_sensitivity", "api/generated/deeptime.markov.tools.analysis.eigenvectors", "api/generated/deeptime.markov.tools.analysis.expectation", "api/generated/deeptime.markov.tools.analysis.expectation_sensitivity", "api/generated/deeptime.markov.tools.analysis.expected_counts", "api/generated/deeptime.markov.tools.analysis.expected_counts_stationary", "api/generated/deeptime.markov.tools.analysis.fingerprint_correlation", "api/generated/deeptime.markov.tools.analysis.fingerprint_relaxation", "api/generated/deeptime.markov.tools.analysis.hitting_probability", "api/generated/deeptime.markov.tools.analysis.is_connected", "api/generated/deeptime.markov.tools.analysis.is_rate_matrix", "api/generated/deeptime.markov.tools.analysis.is_reversible", "api/generated/deeptime.markov.tools.analysis.is_transition_matrix", "api/generated/deeptime.markov.tools.analysis.mfpt", "api/generated/deeptime.markov.tools.analysis.mfpt_sensitivity", "api/generated/deeptime.markov.tools.analysis.pcca_memberships", "api/generated/deeptime.markov.tools.analysis.rdl_decomposition", "api/generated/deeptime.markov.tools.analysis.relaxation", "api/generated/deeptime.markov.tools.analysis.stationary_distribution", "api/generated/deeptime.markov.tools.analysis.stationary_distribution_sensitivity", "api/generated/deeptime.markov.tools.analysis.timescale_sensitivity", "api/generated/deeptime.markov.tools.analysis.timescales", "api/generated/deeptime.markov.tools.estimation.bootstrap_counts", "api/generated/deeptime.markov.tools.estimation.bootstrap_trajectories", "api/generated/deeptime.markov.tools.estimation.connected_sets", "api/generated/deeptime.markov.tools.estimation.count_matrix", "api/generated/deeptime.markov.tools.estimation.error_perturbation", "api/generated/deeptime.markov.tools.estimation.is_connected", "api/generated/deeptime.markov.tools.estimation.largest_connected_set", "api/generated/deeptime.markov.tools.estimation.largest_connected_submatrix", "api/generated/deeptime.markov.tools.estimation.log_likelihood", "api/generated/deeptime.markov.tools.estimation.prior_const", "api/generated/deeptime.markov.tools.estimation.prior_neighbor", "api/generated/deeptime.markov.tools.estimation.prior_rev", "api/generated/deeptime.markov.tools.estimation.rate_matrix", "api/generated/deeptime.markov.tools.estimation.tmatrix_cov", "api/generated/deeptime.markov.tools.estimation.tmatrix_sampler", "api/generated/deeptime.markov.tools.estimation.transition_matrix", "api/generated/deeptime.markov.tools.flux.coarsegrain", "api/generated/deeptime.markov.tools.flux.flux_consumers", "api/generated/deeptime.markov.tools.flux.flux_matrix", "api/generated/deeptime.markov.tools.flux.flux_producers", "api/generated/deeptime.markov.tools.flux.flux_production", "api/generated/deeptime.markov.tools.flux.mfpt", "api/generated/deeptime.markov.tools.flux.pathways", "api/generated/deeptime.markov.tools.flux.rate", "api/generated/deeptime.markov.tools.flux.to_netflux", "api/generated/deeptime.markov.tools.flux.total_flux", "api/generated/deeptime.numeric.ZeroRankError", "api/generated/deeptime.numeric.drop_nan_rows", "api/generated/deeptime.numeric.eig_corr", "api/generated/deeptime.numeric.eigs", "api/generated/deeptime.numeric.is_diagonal_matrix", "api/generated/deeptime.numeric.is_square_matrix", "api/generated/deeptime.numeric.schatten_norm", "api/generated/deeptime.numeric.sort_eigs", "api/generated/deeptime.numeric.spd_eig", "api/generated/deeptime.numeric.spd_inv", "api/generated/deeptime.numeric.spd_inv_split", "api/generated/deeptime.numeric.spd_inv_sqrt", "api/generated/deeptime.numeric.spd_truncated_svd", "api/generated/deeptime.plots.Energy2dPlot", "api/generated/deeptime.plots.Network", "api/generated/deeptime.plots.plot_adjacency", "api/generated/deeptime.plots.plot_ck_test", "api/generated/deeptime.plots.plot_contour2d_from_xyz", "api/generated/deeptime.plots.plot_density", "api/generated/deeptime.plots.plot_energy2d", "api/generated/deeptime.plots.plot_flux", "api/generated/deeptime.plots.plot_implied_timescales", "api/generated/deeptime.plots.plot_markov_model", "api/generated/deeptime.sindy.SINDy", "api/generated/deeptime.sindy.SINDyModel", "api/generated/deeptime.sindy.STLSQ", "api/generated/deeptime.util.EnergyLandscape2d", "api/generated/deeptime.util.QuantityStatistics", "api/generated/deeptime.util.callbacks.ProgressCallback", "api/generated/deeptime.util.callbacks.supports_progress_interface", "api/generated/deeptime.util.confidence_interval", "api/generated/deeptime.util.data.ConcatDataset", "api/generated/deeptime.util.data.TimeLaggedConcatDataset", "api/generated/deeptime.util.data.TimeLaggedDataset", "api/generated/deeptime.util.data.TrajectoriesDataset", "api/generated/deeptime.util.data.TrajectoryDataset", "api/generated/deeptime.util.data.sliding_window", "api/generated/deeptime.util.data.timeshifted_split", "api/generated/deeptime.util.decorators.cached_property", "api/generated/deeptime.util.decorators.deprecated_argument", "api/generated/deeptime.util.decorators.plotting_function", "api/generated/deeptime.util.diff.finite_difference_coefficients", "api/generated/deeptime.util.diff.finite_difference_operator_midpoints", "api/generated/deeptime.util.diff.tv_derivative", "api/generated/deeptime.util.energy2d", "api/generated/deeptime.util.parallel.handle_n_jobs", "api/generated/deeptime.util.platform.handle_progress_bar", "api/generated/deeptime.util.platform.module_available", "api/generated/deeptime.util.types.atleast_nd", "api/generated/deeptime.util.types.is_timelagged_dataset", "api/generated/deeptime.util.types.to_dataset", "api/generated/deeptime.util.validation.ChapmanKolmogorovTest", "api/generated/deeptime.util.validation.ImpliedTimescales", "api/generated/deeptime.util.validation.ck_test", "api/generated/deeptime.util.validation.implied_timescales", "api/generated/impl/deeptime.covariance.WhiteningTransform", "api/generated/impl/deeptime.covariance.covar", "api/generated/impl/deeptime.covariance.covars", "api/generated/impl/deeptime.covariance.moments_XX", "api/generated/impl/deeptime.covariance.moments_XXXY", "api/generated/impl/deeptime.covariance.moments_block", "api/generated/impl/deeptime.data.BickleyJet", "api/generated/impl/deeptime.data.BirthDeathChain", "api/generated/impl/deeptime.data.CustomSystem", "api/generated/impl/deeptime.data.DoubleWellDiscrete", "api/generated/impl/deeptime.data.DrunkardsWalk", "api/generated/impl/deeptime.data.Ellipsoids", "api/generated/impl/deeptime.data.PBFSimulator", "api/generated/impl/deeptime.data.TimeDependentSystem", "api/generated/impl/deeptime.data.TimeIndependentSystem", "api/index_base", "api/index_basis", "api/index_clustering", "api/index_covariance", "api/index_data", "api/index_decomposition", "api/index_kernels", "api/index_markov", "api/index_markov_hmm", "api/index_markov_tools", "api/index_numeric", "api/index_plots", "api/index_sindy", "api/index_util", "contents", "datasets/odes/index", "datasets/odes/plot_abc_flow", "datasets/odes/plot_bickley_jet", "datasets/odes/plot_custom_ode", "datasets/odes/plot_lorenz_system", "datasets/odes/plot_thomas_attractor", "datasets/odes/sg_execution_times", "datasets/other/index", "datasets/other/plot_drunkards_walk", "datasets/other/plot_ellipsoids", "datasets/other/plot_pbf", "datasets/other/plot_sqrt_model", "datasets/other/plot_swissroll_model", "datasets/other/sg_execution_times", "datasets/sdes/index", "datasets/sdes/plot_birth_death_chain", "datasets/sdes/plot_custom_sde", "datasets/sdes/plot_double_well_2d", "datasets/sdes/plot_double_well_discrete", "datasets/sdes/plot_ornstein_uhlenbeck", "datasets/sdes/plot_prinz", "datasets/sdes/plot_quadruple_well", "datasets/sdes/plot_quadruple_well_asymmetric", "datasets/sdes/plot_time_quintuple_well", "datasets/sdes/plot_tmatrix_1d", "datasets/sdes/plot_triple_well_1d", "datasets/sdes/plot_triple_well_2d", "datasets/sdes/sg_execution_times", "examples/index", "examples/plot_ck_test", "examples/plot_clustering_comparison", "examples/plot_contour2d_from_xyz", "examples/plot_density", "examples/plot_energy_surface", "examples/plot_implied_timescales", "examples/plot_kcca_bickley", "examples/plot_kcca_projection", "examples/plot_network", "examples/plot_pcca_drunkard", "examples/plot_sindy_rossler_attractor", "examples/plot_tpt_gross_net_flux", "examples/plot_tram", "examples/plot_tv_derivative", "examples/plot_vamp_pbf_projection", "examples/plot_vamp_vs_tica_vs_pca", "examples/sg_execution_times", "imprint", "index_datasets", "index_deepdimreduction", "index_dev", "index_dimreduction", "index_examples", "index_msm", "license", "notebooks/clustering", "notebooks/dmd", "notebooks/edmd", "notebooks/examples/ala2-example", "notebooks/examples/coherence-bickley-jet", "notebooks/examples/msm-prinz", "notebooks/examples/sqrt-model-dimrx", "notebooks/hmm", "notebooks/kcca", "notebooks/kedmd", "notebooks/mlmsm", "notebooks/pcca", "notebooks/sindy", "notebooks/tae", "notebooks/tica", "notebooks/tpt", "notebooks/tram", "notebooks/transition-counting", "notebooks/vamp", "notebooks/vampnets"], "filenames": ["api/generated/deeptime.base.Dataset.rst", "api/generated/deeptime.base.Estimator.rst", "api/generated/deeptime.base.Model.rst", "api/generated/deeptime.base.Transformer.rst", "api/generated/deeptime.basis.Concatenation.rst", "api/generated/deeptime.basis.Identity.rst", "api/generated/deeptime.basis.Monomials.rst", "api/generated/deeptime.basis.Observable.rst", "api/generated/deeptime.clustering.BoxDiscretization.rst", "api/generated/deeptime.clustering.BoxDiscretizationModel.rst", "api/generated/deeptime.clustering.ClusterModel.rst", "api/generated/deeptime.clustering.KMeans.rst", "api/generated/deeptime.clustering.KMeansModel.rst", "api/generated/deeptime.clustering.MetricRegistry.rst", "api/generated/deeptime.clustering.MiniBatchKMeans.rst", "api/generated/deeptime.clustering.RegularSpace.rst", "api/generated/deeptime.clustering.kmeans_plusplus.rst", "api/generated/deeptime.clustering.metrics.rst", "api/generated/deeptime.covariance.Covariance.rst", "api/generated/deeptime.covariance.CovarianceModel.rst", "api/generated/deeptime.covariance.KoopmanWeightingEstimator.rst", "api/generated/deeptime.covariance.KoopmanWeightingModel.rst", "api/generated/deeptime.data.abc_flow.rst", "api/generated/deeptime.data.bickley_jet.rst", "api/generated/deeptime.data.birth_death_chain.rst", "api/generated/deeptime.data.custom_ode.rst", "api/generated/deeptime.data.custom_sde.rst", "api/generated/deeptime.data.double_well_2d.rst", "api/generated/deeptime.data.double_well_discrete.rst", "api/generated/deeptime.data.drunkards_walk.rst", "api/generated/deeptime.data.ellipsoids.rst", "api/generated/deeptime.data.lorenz_system.rst", "api/generated/deeptime.data.ornstein_uhlenbeck.rst", "api/generated/deeptime.data.position_based_fluids.rst", "api/generated/deeptime.data.prinz_potential.rst", "api/generated/deeptime.data.quadruple_well.rst", "api/generated/deeptime.data.quadruple_well_asymmetric.rst", "api/generated/deeptime.data.sqrt_model.rst", "api/generated/deeptime.data.swissroll_model.rst", "api/generated/deeptime.data.thomas_attractor.rst", "api/generated/deeptime.data.time_dependent_quintuple_well.rst", "api/generated/deeptime.data.tmatrix_metropolis1d.rst", "api/generated/deeptime.data.triple_well_1d.rst", "api/generated/deeptime.data.triple_well_2d.rst", "api/generated/deeptime.decomposition.CovarianceKoopmanModel.rst", "api/generated/deeptime.decomposition.DMD.rst", "api/generated/deeptime.decomposition.DMDModel.rst", "api/generated/deeptime.decomposition.EDMD.rst", "api/generated/deeptime.decomposition.EDMDModel.rst", "api/generated/deeptime.decomposition.KVAD.rst", "api/generated/deeptime.decomposition.KVADModel.rst", "api/generated/deeptime.decomposition.KernelCCA.rst", "api/generated/deeptime.decomposition.KernelCCAModel.rst", "api/generated/deeptime.decomposition.KernelEDMD.rst", "api/generated/deeptime.decomposition.KernelEDMDModel.rst", "api/generated/deeptime.decomposition.TICA.rst", "api/generated/deeptime.decomposition.TransferOperatorModel.rst", "api/generated/deeptime.decomposition.VAMP.rst", "api/generated/deeptime.decomposition.blocksplit_trajs.rst", "api/generated/deeptime.decomposition.cvsplit_trajs.rst", "api/generated/deeptime.decomposition.deep.TAE.rst", "api/generated/deeptime.decomposition.deep.TAEModel.rst", "api/generated/deeptime.decomposition.deep.TVAE.rst", "api/generated/deeptime.decomposition.deep.TVAEEncoder.rst", "api/generated/deeptime.decomposition.deep.TVAEModel.rst", "api/generated/deeptime.decomposition.deep.VAMPNet.rst", "api/generated/deeptime.decomposition.deep.VAMPNetModel.rst", "api/generated/deeptime.decomposition.deep.covariances.rst", "api/generated/deeptime.decomposition.deep.koopman_matrix.rst", "api/generated/deeptime.decomposition.deep.kvad_score.rst", "api/generated/deeptime.decomposition.deep.sym_inverse.rst", "api/generated/deeptime.decomposition.deep.vamp_score.rst", "api/generated/deeptime.decomposition.deep.vampnet_loss.rst", "api/generated/deeptime.decomposition.vamp_score.rst", "api/generated/deeptime.decomposition.vamp_score_cv.rst", "api/generated/deeptime.decomposition.vamp_score_data.rst", "api/generated/deeptime.kernels.GaussianKernel.rst", "api/generated/deeptime.kernels.GeneralizedGaussianKernel.rst", "api/generated/deeptime.kernels.Kernel.rst", "api/generated/deeptime.kernels.LaplacianKernel.rst", "api/generated/deeptime.kernels.PolynomialKernel.rst", "api/generated/deeptime.kernels.TorchGaussianKernel.rst", "api/generated/deeptime.kernels.is_torch_kernel.rst", "api/generated/deeptime.markov.PCCAModel.rst", "api/generated/deeptime.markov.ReactiveFlux.rst", "api/generated/deeptime.markov.TransitionCountEstimator.rst", "api/generated/deeptime.markov.TransitionCountModel.rst", "api/generated/deeptime.markov.compute_connected_sets.rst", "api/generated/deeptime.markov.compute_dtrajs_effective.rst", "api/generated/deeptime.markov.compute_effective_stride.rst", "api/generated/deeptime.markov.count_states.rst", "api/generated/deeptime.markov.hmm.BayesianHMM.rst", "api/generated/deeptime.markov.hmm.BayesianHMMPosterior.rst", "api/generated/deeptime.markov.hmm.DiscreteOutputModel.rst", "api/generated/deeptime.markov.hmm.GaussianOutputModel.rst", "api/generated/deeptime.markov.hmm.HiddenMarkovModel.rst", "api/generated/deeptime.markov.hmm.MaximumLikelihoodHMM.rst", "api/generated/deeptime.markov.hmm.OutputModel.rst", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_data.rst", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_msm.rst", "api/generated/deeptime.markov.hmm.init.discrete.random_guess.rst", "api/generated/deeptime.markov.hmm.init.gaussian.from_data.rst", "api/generated/deeptime.markov.msm.AugmentedMSM.rst", "api/generated/deeptime.markov.msm.AugmentedMSMEstimator.rst", "api/generated/deeptime.markov.msm.BayesianMSM.rst", "api/generated/deeptime.markov.msm.BayesianMSMPosterior.rst", "api/generated/deeptime.markov.msm.KoopmanReweightedMSM.rst", "api/generated/deeptime.markov.msm.MarkovStateModel.rst", "api/generated/deeptime.markov.msm.MarkovStateModelCollection.rst", "api/generated/deeptime.markov.msm.MaximumLikelihoodMSM.rst", "api/generated/deeptime.markov.msm.OOMReweightedMSM.rst", "api/generated/deeptime.markov.msm.TRAM.rst", "api/generated/deeptime.markov.msm.TRAMDataset.rst", "api/generated/deeptime.markov.msm.TRAMModel.rst", "api/generated/deeptime.markov.number_of_states.rst", "api/generated/deeptime.markov.pcca.rst", "api/generated/deeptime.markov.reactive_flux.rst", "api/generated/deeptime.markov.sample.compute_index_states.rst", "api/generated/deeptime.markov.sample.indices_by_distribution.rst", "api/generated/deeptime.markov.sample.indices_by_sequence.rst", "api/generated/deeptime.markov.sample.indices_by_state.rst", "api/generated/deeptime.markov.tools.analysis.committor.rst", "api/generated/deeptime.markov.tools.analysis.committor_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.correlation.rst", "api/generated/deeptime.markov.tools.analysis.eigenvalue_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.eigenvalues.rst", "api/generated/deeptime.markov.tools.analysis.eigenvector_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.eigenvectors.rst", "api/generated/deeptime.markov.tools.analysis.expectation.rst", "api/generated/deeptime.markov.tools.analysis.expectation_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.expected_counts.rst", "api/generated/deeptime.markov.tools.analysis.expected_counts_stationary.rst", "api/generated/deeptime.markov.tools.analysis.fingerprint_correlation.rst", "api/generated/deeptime.markov.tools.analysis.fingerprint_relaxation.rst", "api/generated/deeptime.markov.tools.analysis.hitting_probability.rst", "api/generated/deeptime.markov.tools.analysis.is_connected.rst", "api/generated/deeptime.markov.tools.analysis.is_rate_matrix.rst", "api/generated/deeptime.markov.tools.analysis.is_reversible.rst", "api/generated/deeptime.markov.tools.analysis.is_transition_matrix.rst", "api/generated/deeptime.markov.tools.analysis.mfpt.rst", "api/generated/deeptime.markov.tools.analysis.mfpt_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.pcca_memberships.rst", "api/generated/deeptime.markov.tools.analysis.rdl_decomposition.rst", "api/generated/deeptime.markov.tools.analysis.relaxation.rst", "api/generated/deeptime.markov.tools.analysis.stationary_distribution.rst", "api/generated/deeptime.markov.tools.analysis.stationary_distribution_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.timescale_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.timescales.rst", "api/generated/deeptime.markov.tools.estimation.bootstrap_counts.rst", "api/generated/deeptime.markov.tools.estimation.bootstrap_trajectories.rst", "api/generated/deeptime.markov.tools.estimation.connected_sets.rst", "api/generated/deeptime.markov.tools.estimation.count_matrix.rst", "api/generated/deeptime.markov.tools.estimation.error_perturbation.rst", "api/generated/deeptime.markov.tools.estimation.is_connected.rst", "api/generated/deeptime.markov.tools.estimation.largest_connected_set.rst", "api/generated/deeptime.markov.tools.estimation.largest_connected_submatrix.rst", "api/generated/deeptime.markov.tools.estimation.log_likelihood.rst", "api/generated/deeptime.markov.tools.estimation.prior_const.rst", "api/generated/deeptime.markov.tools.estimation.prior_neighbor.rst", "api/generated/deeptime.markov.tools.estimation.prior_rev.rst", "api/generated/deeptime.markov.tools.estimation.rate_matrix.rst", "api/generated/deeptime.markov.tools.estimation.tmatrix_cov.rst", "api/generated/deeptime.markov.tools.estimation.tmatrix_sampler.rst", "api/generated/deeptime.markov.tools.estimation.transition_matrix.rst", "api/generated/deeptime.markov.tools.flux.coarsegrain.rst", "api/generated/deeptime.markov.tools.flux.flux_consumers.rst", "api/generated/deeptime.markov.tools.flux.flux_matrix.rst", "api/generated/deeptime.markov.tools.flux.flux_producers.rst", "api/generated/deeptime.markov.tools.flux.flux_production.rst", "api/generated/deeptime.markov.tools.flux.mfpt.rst", "api/generated/deeptime.markov.tools.flux.pathways.rst", "api/generated/deeptime.markov.tools.flux.rate.rst", "api/generated/deeptime.markov.tools.flux.to_netflux.rst", "api/generated/deeptime.markov.tools.flux.total_flux.rst", "api/generated/deeptime.numeric.ZeroRankError.rst", "api/generated/deeptime.numeric.drop_nan_rows.rst", "api/generated/deeptime.numeric.eig_corr.rst", "api/generated/deeptime.numeric.eigs.rst", "api/generated/deeptime.numeric.is_diagonal_matrix.rst", "api/generated/deeptime.numeric.is_square_matrix.rst", "api/generated/deeptime.numeric.schatten_norm.rst", "api/generated/deeptime.numeric.sort_eigs.rst", "api/generated/deeptime.numeric.spd_eig.rst", "api/generated/deeptime.numeric.spd_inv.rst", "api/generated/deeptime.numeric.spd_inv_split.rst", "api/generated/deeptime.numeric.spd_inv_sqrt.rst", "api/generated/deeptime.numeric.spd_truncated_svd.rst", "api/generated/deeptime.plots.Energy2dPlot.rst", "api/generated/deeptime.plots.Network.rst", "api/generated/deeptime.plots.plot_adjacency.rst", "api/generated/deeptime.plots.plot_ck_test.rst", "api/generated/deeptime.plots.plot_contour2d_from_xyz.rst", "api/generated/deeptime.plots.plot_density.rst", "api/generated/deeptime.plots.plot_energy2d.rst", "api/generated/deeptime.plots.plot_flux.rst", "api/generated/deeptime.plots.plot_implied_timescales.rst", "api/generated/deeptime.plots.plot_markov_model.rst", "api/generated/deeptime.sindy.SINDy.rst", "api/generated/deeptime.sindy.SINDyModel.rst", "api/generated/deeptime.sindy.STLSQ.rst", "api/generated/deeptime.util.EnergyLandscape2d.rst", "api/generated/deeptime.util.QuantityStatistics.rst", "api/generated/deeptime.util.callbacks.ProgressCallback.rst", "api/generated/deeptime.util.callbacks.supports_progress_interface.rst", "api/generated/deeptime.util.confidence_interval.rst", "api/generated/deeptime.util.data.ConcatDataset.rst", "api/generated/deeptime.util.data.TimeLaggedConcatDataset.rst", "api/generated/deeptime.util.data.TimeLaggedDataset.rst", "api/generated/deeptime.util.data.TrajectoriesDataset.rst", "api/generated/deeptime.util.data.TrajectoryDataset.rst", "api/generated/deeptime.util.data.sliding_window.rst", "api/generated/deeptime.util.data.timeshifted_split.rst", "api/generated/deeptime.util.decorators.cached_property.rst", "api/generated/deeptime.util.decorators.deprecated_argument.rst", "api/generated/deeptime.util.decorators.plotting_function.rst", "api/generated/deeptime.util.diff.finite_difference_coefficients.rst", "api/generated/deeptime.util.diff.finite_difference_operator_midpoints.rst", "api/generated/deeptime.util.diff.tv_derivative.rst", "api/generated/deeptime.util.energy2d.rst", "api/generated/deeptime.util.parallel.handle_n_jobs.rst", "api/generated/deeptime.util.platform.handle_progress_bar.rst", "api/generated/deeptime.util.platform.module_available.rst", "api/generated/deeptime.util.types.atleast_nd.rst", "api/generated/deeptime.util.types.is_timelagged_dataset.rst", "api/generated/deeptime.util.types.to_dataset.rst", "api/generated/deeptime.util.validation.ChapmanKolmogorovTest.rst", "api/generated/deeptime.util.validation.ImpliedTimescales.rst", "api/generated/deeptime.util.validation.ck_test.rst", "api/generated/deeptime.util.validation.implied_timescales.rst", "api/generated/impl/deeptime.covariance.WhiteningTransform.rst", "api/generated/impl/deeptime.covariance.covar.rst", "api/generated/impl/deeptime.covariance.covars.rst", "api/generated/impl/deeptime.covariance.moments_XX.rst", "api/generated/impl/deeptime.covariance.moments_XXXY.rst", "api/generated/impl/deeptime.covariance.moments_block.rst", "api/generated/impl/deeptime.data.BickleyJet.rst", "api/generated/impl/deeptime.data.BirthDeathChain.rst", "api/generated/impl/deeptime.data.CustomSystem.rst", "api/generated/impl/deeptime.data.DoubleWellDiscrete.rst", "api/generated/impl/deeptime.data.DrunkardsWalk.rst", "api/generated/impl/deeptime.data.Ellipsoids.rst", "api/generated/impl/deeptime.data.PBFSimulator.rst", "api/generated/impl/deeptime.data.TimeDependentSystem.rst", "api/generated/impl/deeptime.data.TimeIndependentSystem.rst", "api/index_base.rst", "api/index_basis.rst", "api/index_clustering.rst", "api/index_covariance.rst", "api/index_data.rst", "api/index_decomposition.rst", "api/index_kernels.rst", "api/index_markov.rst", "api/index_markov_hmm.rst", "api/index_markov_tools.rst", "api/index_numeric.rst", "api/index_plots.rst", "api/index_sindy.rst", "api/index_util.rst", "contents.rst", "datasets/odes/index.rst", "datasets/odes/plot_abc_flow.rst", "datasets/odes/plot_bickley_jet.rst", "datasets/odes/plot_custom_ode.rst", "datasets/odes/plot_lorenz_system.rst", "datasets/odes/plot_thomas_attractor.rst", "datasets/odes/sg_execution_times.rst", "datasets/other/index.rst", "datasets/other/plot_drunkards_walk.rst", "datasets/other/plot_ellipsoids.rst", "datasets/other/plot_pbf.rst", "datasets/other/plot_sqrt_model.rst", "datasets/other/plot_swissroll_model.rst", "datasets/other/sg_execution_times.rst", "datasets/sdes/index.rst", "datasets/sdes/plot_birth_death_chain.rst", "datasets/sdes/plot_custom_sde.rst", "datasets/sdes/plot_double_well_2d.rst", "datasets/sdes/plot_double_well_discrete.rst", "datasets/sdes/plot_ornstein_uhlenbeck.rst", "datasets/sdes/plot_prinz.rst", "datasets/sdes/plot_quadruple_well.rst", "datasets/sdes/plot_quadruple_well_asymmetric.rst", "datasets/sdes/plot_time_quintuple_well.rst", "datasets/sdes/plot_tmatrix_1d.rst", "datasets/sdes/plot_triple_well_1d.rst", "datasets/sdes/plot_triple_well_2d.rst", "datasets/sdes/sg_execution_times.rst", "examples/index.rst", "examples/plot_ck_test.rst", "examples/plot_clustering_comparison.rst", "examples/plot_contour2d_from_xyz.rst", "examples/plot_density.rst", "examples/plot_energy_surface.rst", "examples/plot_implied_timescales.rst", "examples/plot_kcca_bickley.rst", "examples/plot_kcca_projection.rst", "examples/plot_network.rst", "examples/plot_pcca_drunkard.rst", "examples/plot_sindy_rossler_attractor.rst", "examples/plot_tpt_gross_net_flux.rst", "examples/plot_tram.rst", "examples/plot_tv_derivative.rst", "examples/plot_vamp_pbf_projection.rst", "examples/plot_vamp_vs_tica_vs_pca.rst", "examples/sg_execution_times.rst", "imprint.rst", "index_datasets.rst", "index_deepdimreduction.rst", "index_dev.rst", "index_dimreduction.rst", "index_examples.rst", "index_msm.rst", "license.rst", "notebooks/clustering.ipynb", "notebooks/dmd.ipynb", "notebooks/edmd.ipynb", "notebooks/examples/ala2-example.ipynb", "notebooks/examples/coherence-bickley-jet.ipynb", "notebooks/examples/msm-prinz.ipynb", "notebooks/examples/sqrt-model-dimrx.ipynb", "notebooks/hmm.ipynb", "notebooks/kcca.ipynb", "notebooks/kedmd.ipynb", "notebooks/mlmsm.ipynb", "notebooks/pcca.ipynb", "notebooks/sindy.ipynb", "notebooks/tae.ipynb", "notebooks/tica.ipynb", "notebooks/tpt.ipynb", "notebooks/tram.ipynb", "notebooks/transition-counting.ipynb", "notebooks/vamp.ipynb", "notebooks/vampnets.ipynb"], "titles": ["<em>class</em> Dataset", "<em>class</em> Estimator", "<em>class</em> Model", "<em>class</em> Transformer", "<em>class</em> Concatenation", "<em>class</em> Identity", "<em>class</em> Monomials", "<em>class</em> Observable", "<em>class</em> BoxDiscretization", "<em>class</em> BoxDiscretizationModel", "<em>class</em> ClusterModel", "<em>class</em> KMeans", "<em>class</em> KMeansModel", "<em>class</em> MetricRegistry", "<em>class</em> MiniBatchKMeans", "<em>class</em> RegularSpace", "<em>function</em> kmeans_plusplus", "<em>data</em> metrics", "<em>class</em> Covariance", "<em>class</em> CovarianceModel", "<em>class</em> KoopmanWeightingEstimator", "<em>class</em> KoopmanWeightingModel", "<em>function</em> abc_flow", "<em>function</em> bickley_jet", "<em>function</em> birth_death_chain", "<em>function</em> custom_ode", "<em>function</em> custom_sde", "<em>function</em> double_well_2d", "<em>function</em> double_well_discrete", "<em>function</em> drunkards_walk", "<em>function</em> ellipsoids", "<em>function</em> lorenz_system", "<em>function</em> ornstein_uhlenbeck", "<em>function</em> position_based_fluids", "<em>function</em> prinz_potential", "<em>function</em> quadruple_well", "<em>function</em> quadruple_well_asymmetric", "<em>function</em> sqrt_model", "<em>function</em> swissroll_model", "<em>function</em> thomas_attractor", "<em>function</em> time_dependent_quintuple_well", "<em>function</em> tmatrix_metropolis1d", "<em>function</em> triple_well_1d", "<em>function</em> triple_well_2d", "<em>class</em> CovarianceKoopmanModel", "<em>class</em> DMD", "<em>class</em> DMDModel", "<em>class</em> EDMD", "<em>class</em> EDMDModel", "<em>class</em> KVAD", "<em>class</em> KVADModel", "<em>class</em> KernelCCA", "<em>class</em> KernelCCAModel", "<em>class</em> KernelEDMD", "<em>class</em> KernelEDMDModel", "<em>class</em> TICA", "<em>class</em> TransferOperatorModel", "<em>class</em> VAMP", "<em>function</em> blocksplit_trajs", "<em>function</em> cvsplit_trajs", "<em>class</em> TAE", "<em>class</em> TAEModel", "<em>class</em> TVAE", "<em>class</em> TVAEEncoder", "<em>class</em> TVAEModel", "<em>class</em> VAMPNet", "<em>class</em> VAMPNetModel", "<em>function</em> covariances", "<em>function</em> koopman_matrix", "<em>function</em> kvad_score", "<em>function</em> sym_inverse", "<em>function</em> vamp_score", "<em>function</em> vampnet_loss", "<em>function</em> vamp_score", "<em>function</em> vamp_score_cv", "<em>function</em> vamp_score_data", "<em>class</em> GaussianKernel", "<em>class</em> GeneralizedGaussianKernel", "<em>class</em> Kernel", "<em>class</em> LaplacianKernel", "<em>class</em> PolynomialKernel", "<em>class</em> TorchGaussianKernel", "<em>function</em> is_torch_kernel", "<em>class</em> PCCAModel", "<em>class</em> ReactiveFlux", "<em>class</em> TransitionCountEstimator", "<em>class</em> TransitionCountModel", "<em>function</em> compute_connected_sets", "<em>function</em> compute_dtrajs_effective", "<em>function</em> compute_effective_stride", "<em>function</em> count_states", "<em>class</em> BayesianHMM", "<em>class</em> BayesianHMMPosterior", "<em>class</em> DiscreteOutputModel", "<em>class</em> GaussianOutputModel", "<em>class</em> HiddenMarkovModel", "<em>class</em> MaximumLikelihoodHMM", "<em>class</em> OutputModel", "<em>function</em> metastable_from_data", "<em>function</em> metastable_from_msm", "<em>function</em> random_guess", "<em>function</em> from_data", "<em>class</em> AugmentedMSM", "<em>class</em> AugmentedMSMEstimator", "<em>class</em> BayesianMSM", "<em>class</em> BayesianMSMPosterior", "<em>class</em> KoopmanReweightedMSM", "<em>class</em> MarkovStateModel", "<em>class</em> MarkovStateModelCollection", "<em>class</em> MaximumLikelihoodMSM", "<em>class</em> OOMReweightedMSM", "<em>class</em> TRAM", "<em>class</em> TRAMDataset", "<em>class</em> TRAMModel", "<em>function</em> number_of_states", "<em>function</em> pcca", "<em>function</em> reactive_flux", "<em>function</em> compute_index_states", "<em>function</em> indices_by_distribution", "<em>function</em> indices_by_sequence", "<em>function</em> indices_by_state", "deeptime.markov.tools.analysis.committor", "deeptime.markov.tools.analysis.committor_sensitivity", "deeptime.markov.tools.analysis.correlation", "deeptime.markov.tools.analysis.eigenvalue_sensitivity", "<em>function</em> eigenvalues", "deeptime.markov.tools.analysis.eigenvector_sensitivity", "<em>function</em> eigenvectors", "deeptime.markov.tools.analysis.expectation", "deeptime.markov.tools.analysis.expectation_sensitivity", "deeptime.markov.tools.analysis.expected_counts", "deeptime.markov.tools.analysis.expected_counts_stationary", "deeptime.markov.tools.analysis.fingerprint_correlation", "deeptime.markov.tools.analysis.fingerprint_relaxation", "deeptime.markov.tools.analysis.hitting_probability", "<em>function</em> is_connected", "<em>function</em> is_rate_matrix", "<em>function</em> is_reversible", "<em>function</em> is_transition_matrix", "deeptime.markov.tools.analysis.mfpt", "deeptime.markov.tools.analysis.mfpt_sensitivity", "deeptime.markov.tools.analysis.pcca_memberships", "<em>function</em> rdl_decomposition", "deeptime.markov.tools.analysis.relaxation", "<em>function</em> stationary_distribution", "deeptime.markov.tools.analysis.stationary_distribution_sensitivity", "deeptime.markov.tools.analysis.timescale_sensitivity", "<em>function</em> timescales", "deeptime.markov.tools.estimation.bootstrap_counts", "deeptime.markov.tools.estimation.bootstrap_trajectories", "deeptime.markov.tools.estimation.connected_sets", "deeptime.markov.tools.estimation.count_matrix", "deeptime.markov.tools.estimation.error_perturbation", "deeptime.markov.tools.estimation.is_connected", "deeptime.markov.tools.estimation.largest_connected_set", "deeptime.markov.tools.estimation.largest_connected_submatrix", "deeptime.markov.tools.estimation.log_likelihood", "deeptime.markov.tools.estimation.prior_const", "deeptime.markov.tools.estimation.prior_neighbor", "deeptime.markov.tools.estimation.prior_rev", "deeptime.markov.tools.estimation.rate_matrix", "deeptime.markov.tools.estimation.tmatrix_cov", "deeptime.markov.tools.estimation.tmatrix_sampler", "deeptime.markov.tools.estimation.transition_matrix", "deeptime.markov.tools.flux.coarsegrain", "deeptime.markov.tools.flux.flux_consumers", "deeptime.markov.tools.flux.flux_matrix", "deeptime.markov.tools.flux.flux_producers", "deeptime.markov.tools.flux.flux_production", "deeptime.markov.tools.flux.mfpt", "deeptime.markov.tools.flux.pathways", "deeptime.markov.tools.flux.rate", "deeptime.markov.tools.flux.to_netflux", "deeptime.markov.tools.flux.total_flux", "<em>exception</em> ZeroRankError", "<em>function</em> drop_nan_rows", "<em>function</em> eig_corr", "<em>function</em> eigs", "<em>function</em> is_diagonal_matrix", "<em>function</em> is_square_matrix", "<em>function</em> schatten_norm", "<em>function</em> sort_eigs", "<em>function</em> spd_eig", "<em>function</em> spd_inv", "<em>function</em> spd_inv_split", "<em>function</em> spd_inv_sqrt", "<em>function</em> spd_truncated_svd", "<em>class</em> Energy2dPlot", "<em>class</em> Network", "<em>function</em> plot_adjacency", "<em>function</em> plot_ck_test", "<em>function</em> plot_contour2d_from_xyz", "<em>function</em> plot_density", "<em>function</em> plot_energy2d", "<em>function</em> plot_flux", "<em>function</em> plot_implied_timescales", "<em>function</em> plot_markov_model", "<em>class</em> SINDy", "<em>class</em> SINDyModel", "<em>class</em> STLSQ", "<em>class</em> EnergyLandscape2d", "<em>class</em> QuantityStatistics", "<em>class</em> ProgressCallback", "<em>function</em> supports_progress_interface", "<em>function</em> confidence_interval", "<em>class</em> ConcatDataset", "<em>class</em> TimeLaggedConcatDataset", "<em>class</em> TimeLaggedDataset", "<em>class</em> TrajectoriesDataset", "<em>class</em> TrajectoryDataset", "<em>function</em> sliding_window", "<em>function</em> timeshifted_split", "<em>class</em> cached_property", "<em>function</em> deprecated_argument", "<em>function</em> plotting_function", "<em>function</em> finite_difference_coefficients", "<em>function</em> finite_difference_operator_midpoints", "<em>function</em> tv_derivative", "<em>function</em> energy2d", "<em>function</em> handle_n_jobs", "<em>function</em> handle_progress_bar", "<em>function</em> module_available", "<em>function</em> atleast_nd", "<em>function</em> is_timelagged_dataset", "<em>function</em> to_dataset", "<em>class</em> ChapmanKolmogorovTest", "<em>class</em> ImpliedTimescales", "<em>function</em> ck_test", "<em>function</em> implied_timescales", "<em>class</em> WhiteningTransform", "<em>function</em> covar", "<em>function</em> covars", "<em>function</em> moments_XX", "<em>function</em> moments_XXXY", "<em>function</em> moments_block", "<em>class</em> BickleyJet", "<em>class</em> BirthDeathChain", "<em>class</em> CustomSystem", "<em>class</em> DoubleWellDiscrete", "<em>class</em> DrunkardsWalk", "<em>class</em> Ellipsoids", "<em>class</em> PBFSimulator", "<em>class</em> TimeDependentSystem", "<em>class</em> TimeIndependentSystem", "deeptime.base", "deeptime.basis", "deeptime.clustering", "deeptime.covariance", "deeptime.data", "deeptime.decomposition", "deeptime.kernels", "deeptime.markov", "deeptime.markov.hmm", "deeptime.markov.tools", "deeptime.numeric", "deeptime.plots", "deeptime.sindy", "deeptime.util", "Table Of Contents", "ODEs", "Arnold-Beltrami-Childress flow", "Bickley Jet", "Custom ODEs", "Lorenz system", "Thomas attractor", "Computation times", "Other", "Drunkard\u2019s walk", "Ellipsoids dataset", "Position-based fluids", "Sqrt model", "Swissroll model", "Computation times", "SDEs", "Birth-death chain model", "Custom SDEs", "Double-well 2D", "Double-well discrete", "One-dimensional Ornstein-Uhlenbeck process", "One-dimensional Prinz potential", "Quadruple-well", "Asymmetric Quadruple-well", "Time-dependent quintuple well", "Metropolis chain in 1D energy landscape", "Triple-well 1D", "Triple-well 2D", "Computation times", "General examples", "Chapman-Kolmogorov test", "Clustering methods comparison", "2D contours from xyz", "2D densities from xy", "Energy surface", "Implied timescales", "Coherent sets: Kernel CCA on the Bickley jet", "Kernel CCA on the sqrt-Model to transform data", "Network plots", "PCCA+ on the Drunkard\u2019s walk", "SINDy: Identification of the R\u00f6ssler system", "Gross and net flux on the Drunkard\u2019s walk", "TRAM on a 1D double well", "TV Derivative", "VAMP on Position Based Fluids", "VAMP vs. TICA vs. PCA", "Computation times", "Imprint", "Datasets", "Deep dim reduction", "For developers", "Dimension reduction", "Examples", "Markov state models", "Software License", "Clustering", "DMD", "EDMD", "VAMPNets on Alanine Dipeptide", "Coherent set comparison on Bickley jet", "MSM on Prinz potential", "Dimension reduction of double-wedge dataset", "Hidden Markov Models", "Kernel VAMP / kernel CCA", "Kernel EDMD", "Maximum-likelihood MSMs", "Coarse-graining with PCCA+", "SINDy", "Time-lagged autoencoders", "TICA", "Transition path theory", "TRAM", "Transition counting", "VAMP / time-lagged CCA", "VAMPNets"], "terms": {"deeptim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 135, 136, 137, 138, 142, 144, 147, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332], "base": [0, 1, 2, 3, 8, 11, 14, 23, 33, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 62, 65, 67, 68, 71, 73, 74, 75, 78, 84, 85, 95, 102, 103, 104, 106, 107, 108, 110, 111, 112, 160, 162, 176, 182, 183, 184, 185, 188, 189, 191, 192, 194, 202, 218, 224, 235, 240, 241, 245, 258, 266, 272, 287, 291, 292, 296, 300, 304, 305, 306, 308, 309, 310, 311, 312, 316, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 121, 123, 125, 127, 128, 132, 133, 134, 137, 139, 142, 143, 144, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 222, 224, 226, 227, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 261, 263, 264, 267, 268, 282, 297, 305, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332], "superclass": [0, 2, 12, 14, 97], "It": [0, 8, 10, 12, 15, 22, 25, 26, 31, 32, 33, 35, 36, 39, 42, 44, 47, 48, 55, 56, 57, 63, 71, 72, 73, 77, 86, 95, 96, 107, 112, 123, 132, 160, 170, 188, 194, 196, 197, 198, 215, 222, 227, 229, 241, 308, 309, 313, 314, 315, 316, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332], "i": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 251, 253, 262, 271, 275, 282, 289, 295, 297, 299, 300, 302, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "an": [0, 1, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 66, 67, 73, 74, 76, 77, 78, 79, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 123, 128, 132, 133, 143, 149, 150, 156, 160, 176, 179, 188, 189, 190, 191, 194, 195, 196, 197, 198, 213, 215, 220, 222, 223, 226, 227, 230, 231, 232, 233, 234, 239, 240, 241, 251, 252, 257, 270, 271, 293, 294, 295, 298, 303, 308, 309, 311, 312, 313, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331], "abstract": [0, 1, 3, 97, 308], "requir": [0, 18, 20, 45, 82, 86, 87, 89, 91, 95, 96, 98, 104, 107, 109, 112, 162, 215, 217, 222, 227, 241, 249, 307, 309, 312, 313, 314, 316, 320, 323, 327, 330, 332], "implement": [0, 9, 10, 11, 12, 13, 14, 17, 18, 22, 23, 27, 32, 35, 36, 43, 51, 53, 57, 63, 65, 66, 72, 74, 76, 77, 78, 79, 80, 81, 91, 93, 97, 102, 104, 106, 107, 108, 109, 115, 121, 149, 160, 163, 197, 198, 202, 203, 217, 224, 235, 241, 242, 243, 250, 258, 289, 307, 308, 309, 311, 313, 317, 320, 327, 328, 331], "__len__": [0, 223, 224, 317], "obtain": [0, 25, 34, 44, 55, 57, 86, 92, 94, 95, 96, 97, 99, 102, 105, 106, 107, 108, 110, 112, 151, 188, 193, 194, 195, 196, 201, 212, 229, 293, 295, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331], "its": [0, 10, 11, 12, 14, 55, 57, 60, 63, 73, 84, 89, 102, 106, 107, 108, 112, 142, 160, 163, 176, 188, 192, 226, 239, 300, 308, 309, 312, 313, 314, 316, 317, 318, 320, 323, 324, 328, 331], "length": [0, 10, 11, 12, 14, 25, 26, 29, 44, 58, 65, 74, 83, 85, 86, 93, 94, 95, 97, 102, 106, 107, 108, 110, 111, 112, 118, 142, 148, 149, 175, 188, 198, 207, 210, 211, 217, 223, 224, 235, 237, 238, 239, 242, 243, 262, 282, 284, 290, 291, 292, 293, 312, 315, 317, 318, 328, 329, 330], "__getitem__": [0, 223, 224, 317], "one": [0, 1, 6, 8, 9, 11, 14, 15, 18, 20, 25, 29, 30, 32, 34, 42, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 66, 73, 74, 83, 85, 86, 90, 91, 93, 94, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 135, 138, 139, 149, 160, 163, 188, 197, 198, 217, 225, 230, 231, 232, 233, 234, 235, 237, 239, 242, 243, 252, 289, 298, 305, 308, 309, 311, 312, 313, 314, 315, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332], "sever": [0, 63, 96, 102, 106, 107, 108, 116, 311, 330], "item": [0, 206, 317], "setflag": [0, 112, 205, 206, 207, 208, 209], "set": [0, 1, 2, 6, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 27, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 74, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 122, 134, 139, 140, 141, 148, 149, 150, 154, 155, 156, 163, 164, 170, 173, 174, 188, 190, 194, 196, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 218, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 258, 287, 297, 298, 304, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332], "writeabl": [0, 112, 205, 206, 207, 208, 209], "state": [0, 7, 9, 24, 25, 26, 28, 29, 30, 31, 34, 37, 38, 39, 40, 43, 44, 48, 50, 52, 54, 55, 56, 63, 65, 74, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 129, 132, 133, 134, 135, 139, 140, 141, 143, 150, 155, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 188, 194, 196, 211, 218, 227, 235, 236, 237, 238, 239, 240, 242, 243, 251, 252, 253, 258, 267, 270, 271, 274, 283, 289, 290, 293, 295, 296, 297, 300, 308, 309, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "util": [0, 44, 55, 57, 63, 65, 66, 70, 92, 95, 102, 105, 106, 107, 108, 187, 190, 193, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 235, 237, 242, 243, 250, 253, 254, 255, 258, 292, 293, 301, 308, 309, 312, 316, 317, 319, 326, 332], "data": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 91, 94, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 141, 149, 160, 163, 190, 191, 192, 193, 195, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 217, 218, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 253, 256, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "timelaggeddataset": [0, 206, 209, 224, 258, 317], "A": [0, 1, 2, 9, 10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 39, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 74, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 100, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 116, 119, 121, 122, 129, 133, 134, 135, 136, 137, 138, 142, 143, 149, 153, 160, 162, 163, 166, 169, 170, 171, 172, 173, 178, 186, 188, 189, 194, 195, 196, 198, 199, 210, 211, 219, 220, 222, 224, 236, 237, 238, 239, 241, 309, 311, 312, 313, 314, 315, 318, 320, 322, 323, 324, 327, 328, 330], "pair": [0, 45, 47, 49, 51, 53, 84, 112, 135, 142, 164, 165, 166, 167, 168, 172, 173, 177, 211, 236, 314, 327], "instantan": [0, 18, 19, 44, 49, 50, 54, 57, 60, 62, 65, 66, 67, 68, 75, 176, 207, 209, 224, 326, 327, 331], "timelag": [0, 18, 23, 65, 66, 207, 224], "timelaggedconcatdataset": [0, 207, 258], "concaten": [0, 11, 109, 205, 208, 209, 224, 258, 263, 264, 276, 280, 281, 285, 290, 291, 292, 293, 316, 318, 319, 320, 331], "trajectorydataset": [0, 207, 208, 258, 316, 319, 326, 332], "trajectori": [0, 9, 10, 11, 12, 14, 18, 22, 23, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 40, 43, 44, 46, 49, 55, 57, 58, 59, 61, 64, 74, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 139, 147, 148, 149, 151, 208, 209, 211, 224, 230, 231, 232, 233, 235, 237, 238, 240, 241, 242, 243, 258, 262, 263, 264, 270, 271, 275, 276, 278, 279, 280, 281, 282, 284, 285, 290, 291, 292, 293, 300, 302, 303, 309, 313, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 329, 330, 331, 332], "lagtim": [0, 18, 19, 20, 44, 45, 47, 49, 51, 53, 55, 57, 74, 85, 86, 88, 89, 91, 92, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 148, 151, 190, 208, 209, 211, 224, 225, 226, 227, 288, 290, 292, 293, 300, 302, 303, 309, 316, 317, 318, 319, 320, 323, 324, 327, 329, 330, 331, 332], "trajectoriesdataset": [0, 207, 209, 224, 258, 316], "multipl": [0, 14, 44, 55, 57, 60, 62, 90, 95, 102, 106, 107, 108, 111, 142, 148, 149, 208, 209, 211, 222, 230, 231, 235, 237, 242, 243, 329], "method": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 23, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 127, 144, 149, 151, 160, 162, 163, 176, 182, 183, 184, 185, 186, 188, 191, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 223, 225, 226, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 250, 252, 287, 300, 304, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332], "write": [0, 112, 205, 206, 207, 208, 209, 258, 325], "true": [0, 11, 13, 17, 18, 19, 44, 48, 50, 52, 54, 55, 56, 57, 58, 63, 66, 67, 70, 73, 74, 82, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 120, 121, 122, 123, 125, 126, 127, 135, 136, 137, 138, 144, 147, 148, 149, 150, 151, 153, 154, 155, 162, 163, 166, 176, 178, 180, 189, 190, 193, 194, 195, 199, 200, 204, 205, 206, 207, 208, 209, 210, 217, 218, 222, 225, 227, 230, 231, 232, 233, 234, 235, 239, 260, 263, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 291, 292, 295, 297, 298, 313, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332], "flag": [0, 86, 95, 112, 205, 206, 207, 208, 209], "contain": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 28, 30, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 71, 73, 83, 84, 85, 86, 91, 93, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 141, 142, 150, 168, 175, 188, 189, 190, 195, 196, 197, 198, 199, 201, 205, 206, 207, 208, 209, 225, 226, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 288, 306, 309, 310, 312, 315, 322, 323, 327, 328, 329, 330, 331], "arrai": [0, 8, 9, 10, 11, 12, 14, 16, 18, 22, 25, 26, 27, 32, 34, 36, 40, 43, 44, 66, 67, 70, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 91, 92, 93, 94, 95, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 175, 179, 188, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 211, 215, 218, 222, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 253, 260, 263, 275, 276, 277, 280, 281, 285, 289, 296, 298, 308, 313, 317, 319, 320, 323, 324, 327, 328, 330], "model": [1, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 25, 27, 28, 30, 32, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 74, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 141, 148, 149, 151, 156, 160, 162, 163, 166, 170, 172, 173, 194, 195, 196, 197, 198, 199, 225, 226, 227, 228, 238, 239, 240, 253, 258, 266, 267, 272, 273, 286, 287, 288, 293, 294, 296, 298, 300, 302, 304, 306, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "none": [1, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 30, 33, 37, 38, 44, 45, 47, 49, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 120, 121, 123, 125, 127, 128, 131, 132, 133, 137, 139, 142, 143, 144, 147, 148, 151, 155, 160, 161, 162, 163, 173, 177, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 211, 212, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 295, 300, 308, 312, 323, 327, 331], "all": [1, 3, 8, 11, 12, 14, 15, 18, 20, 23, 44, 47, 55, 57, 63, 74, 75, 78, 84, 86, 91, 93, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 134, 141, 148, 149, 150, 151, 162, 168, 170, 175, 177, 182, 186, 188, 192, 194, 196, 199, 206, 209, 218, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 244, 305, 308, 309, 312, 313, 314, 315, 323, 324, 326, 327, 328, 329, 330, 331], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308, 309, 312, 313, 317, 319, 321, 322, 323, 327, 331, 332], "option": [1, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 30, 33, 37, 38, 40, 41, 44, 45, 46, 47, 49, 51, 53, 55, 56, 57, 60, 62, 63, 65, 66, 68, 70, 73, 74, 75, 80, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 120, 122, 123, 125, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 170, 173, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 211, 217, 218, 219, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308, 312, 313, 314, 320, 323, 325, 327, 328, 330, 331], "default": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 80, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 123, 144, 148, 150, 153, 154, 155, 160, 162, 163, 170, 176, 177, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 204, 210, 211, 215, 217, 218, 222, 224, 226, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308, 309, 320, 325, 327, 328, 331], "which": [1, 6, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 23, 27, 30, 32, 34, 35, 36, 37, 38, 40, 43, 44, 45, 47, 48, 49, 53, 55, 56, 57, 60, 62, 63, 65, 66, 68, 74, 76, 77, 78, 79, 80, 81, 85, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 119, 123, 139, 142, 143, 145, 147, 148, 163, 164, 175, 177, 178, 180, 181, 186, 188, 189, 191, 192, 194, 195, 196, 197, 198, 201, 206, 207, 211, 217, 218, 225, 235, 239, 240, 241, 249, 250, 251, 252, 253, 288, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332], "can": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 40, 43, 44, 45, 47, 48, 49, 53, 55, 57, 60, 61, 62, 63, 65, 66, 72, 73, 74, 75, 81, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 121, 123, 130, 132, 135, 137, 148, 149, 150, 151, 153, 154, 155, 160, 162, 170, 177, 181, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 201, 203, 207, 211, 212, 217, 219, 223, 225, 226, 227, 229, 230, 231, 235, 236, 238, 239, 240, 241, 242, 246, 247, 249, 250, 251, 252, 294, 298, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "us": [1, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 77, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 120, 121, 123, 125, 127, 132, 135, 141, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 160, 162, 163, 164, 166, 176, 177, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 206, 207, 211, 217, 218, 219, 222, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 246, 249, 250, 251, 253, 257, 277, 288, 298, 299, 300, 303, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "initi": [1, 8, 11, 14, 15, 16, 18, 20, 22, 23, 27, 32, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 85, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 130, 143, 160, 197, 198, 217, 235, 237, 239, 241, 242, 243, 258, 289, 298, 300, 317, 320, 325, 327, 328, 329, 331], "In": [1, 11, 12, 15, 18, 19, 22, 30, 44, 45, 47, 51, 55, 57, 60, 63, 74, 86, 92, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 135, 137, 149, 160, 186, 188, 189, 191, 192, 211, 219, 223, 224, 226, 235, 237, 240, 241, 242, 243, 296, 298, 307, 311, 312, 313, 314, 315, 316, 318, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332], "case": [1, 8, 11, 14, 15, 19, 24, 26, 30, 44, 49, 55, 57, 60, 62, 65, 66, 74, 76, 77, 78, 79, 80, 81, 82, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 127, 137, 177, 181, 186, 188, 189, 190, 191, 192, 211, 217, 224, 226, 235, 236, 237, 240, 242, 243, 252, 290, 291, 308, 309, 313, 315, 320, 321, 323, 326, 327, 328, 329, 330, 331], "capabl": [1, 22, 27, 32, 34, 35, 36, 40, 43, 48, 258], "onlin": [1, 18, 67, 305, 309, 313], "learn": [1, 11, 14, 20, 44, 51, 55, 57, 60, 62, 65, 73, 74, 91, 96, 101, 103, 107, 109, 197, 198, 298, 307, 309, 317, 321, 323, 325, 326, 327, 331, 332], "e": [1, 6, 18, 23, 24, 26, 30, 34, 41, 44, 48, 50, 52, 54, 56, 57, 63, 65, 73, 82, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 123, 128, 130, 131, 132, 133, 139, 143, 151, 160, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 178, 188, 189, 191, 192, 194, 195, 196, 198, 207, 211, 218, 224, 225, 235, 239, 241, 300, 307, 308, 309, 311, 312, 313, 314, 316, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "updat": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 34, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 202, 203, 217, 241, 260, 282, 308, 313], "thi": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 127, 135, 137, 138, 141, 148, 149, 151, 159, 160, 162, 163, 170, 176, 178, 179, 182, 183, 184, 185, 187, 188, 194, 195, 196, 197, 198, 199, 205, 206, 207, 208, 210, 211, 214, 217, 218, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 253, 289, 290, 291, 293, 294, 295, 297, 298, 299, 300, 303, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "resum": [1, 11, 14], "process": [1, 9, 10, 12, 20, 26, 27, 28, 32, 35, 36, 40, 42, 43, 44, 55, 57, 65, 73, 74, 84, 92, 96, 98, 102, 103, 105, 106, 107, 108, 109, 116, 121, 123, 132, 133, 135, 139, 143, 149, 160, 166, 170, 172, 173, 195, 222, 226, 238, 249, 255, 273, 286, 306, 307, 309, 311, 313, 314, 315, 316, 320, 321, 323, 324, 326, 327, 328, 330, 331, 332], "attribut": [1, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 34, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 188, 194, 197, 198, 201, 203, 205, 206, 207, 208, 209, 212, 223, 225, 226, 235, 236, 237, 238, 239, 240, 241, 242, 243], "fetch_model": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 197, 289, 290, 294, 295, 298, 302, 303, 308, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332], "yield": [1, 6, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 30, 33, 39, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 64, 65, 67, 73, 74, 76, 77, 78, 79, 80, 81, 85, 91, 93, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 186, 188, 189, 197, 210, 216, 224, 226, 229, 235, 236, 237, 239, 240, 242, 243, 309, 313, 315, 318, 320, 327, 331, 332], "fit": [1, 8, 11, 12, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 66, 74, 85, 91, 93, 94, 95, 96, 97, 103, 104, 109, 110, 111, 197, 198, 199, 289, 290, 294, 295, 298, 302, 303, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332], "wa": [1, 9, 10, 11, 12, 14, 15, 19, 20, 21, 33, 44, 45, 46, 48, 49, 50, 52, 54, 55, 57, 73, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 123, 139, 147, 160, 163, 187, 188, 191, 192, 194, 211, 220, 229, 308, 311, 312, 314, 321, 323, 327, 329, 330, 331], "call": [1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 85, 91, 92, 96, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 138, 148, 149, 162, 187, 197, 199, 201, 202, 222, 227, 239, 308, 311, 312, 313, 320, 322, 327, 328, 330, 331], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 260, 271, 275, 282, 298, 300, 308, 313, 317, 319, 321, 323, 327, 328, 329], "type": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 177, 178, 179, 180, 181, 183, 184, 185, 188, 189, 190, 193, 195, 196, 197, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 258, 308, 311, 313, 320, 326, 331], "kwarg": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 85, 91, 92, 96, 103, 104, 105, 109, 110, 111, 195, 197, 201, 229], "": [1, 2, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 25, 26, 27, 30, 34, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 74, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 121, 122, 123, 124, 126, 129, 132, 133, 135, 140, 143, 145, 146, 149, 150, 152, 153, 154, 155, 163, 182, 184, 186, 187, 188, 194, 196, 197, 198, 199, 215, 222, 232, 234, 235, 237, 239, 241, 242, 243, 266, 271, 272, 276, 280, 281, 285, 287, 300, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332], "intern": [1, 8, 11, 14, 15, 18, 20, 22, 27, 32, 34, 35, 36, 39, 40, 43, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 71, 73, 85, 91, 93, 94, 95, 96, 102, 103, 104, 106, 107, 108, 109, 110, 111, 116, 197, 217, 240, 241, 309, 313, 328], "overwrit": [1, 8, 49, 102, 106, 107, 108, 111, 194, 196], "wai": [1, 8, 11, 15, 23, 49, 74, 111, 198, 241, 308, 313, 328, 331], "everi": [1, 8, 15, 49, 57, 63, 84, 95, 102, 106, 107, 108, 111, 112, 113, 148, 149, 162, 182, 184, 300, 313, 320, 331], "autonom": [1, 8, 49], "instanc": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 26, 27, 29, 32, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 187, 197, 198, 199, 207, 209, 226, 227, 238, 317, 320, 323, 327, 330, 331, 332], "sometim": [1, 8, 49, 85, 313, 314, 324, 327, 331], "partial_fit": [1, 8, 14, 15, 18, 20, 49, 55, 57, 65, 308, 309, 313], "avail": [1, 8, 11, 13, 14, 15, 16, 17, 18, 44, 45, 49, 53, 55, 57, 74, 84, 85, 91, 92, 95, 96, 98, 99, 102, 106, 107, 108, 118, 120, 149, 219, 221, 225, 226, 235, 237, 242, 243, 308, 309, 311, 313, 316, 320, 327, 329, 330, 331], "get": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 74, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 164, 197, 198, 199, 206, 212, 241, 298, 313, 314, 316, 317, 320, 323, 326, 329], "array_lik": [1, 3, 4, 5, 6, 7, 8, 11, 14, 15, 18, 20, 24, 45, 47, 49, 51, 53, 55, 57, 60, 61, 62, 64, 65, 66, 74, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 116, 117, 119, 121, 122, 134, 151, 162, 163, 170, 173, 197, 222, 229, 235, 236, 237, 242, 243], "addit": [1, 8, 11, 14, 15, 18, 20, 30, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 73, 85, 91, 95, 96, 102, 103, 104, 106, 107, 108, 109, 110, 111, 116, 175, 197, 229, 230, 231, 239, 240, 242, 243, 312, 329, 331], "self": [1, 2, 3, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 174, 197, 198, 199, 202, 235, 308, 317], "refer": [1, 8, 11, 13, 14, 15, 16, 18, 20, 21, 22, 23, 26, 31, 33, 34, 39, 43, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 73, 74, 83, 84, 85, 86, 91, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 121, 123, 132, 133, 135, 139, 141, 143, 149, 150, 151, 153, 154, 155, 156, 160, 162, 163, 164, 166, 169, 170, 171, 172, 173, 193, 194, 196, 197, 199, 217, 235, 239, 241, 305, 307, 308, 309, 311, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "fit_fetch": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 74, 85, 91, 96, 103, 104, 109, 110, 111, 197, 288, 290, 292, 293, 300, 316, 317, 318, 319, 329], "subsequ": [1, 8, 9, 11, 13, 14, 15, 17, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 85, 91, 95, 96, 98, 103, 104, 109, 110, 111, 197, 210, 218, 308, 313, 319, 321, 327, 328], "fetch": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 74, 85, 91, 96, 102, 103, 104, 106, 107, 108, 109, 110, 111, 197, 308, 313, 316, 327, 330], "argument": [1, 8, 11, 14, 15, 18, 20, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 85, 86, 91, 92, 95, 96, 101, 103, 104, 105, 107, 109, 110, 111, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 213, 219, 222, 224, 238, 241, 309, 312, 320, 323, 327, 328, 332], "get_param": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199], "deep": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 258, 316, 317, 319, 326, 332], "fals": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 120, 121, 122, 125, 127, 135, 136, 137, 138, 142, 147, 150, 151, 153, 154, 155, 162, 163, 166, 176, 178, 180, 182, 184, 185, 192, 194, 197, 198, 199, 201, 204, 210, 211, 214, 222, 227, 230, 231, 232, 233, 234, 235, 236, 239, 240, 242, 261, 268, 269, 271, 276, 279, 280, 281, 285, 288, 296, 301, 302, 303, 315, 316, 317, 318, 320, 326, 328, 330, 331, 332], "param": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 319, 321], "name": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 201, 221, 313, 320, 323, 325], "map": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 23, 25, 26, 27, 32, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 191, 192, 197, 198, 199, 235, 239, 240, 252, 290, 307, 313, 314, 317, 320, 322, 326, 327, 330, 331], "valu": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 70, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 123, 127, 128, 129, 130, 131, 133, 143, 152, 157, 158, 159, 160, 164, 165, 166, 167, 168, 170, 172, 173, 176, 180, 186, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 204, 217, 218, 219, 235, 236, 240, 241, 295, 308, 309, 313, 320, 321, 324, 325, 327, 328, 330, 331, 332], "string": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 160, 188, 194, 196, 197, 198, 202, 241, 323, 332], "ani": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 135, 175, 189, 197, 198, 204, 208, 222, 260, 261, 269, 282, 305, 312, 313, 317, 320, 321, 324, 329, 331, 332], "set_param": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199], "work": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 213, 222, 249, 307, 312, 316, 324, 325, 329, 332], "simpl": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 222, 281, 300, 320, 329], "well": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 25, 27, 28, 32, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 78, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 127, 197, 198, 199, 203, 224, 238, 258, 273, 286, 287, 290, 304, 306, 310, 311, 312, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331], "nest": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199], "object": [1, 2, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 160, 162, 166, 179, 188, 190, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 210, 223, 226, 228, 241, 257, 258, 289, 305, 311, 312, 313, 319, 320, 321, 323, 327, 328, 329], "pipelin": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 309, 316, 327], "latter": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199, 313, 331], "have": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 119, 131, 142, 153, 163, 164, 165, 167, 175, 192, 197, 198, 199, 210, 211, 218, 222, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 308, 312, 313, 316, 323, 325, 326, 327, 329, 330], "form": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 25, 26, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 151, 176, 197, 198, 199, 208, 262, 275, 289, 312, 313, 314, 320, 321, 322, 325, 327, 328, 331], "compon": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 75, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 150, 153, 154, 155, 186, 197, 198, 199, 229, 288, 302, 303, 309, 313, 321, 324, 325, 327, 331], "__": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 197, 198, 199], "so": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 30, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 137, 161, 170, 186, 197, 198, 199, 215, 217, 219, 222, 227, 241, 308, 309, 311, 312, 313, 322, 326, 327, 328, 329, 331, 332], "possibl": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 29, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 170, 194, 196, 197, 198, 199, 218, 224, 230, 231, 232, 233, 234, 239, 241, 305, 309, 311, 313, 320, 321, 324, 327, 331, 332], "each": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 26, 27, 32, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 74, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 136, 138, 141, 142, 148, 149, 150, 161, 168, 170, 175, 176, 188, 194, 196, 197, 198, 199, 211, 218, 225, 226, 227, 229, 230, 231, 232, 233, 235, 237, 241, 242, 243, 308, 311, 312, 313, 316, 318, 320, 323, 324, 325, 327, 328, 329, 330, 331], "dict": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 188, 189, 191, 192, 193, 196, 197, 198, 199, 242, 243, 281, 290, 291, 292, 317, 318, 319], "properti": [1, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 76, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 138, 164, 188, 197, 198, 201, 205, 206, 207, 208, 209, 212, 225, 226, 227, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308, 314, 318, 323, 325, 327, 330, 332], "has_model": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 197], "bool": [1, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 24, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 70, 74, 82, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 121, 122, 125, 126, 127, 135, 136, 137, 138, 142, 144, 147, 150, 151, 153, 154, 155, 162, 163, 176, 178, 179, 180, 182, 185, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 210, 211, 217, 218, 221, 223, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 295], "report": [1, 8, 11, 14, 15, 16, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 197, 313, 328], "whether": [1, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 24, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 66, 67, 70, 74, 82, 85, 86, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 120, 144, 150, 151, 153, 154, 155, 178, 179, 182, 185, 189, 190, 192, 193, 195, 197, 199, 201, 203, 211, 214, 217, 218, 221, 223, 225, 226, 227, 235, 236, 237, 239, 242, 243, 312, 323, 325, 327, 331], "assum": [1, 8, 11, 14, 15, 18, 20, 26, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 73, 83, 85, 86, 91, 95, 96, 98, 103, 104, 107, 108, 109, 110, 111, 112, 115, 148, 149, 180, 197, 198, 201, 218, 224, 229, 239, 309, 311, 314, 327, 329, 331, 332], "otherwis": [1, 8, 11, 14, 15, 18, 20, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 73, 74, 82, 85, 86, 88, 91, 95, 96, 97, 98, 103, 104, 107, 109, 110, 111, 112, 113, 126, 127, 135, 136, 137, 138, 153, 163, 178, 188, 189, 193, 194, 197, 218, 224, 312, 320, 327, 328, 330, 331, 332], "shortcut": [1, 8, 11, 14, 15, 18, 20, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 197, 225], "copi": [2, 9, 10, 12, 19, 21, 44, 46, 48, 50, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 83, 84, 86, 92, 93, 94, 95, 97, 102, 104, 105, 106, 107, 108, 109, 113, 198, 199, 212, 222, 230, 231, 232, 233, 234, 235, 261, 309, 312, 319], "make": [2, 9, 10, 12, 16, 19, 21, 44, 46, 48, 50, 52, 54, 56, 61, 63, 64, 65, 66, 83, 84, 85, 86, 92, 93, 94, 95, 97, 98, 99, 101, 102, 105, 106, 107, 108, 113, 156, 164, 194, 196, 198, 235, 308, 309, 312, 313, 317, 319, 323, 324, 326, 327, 328, 330, 331], "new": [2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 44, 46, 48, 50, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 86, 92, 93, 94, 95, 96, 97, 102, 105, 106, 107, 108, 109, 113, 149, 190, 196, 198, 207, 209, 222, 235, 244, 258, 308, 312, 313, 316, 325, 331], "estim": [2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 71, 73, 74, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 144, 193, 195, 197, 198, 199, 200, 218, 225, 227, 234, 241, 244, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 309, 311, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332], "__call__": [3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 20, 21, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 77, 78, 79, 80, 81, 85, 202, 229, 235, 237, 242, 243, 317], "arg": [3, 9, 10, 11, 12, 14, 20, 21, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 85, 92, 103, 105, 109, 111, 175, 201, 202, 226, 239], "function": [3, 9, 10, 11, 12, 14, 20, 21, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 85, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 148, 149, 151, 160, 166, 197, 198, 199, 202, 235, 237, 242, 243, 253, 258, 294, 301, 308, 309, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331], "input": [3, 4, 5, 6, 7, 9, 11, 14, 16, 18, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 73, 74, 85, 86, 88, 91, 95, 96, 98, 102, 106, 107, 108, 109, 110, 111, 112, 116, 148, 163, 174, 175, 180, 182, 186, 197, 198, 199, 206, 211, 220, 222, 223, 224, 228, 229, 230, 231, 232, 233, 234, 235, 241, 307, 315, 326, 327, 329, 331, 332], "basi": [4, 5, 6, 7, 10, 19, 21, 44, 47, 48, 49, 55, 56, 57, 71, 198, 258, 309, 315, 319, 325, 327, 331], "obs1": [4, 123, 132], "callabl": [4, 16, 25, 26, 44, 47, 48, 49, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 74, 75, 104, 189, 198, 213, 227, 235, 237, 242, 243, 319], "ndarrai": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 26, 33, 37, 38, 41, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 194, 196, 197, 198, 200, 201, 204, 207, 208, 209, 211, 215, 216, 217, 218, 222, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308], "obs2": [4, 123, 132], "oper": [4, 20, 21, 44, 47, 48, 50, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 66, 71, 73, 102, 106, 107, 108, 110, 216, 217, 227, 235, 239, 241, 307, 309, 311, 312, 314, 315, 321, 322, 327, 328, 331, 332], "evalu": [4, 5, 6, 7, 11, 16, 22, 25, 26, 27, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 54, 55, 57, 60, 62, 63, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 95, 97, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 148, 152, 188, 197, 198, 201, 215, 227, 229, 235, 237, 241, 242, 243, 295, 300, 309, 313, 316, 317, 320, 321, 322, 323, 328, 329, 331, 332], "f_1": [4, 152, 325, 331], "circ": [4, 307], "f_2": [4, 325], "x": [4, 5, 6, 7, 11, 12, 15, 18, 21, 22, 23, 25, 26, 27, 31, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 50, 52, 54, 55, 56, 57, 60, 62, 67, 68, 76, 77, 78, 79, 80, 81, 102, 106, 107, 108, 113, 121, 123, 132, 133, 139, 143, 151, 152, 186, 190, 191, 192, 194, 197, 198, 199, 200, 211, 215, 216, 217, 218, 224, 229, 230, 231, 232, 233, 234, 235, 236, 241, 262, 268, 270, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 291, 295, 298, 300, 301, 303, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332], "where": [4, 6, 7, 9, 10, 11, 12, 18, 25, 26, 27, 30, 34, 40, 44, 48, 55, 56, 57, 74, 76, 77, 79, 80, 90, 91, 93, 95, 97, 102, 106, 107, 108, 109, 113, 114, 117, 118, 119, 120, 148, 149, 160, 176, 180, 199, 218, 224, 240, 241, 295, 296, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331], "ar": [4, 8, 10, 11, 12, 14, 15, 18, 19, 20, 21, 23, 29, 33, 37, 38, 40, 41, 44, 45, 55, 57, 58, 60, 62, 63, 64, 65, 66, 68, 70, 73, 74, 77, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 125, 127, 131, 132, 133, 138, 141, 142, 149, 150, 151, 160, 162, 163, 165, 167, 170, 175, 176, 177, 180, 182, 183, 184, 185, 186, 188, 189, 194, 195, 196, 198, 199, 201, 204, 206, 210, 211, 214, 215, 216, 217, 218, 222, 224, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 252, 253, 288, 289, 295, 296, 297, 305, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "observ": [4, 5, 6, 30, 37, 38, 44, 49, 50, 52, 54, 56, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 119, 123, 128, 129, 132, 133, 143, 148, 149, 152, 156, 161, 162, 225, 227, 229, 240, 252, 258, 268, 270, 288, 295, 307, 309, 311, 313, 315, 316, 317, 319, 320, 323, 324, 326, 327, 328, 331, 332], "first": [4, 15, 18, 22, 23, 25, 26, 27, 32, 34, 35, 36, 37, 38, 40, 43, 44, 48, 57, 58, 60, 62, 65, 83, 84, 86, 91, 98, 102, 106, 107, 108, 109, 111, 112, 113, 115, 121, 125, 127, 135, 139, 140, 144, 147, 150, 151, 153, 154, 155, 169, 176, 183, 184, 185, 188, 189, 198, 204, 216, 223, 229, 232, 233, 234, 236, 251, 308, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 331, 332], "second": [4, 6, 15, 18, 19, 60, 62, 65, 95, 102, 106, 107, 108, 109, 110, 111, 112, 113, 123, 132, 188, 211, 231, 233, 234, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 313, 325, 327, 328, 331], "n": [4, 5, 6, 7, 8, 11, 14, 15, 18, 19, 20, 21, 24, 29, 31, 34, 44, 46, 47, 48, 50, 52, 54, 55, 56, 57, 63, 67, 71, 74, 75, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 127, 130, 131, 132, 133, 134, 135, 139, 141, 148, 149, 151, 160, 162, 164, 176, 177, 181, 182, 183, 184, 185, 186, 188, 189, 194, 196, 201, 207, 211, 215, 217, 218, 222, 225, 229, 231, 233, 234, 236, 238, 239, 240, 241, 295, 301, 307, 309, 311, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331], "d": [4, 5, 6, 7, 9, 10, 11, 12, 15, 20, 21, 24, 25, 26, 27, 33, 34, 35, 36, 41, 42, 43, 45, 54, 71, 76, 77, 78, 79, 80, 81, 91, 93, 94, 97, 107, 111, 123, 127, 132, 133, 142, 143, 151, 156, 160, 163, 186, 209, 222, 229, 236, 241, 262, 275, 307, 309, 311, 312, 313, 315, 317, 319, 320, 322, 325, 326, 329], "np": [4, 5, 6, 7, 9, 10, 11, 12, 16, 18, 22, 25, 26, 27, 32, 34, 35, 36, 40, 43, 44, 45, 55, 57, 58, 59, 60, 61, 62, 65, 66, 74, 85, 86, 87, 93, 94, 95, 102, 104, 106, 107, 108, 109, 113, 117, 119, 120, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 187, 188, 197, 198, 204, 211, 222, 224, 229, 235, 237, 242, 243, 260, 261, 262, 263, 264, 268, 269, 270, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 308, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "dimension": [4, 5, 6, 7, 8, 10, 11, 12, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 40, 42, 43, 49, 56, 57, 65, 71, 94, 109, 188, 191, 192, 193, 217, 218, 229, 236, 239, 240, 241, 255, 267, 273, 286, 292, 303, 306, 309, 313, 315, 317, 319, 320, 322, 324, 326, 327, 328, 331, 332], "point": [4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 22, 25, 26, 27, 29, 32, 34, 35, 36, 39, 40, 43, 44, 57, 63, 73, 76, 77, 78, 79, 80, 81, 91, 92, 93, 102, 103, 104, 105, 106, 107, 108, 111, 123, 136, 137, 138, 149, 151, 162, 198, 215, 216, 217, 229, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 260, 263, 264, 276, 280, 281, 285, 307, 311, 313, 314, 315, 320, 321, 322, 324, 325, 326, 327, 328, 331], "out": [4, 5, 6, 7, 15, 29, 63, 108, 112, 133, 143, 163, 198, 199, 229, 239, 252, 282, 311, 312, 314, 332], "result": [4, 5, 6, 7, 11, 12, 14, 16, 23, 28, 44, 45, 55, 58, 63, 85, 86, 91, 92, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 113, 160, 163, 187, 190, 194, 196, 198, 200, 204, 224, 225, 227, 229, 240, 257, 309, 313, 319, 320, 321, 324, 327, 330, 331], "p": [4, 5, 6, 7, 20, 21, 24, 29, 30, 37, 38, 41, 44, 47, 55, 57, 80, 83, 91, 95, 96, 102, 106, 107, 108, 110, 115, 121, 123, 130, 132, 133, 135, 137, 138, 143, 156, 161, 162, 166, 170, 172, 173, 180, 188, 194, 196, 218, 229, 236, 239, 240, 274, 296, 311, 314, 315, 319, 320, 321, 323, 324, 326, 327, 328, 330, 331], "transform": [4, 5, 6, 7, 9, 10, 11, 12, 14, 19, 20, 21, 37, 38, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 75, 85, 197, 198, 229, 235, 239, 241, 245, 258, 270, 271, 287, 289, 290, 292, 293, 294, 300, 303, 304, 307, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 326, 327, 329, 331, 332], "int": [6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 49, 51, 53, 55, 57, 58, 59, 60, 62, 63, 65, 73, 74, 75, 80, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 160, 161, 162, 163, 164, 165, 167, 170, 176, 177, 186, 188, 191, 192, 193, 195, 198, 199, 202, 208, 209, 210, 211, 215, 217, 218, 219, 222, 224, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 308, 313, 316, 317, 318, 326, 327, 331, 332], "number": [6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 22, 23, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 51, 53, 55, 57, 59, 60, 62, 63, 65, 74, 75, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 127, 130, 131, 132, 133, 135, 141, 142, 143, 144, 147, 148, 149, 160, 162, 163, 170, 171, 175, 176, 177, 188, 193, 195, 199, 202, 204, 211, 217, 218, 219, 222, 226, 228, 235, 237, 238, 239, 240, 241, 242, 243, 267, 289, 309, 311, 312, 313, 316, 318, 320, 322, 324, 325, 327, 328, 329], "datapoint": [6, 313, 314, 319, 321], "mathbf": [6, 11, 44, 47, 57, 102, 106, 107, 108, 139, 176, 313, 322, 327], "mathbb": [6, 7, 18, 26, 29, 44, 45, 47, 48, 50, 52, 54, 56, 57, 76, 77, 78, 79, 80, 81, 94, 97, 102, 106, 107, 108, 121, 123, 128, 130, 131, 132, 133, 135, 139, 143, 152, 161, 162, 186, 239, 240, 241, 262, 275, 307, 309, 311, 314, 315, 320, 321, 323, 324, 325, 326, 328, 330, 331], "r": [6, 7, 23, 26, 29, 44, 45, 47, 51, 55, 56, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 94, 97, 98, 99, 102, 103, 104, 106, 107, 108, 111, 113, 115, 116, 121, 127, 141, 142, 149, 163, 176, 180, 183, 184, 185, 186, 198, 199, 201, 225, 235, 239, 240, 241, 262, 263, 268, 275, 301, 307, 308, 309, 311, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332], "uniqu": [6, 95, 111, 112, 317, 323, 328], "most": [6, 84, 86, 92, 95, 103, 104, 109, 111, 149, 160, 163, 186, 210, 313, 320, 323, 327, 328, 330], "degre": [6, 57, 63, 80, 159, 197, 298, 307, 315, 319, 324, 325], "mean": [6, 11, 12, 14, 16, 18, 19, 22, 27, 32, 35, 36, 37, 38, 43, 44, 55, 57, 63, 64, 65, 67, 73, 74, 84, 91, 93, 94, 95, 97, 98, 102, 104, 106, 107, 108, 111, 113, 139, 140, 169, 179, 188, 195, 199, 201, 203, 217, 222, 229, 230, 231, 232, 233, 234, 235, 237, 242, 243, 258, 289, 308, 309, 311, 312, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331], "mapsto": [6, 23, 37, 38, 47, 48, 191, 235, 326, 331], "left": [6, 8, 9, 11, 23, 34, 40, 41, 43, 44, 55, 57, 60, 62, 66, 74, 76, 77, 79, 95, 98, 102, 106, 107, 108, 113, 126, 127, 137, 139, 142, 144, 151, 152, 156, 158, 159, 160, 161, 162, 166, 180, 188, 189, 193, 194, 196, 198, 217, 235, 302, 313, 315, 318, 319, 325, 326, 331], "prod_": [6, 91, 113, 156, 161, 162, 323], "1": [6, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 65, 68, 71, 73, 74, 76, 77, 80, 81, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 179, 180, 184, 185, 188, 190, 194, 196, 197, 198, 199, 202, 204, 210, 211, 215, 216, 217, 218, 219, 222, 224, 225, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 260, 261, 262, 263, 264, 267, 268, 269, 270, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "_d": [6, 313], "k_d": 6, "sum": [6, 12, 24, 44, 62, 73, 83, 95, 102, 106, 107, 108, 109, 112, 113, 118, 136, 138, 199, 232, 233, 289, 295, 313, 318, 328, 329, 331], "leq": [6, 24, 39, 136, 159, 215, 328], "right": [6, 8, 9, 11, 23, 25, 26, 34, 40, 41, 43, 44, 55, 57, 76, 77, 79, 95, 98, 102, 106, 107, 108, 113, 126, 127, 137, 139, 141, 142, 151, 152, 156, 158, 159, 160, 161, 162, 166, 180, 198, 235, 237, 242, 243, 279, 290, 296, 299, 302, 305, 312, 313, 318, 319, 325, 327, 328, 331], "numpi": [6, 22, 25, 26, 27, 32, 34, 35, 36, 40, 43, 44, 45, 49, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 93, 94, 95, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 175, 187, 188, 198, 217, 222, 253, 260, 261, 262, 263, 264, 268, 269, 270, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "shape": [6, 9, 11, 16, 18, 19, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 40, 43, 55, 57, 70, 85, 93, 94, 95, 103, 111, 112, 119, 120, 125, 127, 139, 147, 151, 160, 162, 179, 188, 189, 191, 192, 197, 198, 199, 200, 204, 208, 209, 218, 222, 226, 235, 237, 240, 241, 242, 243, 268, 270, 275, 276, 280, 281, 282, 285, 295, 301, 314, 315, 316, 317, 318, 319, 321, 324, 326, 327, 328, 329, 331, 332], "n_test_point": [6, 235, 237, 242, 243], "n_monomi": 6, "size": [6, 10, 14, 18, 22, 25, 26, 27, 29, 31, 32, 34, 35, 36, 39, 40, 42, 43, 55, 57, 58, 63, 81, 86, 87, 92, 94, 95, 102, 103, 105, 106, 107, 108, 111, 112, 113, 149, 150, 162, 176, 187, 188, 194, 196, 198, 208, 209, 211, 235, 237, 239, 241, 242, 243, 260, 264, 282, 289, 293, 296, 299, 308, 313, 314, 315, 317, 322, 327, 328, 330], "maximum": [6, 11, 14, 15, 74, 84, 85, 86, 91, 94, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 111, 113, 160, 163, 170, 188, 195, 199, 217, 226, 238, 239, 258, 289, 311, 313, 320, 329, 330], "must": [6, 11, 15, 18, 20, 24, 25, 26, 29, 44, 55, 57, 60, 62, 63, 65, 74, 77, 80, 92, 94, 95, 96, 97, 102, 104, 106, 107, 108, 109, 118, 123, 125, 127, 132, 133, 142, 144, 147, 176, 179, 180, 188, 198, 207, 208, 209, 211, 217, 235, 237, 239, 241, 242, 243, 312, 320, 323, 326, 327, 331, 332], "posit": [6, 10, 15, 23, 25, 26, 33, 55, 57, 63, 65, 70, 86, 104, 109, 135, 168, 176, 182, 183, 184, 185, 186, 188, 189, 194, 196, 208, 209, 217, 219, 223, 235, 241, 266, 272, 287, 290, 291, 296, 304, 306, 310, 316, 317, 325, 327, 328], "dimens": [6, 7, 8, 11, 12, 14, 18, 19, 23, 25, 26, 31, 33, 37, 39, 44, 48, 49, 50, 52, 54, 55, 56, 57, 60, 62, 65, 77, 94, 111, 112, 113, 186, 204, 209, 211, 218, 222, 229, 235, 237, 240, 242, 243, 258, 308, 313, 314, 317, 318, 327, 328, 330, 331], "exampl": [6, 10, 12, 22, 23, 25, 26, 27, 29, 30, 32, 34, 35, 36, 40, 43, 55, 63, 85, 86, 93, 94, 95, 102, 104, 106, 107, 108, 109, 112, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 188, 197, 211, 217, 222, 224, 239, 240, 248, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 313, 316, 318, 320, 321, 322, 323, 327, 329, 330, 332], "given": [6, 8, 11, 12, 15, 18, 26, 27, 32, 35, 36, 37, 38, 42, 43, 44, 55, 57, 58, 60, 63, 65, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 143, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 171, 188, 194, 196, 197, 199, 204, 210, 217, 222, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331], "three": [6, 10, 22, 23, 31, 39, 84, 102, 106, 107, 108, 290, 313, 317, 318, 320, 323, 325, 331], "test": [6, 11, 22, 27, 32, 34, 35, 36, 40, 43, 44, 55, 59, 73, 74, 82, 85, 91, 92, 95, 102, 105, 106, 107, 108, 111, 112, 137, 190, 199, 202, 214, 217, 225, 227, 235, 237, 241, 242, 243, 257, 258, 260, 287, 295, 298, 304, 310, 316, 317, 331, 332], "import": [6, 12, 13, 17, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 40, 43, 55, 57, 102, 104, 106, 107, 108, 109, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 187, 188, 221, 244, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "random": [6, 10, 11, 14, 16, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 43, 55, 58, 59, 74, 94, 100, 104, 149, 187, 211, 235, 237, 239, 240, 242, 243, 260, 264, 282, 289, 293, 301, 308, 313, 314, 315, 317, 320, 321, 322, 327, 328], "normal": [6, 10, 26, 30, 55, 85, 93, 102, 104, 106, 107, 108, 109, 127, 142, 163, 199, 217, 218, 239, 241, 293, 296, 297, 301, 308, 314, 315, 317, 319, 320, 322, 324, 327, 328, 329, 331], "3": [6, 10, 22, 23, 25, 26, 27, 31, 32, 34, 35, 36, 40, 42, 43, 47, 51, 53, 55, 57, 63, 74, 84, 91, 94, 96, 98, 102, 106, 107, 108, 109, 111, 112, 116, 121, 136, 138, 142, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 188, 198, 211, 224, 235, 241, 260, 262, 263, 264, 271, 274, 275, 276, 280, 284, 288, 289, 290, 291, 292, 294, 296, 297, 298, 300, 302, 303, 304, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "up": [6, 22, 27, 32, 33, 34, 35, 36, 40, 43, 44, 73, 102, 106, 107, 108, 111, 118, 136, 138, 149, 194, 196, 241, 313, 315, 316, 317, 319, 321, 325, 328], "two": [6, 11, 14, 15, 23, 27, 29, 30, 35, 36, 37, 39, 40, 43, 44, 45, 51, 63, 65, 74, 76, 77, 78, 79, 80, 81, 85, 86, 89, 91, 95, 96, 98, 102, 104, 106, 107, 108, 109, 110, 112, 121, 123, 132, 151, 191, 192, 193, 218, 232, 233, 234, 235, 239, 240, 241, 255, 288, 292, 300, 303, 309, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332], "0": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 53, 55, 57, 58, 60, 62, 63, 65, 74, 80, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 166, 167, 170, 172, 176, 179, 186, 188, 190, 194, 195, 196, 198, 199, 201, 204, 211, 217, 218, 222, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "2": [6, 10, 11, 12, 15, 22, 23, 26, 27, 30, 31, 32, 34, 35, 36, 40, 42, 43, 44, 45, 47, 51, 53, 55, 57, 60, 62, 63, 65, 68, 73, 74, 75, 76, 77, 83, 85, 91, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 123, 125, 127, 132, 133, 135, 136, 138, 141, 142, 144, 147, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 163, 166, 179, 185, 187, 188, 189, 190, 196, 197, 199, 204, 210, 211, 216, 217, 218, 219, 222, 223, 224, 225, 229, 231, 233, 235, 238, 239, 240, 241, 260, 262, 263, 267, 268, 269, 270, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "expect": [6, 11, 14, 44, 57, 63, 95, 102, 103, 104, 106, 107, 108, 112, 113, 129, 130, 131, 133, 139, 143, 188, 199, 258, 317, 320, 321, 322, 324, 326, 327, 328, 331], "y": [6, 22, 23, 31, 37, 38, 39, 40, 43, 45, 47, 55, 57, 60, 62, 67, 68, 69, 76, 77, 78, 79, 80, 81, 123, 132, 133, 139, 143, 190, 191, 192, 197, 198, 199, 200, 211, 217, 218, 224, 225, 229, 230, 231, 232, 233, 234, 235, 241, 268, 270, 276, 280, 281, 282, 284, 285, 298, 303, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 331, 332], "g": [6, 18, 44, 47, 48, 50, 52, 53, 54, 56, 63, 76, 77, 78, 79, 80, 81, 82, 86, 93, 94, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 135, 139, 189, 191, 192, 194, 195, 196, 198, 224, 294, 303, 307, 308, 309, 311, 312, 313, 315, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332], "third": [6, 10, 111, 112, 113, 163, 331], "itself": [6, 63, 108, 241, 308, 313, 322, 325, 331], "assert_almost_equ": 6, "get_feature_nam": 6, "input_featur": [6, 197, 198, 325], "list": [6, 8, 11, 13, 15, 16, 18, 25, 26, 29, 44, 45, 49, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 134, 139, 140, 143, 150, 151, 164, 170, 173, 175, 188, 194, 195, 196, 197, 198, 199, 201, 205, 206, 208, 209, 211, 224, 225, 226, 227, 228, 234, 238, 239, 241, 312, 313, 318, 323, 328], "str": [6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 44, 45, 46, 47, 55, 57, 60, 62, 63, 65, 68, 70, 71, 72, 73, 74, 75, 85, 86, 88, 91, 92, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 144, 160, 163, 176, 177, 181, 182, 183, 184, 185, 188, 190, 191, 194, 196, 198, 201, 213, 221, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243], "see": [6, 11, 12, 14, 15, 16, 18, 19, 33, 44, 45, 46, 47, 49, 51, 53, 55, 57, 62, 63, 65, 66, 68, 71, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 91, 92, 93, 95, 98, 103, 105, 106, 109, 112, 121, 149, 164, 169, 172, 177, 187, 191, 193, 194, 196, 197, 198, 199, 200, 215, 217, 218, 222, 224, 225, 231, 233, 238, 240, 241, 263, 264, 288, 290, 291, 297, 299, 300, 302, 307, 308, 311, 313, 314, 321, 325, 327, 329, 330, 331, 332], "get_feature_names_out": [6, 197, 198], "featur": [6, 30, 44, 48, 49, 50, 52, 54, 55, 56, 57, 60, 65, 103, 197, 198, 199, 240, 245, 317, 321, 322, 325, 327, 331, 332], "If": [6, 8, 11, 13, 14, 15, 16, 17, 18, 34, 44, 45, 47, 55, 57, 58, 60, 63, 73, 74, 84, 86, 91, 92, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 125, 126, 127, 128, 131, 135, 137, 147, 148, 149, 151, 160, 162, 163, 164, 176, 177, 180, 187, 188, 189, 193, 194, 196, 198, 199, 201, 204, 208, 209, 210, 217, 218, 224, 225, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 243, 305, 308, 311, 312, 313, 314, 316, 320, 323, 325, 327, 328, 330, 331, 332], "replac": [6, 110, 118, 120, 213, 313, 321], "feature_nam": 6, "correspond": [6, 21, 28, 44, 55, 57, 63, 66, 71, 75, 76, 77, 78, 79, 80, 81, 84, 86, 92, 93, 95, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 127, 133, 135, 142, 144, 150, 154, 155, 159, 166, 170, 180, 197, 207, 222, 224, 226, 227, 235, 239, 257, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332], "seri": [7, 12, 18, 44, 55, 57, 65, 73, 74, 91, 92, 103, 107, 109, 149, 207, 208, 209, 240, 246, 247, 308, 309, 311, 323, 324, 327, 331, 332], "vector": [7, 10, 18, 21, 25, 26, 44, 45, 50, 55, 81, 84, 94, 95, 97, 102, 104, 106, 107, 108, 109, 116, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 137, 139, 141, 142, 143, 144, 147, 152, 160, 162, 163, 186, 199, 235, 236, 237, 242, 243, 314, 319, 323, 324, 325, 326, 327], "t": [7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 25, 26, 27, 34, 35, 36, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 67, 74, 75, 76, 77, 78, 79, 80, 81, 85, 91, 93, 94, 95, 96, 97, 98, 102, 104, 106, 107, 108, 110, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 156, 160, 161, 162, 163, 164, 166, 169, 171, 180, 184, 187, 191, 192, 197, 198, 207, 209, 211, 225, 227, 230, 231, 232, 233, 234, 235, 236, 238, 241, 253, 260, 263, 264, 268, 270, 271, 275, 276, 278, 280, 281, 282, 285, 289, 290, 291, 292, 294, 295, 298, 300, 303, 307, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332], "time": [7, 11, 18, 19, 20, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 40, 43, 44, 45, 47, 48, 49, 50, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 128, 132, 133, 139, 140, 143, 146, 147, 148, 149, 160, 169, 171, 176, 186, 197, 198, 206, 207, 208, 209, 211, 223, 224, 225, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 311, 312, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332], "psi": [7, 44, 47, 48, 57, 309, 316], "k": [7, 10, 11, 12, 14, 16, 23, 26, 44, 47, 48, 50, 52, 53, 54, 56, 57, 68, 71, 76, 77, 78, 79, 80, 81, 92, 93, 94, 95, 97, 102, 103, 105, 106, 107, 108, 111, 112, 113, 121, 123, 124, 125, 126, 127, 130, 132, 133, 136, 142, 143, 144, 146, 147, 151, 152, 160, 161, 177, 181, 182, 186, 215, 216, 218, 227, 229, 232, 233, 234, 235, 258, 275, 289, 300, 308, 309, 314, 315, 318, 320, 321, 322, 323, 325, 327, 328, 329, 331], "space": [7, 8, 10, 15, 23, 24, 30, 44, 49, 53, 55, 56, 57, 65, 73, 74, 78, 86, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 112, 115, 121, 123, 132, 133, 143, 163, 193, 197, 198, 229, 235, 236, 237, 239, 240, 242, 243, 258, 289, 294, 295, 300, 309, 311, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 331], "cluster": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 55, 83, 98, 99, 107, 115, 141, 235, 258, 287, 288, 290, 292, 293, 294, 295, 300, 304, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 332], "dim": [8, 11, 16, 25, 26, 44, 49, 55, 57, 73, 74, 75, 102, 106, 107, 108, 186, 229, 258, 262, 275, 303, 308, 313, 316, 317, 319, 327, 331, 332], "n_box": [8, 9, 313, 319], "v0": [8, 9, 318], "v1": [8, 9, 318], "box": [8, 9, 33, 241, 258, 319, 331], "discret": [8, 9, 10, 11, 12, 14, 15, 23, 28, 30, 37, 38, 41, 59, 74, 84, 85, 86, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 148, 149, 151, 166, 171, 198, 238, 239, 240, 246, 251, 252, 258, 270, 273, 286, 295, 300, 306, 308, 309, 311, 315, 318, 319, 320, 322, 326, 327, 329, 331, 332], "euclidean": [8, 10, 11, 13, 14, 15, 16, 17, 55, 104, 109, 163, 300, 313, 327, 331], "span": [8, 314], "grid": [8, 29, 190, 215, 216, 217, 225, 239, 267, 268, 288, 317, 319, 321, 328, 332], "linspac": [8, 262, 263, 268, 270, 276, 279, 280, 281, 283, 284, 285, 300, 301, 303, 315, 317, 318, 319, 321, 322, 325, 326, 327, 329, 332], "along": [8, 151, 201, 210, 239, 241, 327, 328], "axi": [8, 23, 95, 190, 194, 201, 211, 222, 235, 239, 263, 264, 275, 276, 280, 281, 285, 289, 290, 291, 292, 308, 313, 316, 325, 327, 329], "center": [8, 9, 10, 11, 12, 14, 15, 16, 141, 194, 196, 274, 289, 300, 308, 313, 316, 317, 318, 319, 324, 329], "bound": [8, 24, 63, 108, 111, 112, 149, 160, 188, 201, 204, 225, 239, 312, 319, 321, 327], "either": [8, 29, 30, 44, 55, 57, 63, 65, 95, 104, 109, 112, 239, 240, 241, 309, 312, 325, 327, 328, 330, 331], "user": [8, 11, 63, 84, 111, 112, 188, 194, 196, 305, 312, 313, 320, 325, 326, 327, 329, 331, 332], "from": [8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 24, 27, 30, 32, 34, 35, 36, 40, 43, 44, 47, 48, 55, 57, 58, 63, 65, 73, 74, 83, 84, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 169, 170, 171, 172, 175, 184, 186, 187, 188, 193, 194, 196, 197, 198, 199, 204, 208, 209, 211, 212, 216, 222, 230, 231, 232, 233, 234, 236, 238, 241, 251, 253, 256, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332], "per": [8, 9, 10, 11, 12, 13, 16, 17, 20, 23, 25, 26, 31, 39, 42, 65, 77, 86, 91, 93, 94, 95, 97, 109, 112, 113, 118, 120, 162, 171, 190, 191, 192, 194, 195, 227, 241, 276, 280, 281, 285, 313, 327, 328, 331], "singl": [8, 39, 63, 85, 91, 103, 109, 135, 148, 149, 153, 194, 196, 209, 222, 224, 235, 242, 312, 313, 320, 326, 327, 331], "integ": [8, 11, 15, 44, 55, 57, 84, 85, 86, 95, 102, 103, 105, 106, 107, 108, 109, 111, 112, 116, 119, 121, 122, 134, 150, 154, 173, 198, 219, 239, 240, 313, 327, 328, 331], "lower": [8, 9, 65, 73, 95, 110, 160, 201, 204, 225, 297, 309, 313, 319, 320, 327, 328, 331], "vertex": [8, 9], "upper": [8, 9, 149, 159, 201, 204, 225, 274, 319, 328], "boxdiscretizationmodel": [8, 258], "cluster_cent": [9, 10, 12, 289, 300, 313, 318, 319, 324, 329], "produc": [9, 18, 34, 37, 38, 44, 45, 46, 50, 52, 57, 61, 63, 64, 83, 84, 85, 89, 104, 109, 160, 165, 167, 173, 188, 198, 211, 312, 316, 319, 320, 326, 327, 329], "boxdiscret": [9, 258, 313, 318, 319], "hot": 9, "n_job": [9, 10, 11, 12, 14, 15, 16, 22, 23, 27, 32, 33, 34, 35, 36, 40, 43, 74, 85, 219, 235, 237, 241, 242, 243, 260, 261, 269, 289, 294, 302, 313, 315, 321, 322, 329, 331], "For": [9, 10, 11, 12, 15, 16, 18, 30, 33, 44, 55, 57, 62, 63, 65, 83, 85, 86, 91, 95, 98, 109, 111, 112, 117, 118, 119, 120, 135, 139, 148, 149, 151, 170, 189, 197, 199, 217, 238, 241, 258, 300, 302, 312, 313, 314, 315, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "frame": [9, 10, 11, 12, 14, 15, 18, 23, 44, 85, 86, 95, 102, 106, 107, 108, 148, 209, 238, 241, 271, 282, 300, 308, 309, 311, 316, 317, 318, 319, 324, 327, 331], "index": [9, 10, 12, 18, 83, 90, 93, 94, 95, 97, 102, 103, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 126, 145, 165, 167, 204, 222, 226, 236], "closest": [9, 10, 12], "job": [9, 10, 12, 14, 15, 16, 74, 219, 235, 237, 241, 242, 243, 326], "assign": [9, 10, 11, 12, 14, 15, 16, 65, 83, 93, 94, 95, 97, 98, 99, 102, 104, 106, 107, 108, 115, 121, 141, 188, 230, 231, 232, 233, 239, 241, 289, 290, 295, 297, 308, 311, 313, 316, 317, 324, 327, 328], "discrete_trajectori": [9, 10, 11, 12, 14, 103, 240, 303, 327], "denot": [9, 10, 12, 44, 55, 57, 94, 97, 102, 106, 107, 108, 121, 321, 322, 327, 328, 331], "transform_onehot": 9, "encod": [9, 57, 60, 61, 62, 64, 198, 235, 326], "one_hot": 9, "were": [9, 10, 12, 44, 86, 92, 102, 104, 106, 107, 108, 112, 189, 195, 197, 198, 225, 239, 305, 321, 324, 325, 327, 328, 329, 331], "converg": [9, 10, 11, 12, 14, 85, 96, 103, 104, 109, 111, 112, 163, 313, 329, 330, 331], "also": [9, 10, 11, 12, 14, 15, 18, 44, 45, 55, 57, 58, 63, 65, 66, 73, 76, 77, 78, 79, 80, 81, 85, 86, 92, 95, 102, 105, 106, 107, 108, 109, 111, 135, 138, 149, 163, 181, 188, 196, 197, 201, 202, 212, 222, 230, 231, 232, 233, 234, 239, 241, 298, 307, 308, 311, 312, 313, 314, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332], "indic": [9, 10, 11, 12, 16, 85, 86, 92, 95, 102, 104, 105, 106, 107, 108, 111, 112, 113, 117, 118, 119, 120, 125, 127, 142, 147, 151, 167, 194, 196, 198, 202, 222, 232, 233, 234, 305, 311, 316, 317, 320, 327, 330], "creat": [9, 10, 12, 14, 22, 27, 30, 32, 33, 34, 35, 36, 40, 43, 63, 86, 92, 103, 105, 109, 190, 191, 192, 195, 208, 209, 210, 211, 222, 224, 230, 231, 232, 233, 234, 241, 253, 289, 305, 309, 313, 316, 317, 318, 320, 326, 327, 328, 330, 331, 332], "manual": [9, 10, 12, 86], "doe": [9, 10, 12, 18, 45, 60, 62, 65, 82, 83, 95, 96, 102, 104, 106, 107, 108, 113, 115, 164, 220, 222, 230, 231, 235, 237, 242, 243, 312, 313, 317, 321, 323, 326, 328, 331], "stem": [9, 10, 12, 44, 108, 303, 331], "directli": [9, 10, 11, 12, 13, 17, 33, 55, 57, 102, 104, 106, 107, 108, 109, 110, 194, 196, 200, 230, 231, 235, 251, 303, 309, 313, 316, 320, 323, 325, 328, 330, 331], "metric": [9, 10, 11, 12, 13, 14, 15, 16, 258, 300], "relat": [9, 10, 12, 51, 55, 86, 142, 307, 309, 311, 320, 321, 327, 328, 329, 331], "via": [9, 10, 11, 12, 23, 26, 34, 37, 38, 65, 84, 102, 103, 106, 107, 108, 111, 112, 130, 137, 141, 142, 175, 189, 193, 195, 198, 224, 297, 298, 308, 311, 313, 315, 316, 320, 323, 324, 328], "registri": [9, 10, 11, 12, 13, 14, 15, 16, 17], "n_cluster": [9, 10, 11, 12, 14, 15, 16, 288, 289, 290, 292, 293, 294, 313, 315, 317, 318, 319, 321, 322, 324, 329], "gener": [10, 11, 15, 16, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 58, 77, 84, 91, 93, 94, 95, 97, 102, 104, 106, 107, 108, 109, 117, 121, 123, 125, 127, 132, 133, 142, 144, 147, 148, 149, 151, 156, 160, 162, 163, 176, 188, 199, 210, 211, 235, 236, 237, 238, 240, 242, 243, 258, 289, 298, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 327, 328, 331, 332], "store": [10, 12, 63, 85, 91, 92, 103, 105, 107, 111, 112, 113, 198, 201, 313, 329], "comput": [10, 12, 15, 18, 19, 20, 21, 41, 44, 47, 53, 55, 57, 63, 67, 68, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 160, 162, 163, 166, 170, 171, 172, 173, 176, 177, 180, 183, 184, 185, 188, 197, 198, 201, 204, 215, 217, 218, 225, 227, 228, 229, 230, 231, 232, 233, 234, 239, 253, 299, 308, 309, 311, 312, 313, 314, 317, 320, 321, 322, 323, 324, 327, 328, 329, 331], "should": [10, 11, 12, 13, 14, 17, 18, 25, 26, 44, 55, 57, 60, 62, 63, 65, 66, 74, 75, 85, 93, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 175, 188, 195, 197, 198, 202, 228, 229, 239, 303, 308, 309, 313, 314, 320, 323, 327, 330, 331], "match": [10, 18, 45, 63, 77, 94, 103, 163, 208, 209, 314], "let": [10, 57, 63, 151, 316, 317, 319, 320, 321, 322, 324, 325, 332], "u": [10, 21, 44, 57, 110, 112, 151, 160, 186, 199, 236, 240, 270, 276, 279, 280, 281, 285, 312, 313, 314, 317, 319, 320, 321, 322, 324, 326, 327, 328, 329, 331, 332], "artifici": [10, 73, 85, 241], "just": [10, 45, 85, 104, 149, 188, 220, 237, 239, 242, 243, 313, 315, 323, 325, 328, 330, 331], "canon": [10, 44, 51, 309, 321, 331], "c_1": 10, "top": [10, 18, 23, 33, 37, 38, 44, 47, 48, 50, 52, 54, 56, 57, 73, 77, 80, 95, 102, 106, 107, 108, 186, 198, 230, 231, 232, 233, 234, 235, 308, 309, 315, 318, 319, 320, 321, 322, 325, 327, 331], "c_2": 10, "c_3": 10, "we": [10, 11, 25, 26, 34, 37, 57, 63, 83, 95, 102, 104, 106, 107, 108, 109, 111, 112, 116, 131, 149, 151, 166, 188, 218, 236, 241, 257, 288, 292, 295, 296, 298, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332], "five": 10, "sampl": [10, 14, 18, 25, 26, 37, 38, 58, 65, 73, 74, 85, 86, 89, 91, 92, 93, 94, 95, 97, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 148, 149, 159, 162, 191, 192, 195, 199, 201, 204, 218, 225, 226, 227, 228, 238, 251, 258, 268, 270, 271, 289, 300, 303, 311, 313, 321, 322, 327, 328, 329, 330, 331], "around": [10, 33, 40, 57, 91, 222, 282, 300, 320, 323, 329], "ey": 10, "loc": [10, 274, 319], "scale": [10, 26, 44, 45, 55, 57, 102, 106, 107, 108, 112, 132, 133, 146, 147, 176, 188, 189, 192, 194, 196, 235, 291, 293, 296, 313, 314, 317], "01": [10, 57, 102, 106, 107, 108, 121, 127, 142, 163, 265, 276, 282, 285, 286, 298, 300, 301, 304, 319], "5": [10, 11, 14, 18, 22, 23, 25, 26, 30, 32, 33, 34, 38, 40, 41, 42, 43, 45, 55, 57, 60, 62, 74, 93, 94, 102, 106, 107, 108, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 147, 156, 176, 190, 211, 217, 224, 225, 235, 240, 241, 260, 262, 265, 267, 269, 274, 275, 276, 277, 279, 282, 283, 284, 288, 289, 294, 296, 297, 299, 300, 301, 302, 303, 304, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "print": [10, 23, 63, 102, 104, 106, 107, 108, 110, 151, 163, 188, 194, 196, 198, 211, 224, 267, 298, 305, 308, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "max_it": [11, 14, 199, 313, 329], "500": [11, 30, 32, 34, 42, 103, 260, 264, 270, 271, 275, 279, 282, 284, 288, 300, 302, 313, 314, 317, 318, 319, 321, 326, 327, 332], "toler": [11, 12, 14, 102, 104, 106, 107, 108, 109, 116, 136, 137, 138, 160, 163, 165, 167, 186, 217], "1e": [11, 14, 19, 20, 22, 25, 26, 27, 32, 34, 35, 36, 40, 42, 43, 44, 49, 51, 55, 57, 65, 68, 69, 70, 71, 72, 73, 75, 96, 102, 104, 106, 107, 108, 109, 111, 136, 137, 138, 163, 165, 167, 176, 182, 183, 184, 185, 188, 194, 196, 217, 262, 275, 279, 282, 284, 290, 291, 292, 294, 296, 299, 300, 301, 314, 316, 317, 319, 321, 322, 324, 326, 327, 328, 332], "05": [11, 14, 31, 34, 37, 38, 43, 103, 109, 165, 167, 188, 199, 274, 296, 298, 299, 300, 304, 316, 320, 328], "init_strategi": [11, 14, 111, 289, 300, 313, 329], "fixed_se": [11, 14, 289, 313, 324, 329], "initial_cent": [11, 14, 313], "progress": [11, 16, 44, 65, 91, 92, 95, 96, 102, 104, 105, 106, 107, 108, 111, 112, 163, 202, 203, 217, 220, 227, 239, 300, 313, 316, 319, 329, 332], "minim": [11, 15, 47, 112, 134, 160, 194, 196, 199, 239, 312, 313, 319, 321, 328], "cost": [11, 12, 14, 313], "c": [11, 13, 17, 22, 23, 37, 38, 47, 57, 80, 87, 102, 106, 107, 108, 112, 123, 130, 131, 132, 133, 135, 139, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 170, 172, 173, 176, 199, 202, 218, 229, 232, 234, 235, 261, 267, 271, 289, 294, 295, 298, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 330], "sum_": [11, 12, 57, 102, 106, 107, 108, 130, 136, 139, 151, 152, 156, 160, 164, 311, 313, 325, 328], "_j": [11, 44, 313, 327], "s_i": [11, 12, 102, 106, 107, 108, 313, 328, 329], "boldsymbol": [11, 44, 57, 102, 106, 107, 108, 313], "mu_i": [11, 12, 44, 125, 127, 128, 137, 147, 162, 313, 327], "mass": [11, 27, 34, 241, 276, 313], "associ": [11, 63, 93, 94, 95, 97, 108, 160, 312, 313, 315, 321, 322, 327, 328, 331], "outcom": [11, 313], "veri": [11, 15, 20, 85, 103, 104, 109, 110, 111, 194, 196, 222, 241, 309, 311, 313, 324, 325], "depend": [11, 40, 57, 65, 81, 82, 85, 86, 102, 106, 107, 108, 113, 133, 143, 186, 188, 198, 214, 218, 222, 227, 235, 237, 242, 243, 252, 258, 273, 286, 296, 306, 311, 313, 318, 320, 321, 324, 328, 329, 330, 331], "particular": [11, 12, 19, 20, 30, 44, 57, 63, 94, 95, 97, 98, 102, 104, 106, 107, 108, 186, 188, 195, 219, 223, 226, 296, 307, 311, 312, 313, 314, 320, 330, 331], "offer": [11, 23, 103, 104, 206, 257, 305, 308, 311, 313, 320, 323, 324, 326, 327, 328, 332], "uniform": [11, 14, 22, 25, 27, 29, 32, 34, 35, 36, 40, 43, 91, 95, 96, 100, 149, 187, 188, 194, 197, 198, 239, 258, 260, 264, 282, 289, 314, 315, 317, 320, 322, 327, 328, 329], "pick": [11, 235, 242, 313, 315, 316, 321], "uniformli": [11, 18, 23, 148, 235, 313, 320, 321, 322], "over": [11, 12, 14, 18, 23, 44, 55, 57, 63, 68, 81, 85, 86, 90, 95, 99, 102, 103, 104, 106, 107, 108, 111, 112, 113, 115, 118, 148, 149, 163, 191, 192, 218, 226, 283, 297, 300, 308, 311, 313, 315, 316, 318, 320, 323, 324, 325, 327, 329, 330], "provid": [11, 13, 14, 17, 44, 55, 57, 63, 65, 74, 78, 84, 85, 86, 89, 92, 95, 96, 102, 106, 107, 108, 109, 111, 112, 177, 178, 188, 191, 192, 193, 210, 211, 219, 224, 229, 235, 237, 242, 243, 252, 305, 307, 309, 311, 312, 313, 320, 325, 326, 327, 330, 331, 332], "former": [11, 63, 74, 313], "tri": [11, 63, 96, 144, 241, 313, 323, 326, 328], "find": [11, 15, 29, 55, 65, 86, 92, 98, 112, 125, 239, 241, 253, 294, 307, 309, 312, 313, 317, 321, 325, 327, 328, 331, 332], "cover": [11, 311, 312, 313, 328], "spatial": [11, 28, 238, 313, 318], "configur": [11, 20, 55, 57, 60, 62, 65, 85, 92, 102, 104, 106, 107, 108, 109, 313, 317, 318, 327], "dataset": [11, 12, 23, 27, 28, 29, 30, 35, 36, 40, 43, 55, 111, 112, 205, 206, 207, 208, 209, 211, 223, 224, 239, 258, 260, 261, 266, 272, 276, 277, 278, 279, 280, 281, 284, 285, 289, 294, 295, 309, 313, 314, 316, 317, 321, 326, 327, 329, 331, 332], "more": [11, 15, 28, 30, 33, 55, 63, 84, 85, 86, 91, 92, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 149, 165, 167, 180, 186, 189, 194, 196, 197, 198, 199, 206, 222, 238, 241, 300, 302, 308, 309, 313, 314, 320, 324, 325, 327, 328], "less": [11, 14, 25, 26, 44, 112, 118, 120, 151, 163, 194, 196, 238, 313, 320, 328], "detail": [11, 18, 33, 44, 55, 63, 71, 85, 91, 92, 96, 105, 110, 121, 162, 163, 197, 199, 215, 217, 238, 302, 307, 308, 309, 312, 320, 321, 323, 324, 327, 328], "amount": [11, 55, 57, 188, 195, 309, 327], "iter": [11, 12, 14, 63, 84, 91, 92, 95, 96, 103, 104, 105, 109, 111, 116, 144, 163, 198, 199, 202, 210, 211, 217, 220, 226, 241, 313, 320, 328, 329], "befor": [11, 14, 33, 55, 63, 74, 85, 95, 98, 102, 104, 106, 107, 108, 109, 111, 137, 163, 176, 182, 183, 184, 185, 199, 217, 222, 235, 236, 239, 322, 327, 328], "stop": [11, 12, 14, 95, 96, 102, 106, 107, 108, 238, 239, 302, 328], "dure": [11, 14, 15, 16, 19, 62, 65, 86, 103, 106, 121, 241, 288, 309, 312, 313, 321], "float": [11, 12, 14, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 49, 50, 51, 53, 55, 57, 60, 62, 63, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 87, 91, 92, 95, 96, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 128, 136, 137, 138, 152, 156, 157, 158, 159, 160, 163, 165, 167, 169, 170, 171, 173, 176, 180, 182, 183, 184, 185, 186, 188, 190, 194, 195, 196, 198, 199, 200, 201, 204, 215, 217, 218, 225, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 295, 317, 319, 327, 331], "when": [11, 12, 14, 18, 55, 57, 58, 63, 64, 82, 85, 86, 91, 92, 93, 95, 96, 98, 102, 103, 104, 106, 107, 108, 111, 112, 139, 149, 160, 170, 194, 196, 197, 198, 199, 211, 222, 227, 230, 231, 232, 233, 234, 238, 241, 244, 308, 309, 311, 312, 313, 320, 327, 328, 329, 330, 331, 332], "rel": [11, 12, 14, 103, 104, 109, 143, 163, 165, 167, 194, 196, 217, 313, 327], "chang": [11, 12, 14, 60, 62, 63, 65, 85, 86, 103, 104, 108, 109, 111, 163, 217, 230, 231, 232, 233, 234, 235, 305, 312, 317, 323, 331], "inertia": [11, 12, 313, 317], "smaller": [11, 12, 20, 55, 57, 86, 112, 118, 120, 182, 183, 184, 185, 321, 328], "than": [11, 12, 14, 15, 20, 30, 55, 57, 84, 86, 89, 95, 96, 102, 106, 107, 108, 110, 112, 118, 120, 121, 123, 125, 127, 132, 133, 142, 144, 147, 151, 176, 182, 183, 184, 185, 186, 235, 237, 238, 240, 241, 242, 243, 308, 309, 312, 313, 314, 316, 317, 320, 321, 324, 327, 328, 329, 331], "determin": [11, 18, 20, 39, 47, 55, 57, 85, 86, 95, 102, 103, 104, 106, 107, 108, 144, 149, 162, 177, 179, 188, 189, 198, 199, 211, 313, 315, 320, 323, 327], "how": [11, 12, 18, 44, 63, 94, 96, 97, 109, 198, 219, 222, 239, 252, 288, 290, 291, 292, 293, 298, 299, 300, 308, 309, 315, 316, 321, 322, 323, 325, 326, 327, 329, 330, 331], "being": [11, 27, 35, 36, 42, 43, 47, 63, 70, 102, 106, 107, 108, 121, 186, 239, 312, 324, 325, 328, 329, 332], "chosen": [11, 30, 111, 313, 316, 325, 329], "seed": [11, 14, 16, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 43, 58, 59, 74, 100, 102, 106, 107, 108, 235, 237, 239, 240, 242, 243, 267, 268, 276, 280, 281, 284, 285, 289, 303, 313, 315, 317, 319, 322, 324, 327, 328, 331], "42": [11, 22, 27, 32, 34, 35, 36, 40, 43, 276, 285, 300, 315, 319, 322], "thread": [11, 14, 15, 23, 33, 219, 241, 326], "core": [11, 85, 219, 307, 311], "note": [11, 14, 37, 38, 41, 44, 45, 55, 57, 60, 62, 63, 65, 73, 76, 77, 78, 79, 80, 81, 82, 84, 86, 95, 96, 102, 104, 106, 107, 108, 113, 116, 119, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 194, 196, 198, 199, 217, 222, 235, 236, 241, 249, 298, 308, 309, 313, 316, 321, 324, 325, 327, 331], "ignor": [11, 14, 20, 55, 57, 60, 61, 62, 63, 64, 66, 90, 91, 93, 94, 96, 102, 106, 107, 108, 117, 160, 197, 198, 199, 204, 224, 288, 313, 327, 328], "pass": [11, 14, 15, 20, 45, 47, 49, 53, 55, 57, 60, 61, 62, 63, 64, 65, 85, 92, 95, 101, 104, 105, 160, 175, 194, 196, 197, 198, 199, 201, 298, 312, 313, 325, 327, 329], "algorithm": [11, 13, 14, 15, 17, 18, 55, 57, 95, 96, 98, 99, 110, 135, 149, 150, 153, 154, 155, 160, 162, 177, 189, 199, 217, 239, 241, 246, 247, 249, 251, 308, 309, 313, 320, 324, 325, 327], "bar": [11, 29, 44, 57, 65, 85, 95, 102, 106, 107, 108, 111, 112, 149, 193, 202, 203, 215, 217, 220, 227, 239, 274, 277, 313, 316, 328, 329, 330, 331, 332], "tqdm": [11, 44, 65, 91, 95, 102, 106, 107, 108, 111, 112, 202, 217, 227, 300, 313, 316, 317, 319, 329, 332], "interfac": [11, 76, 77, 78, 79, 80, 81, 97, 111, 112, 127, 203, 308, 312, 313, 314, 315, 320, 323, 324, 325, 326, 327, 331, 332], "check": [11, 63, 95, 102, 106, 107, 108, 110, 111, 112, 116, 135, 136, 137, 138, 144, 153, 175, 178, 179, 182, 203, 221, 223, 257, 316, 320, 325], "supports_progress_interfac": [11, 111, 112, 202, 258], "david": [11, 16, 313], "arthur": [11, 16, 313], "sergei": [11, 16, 313], "vassilvitskii": [11, 16, 313], "advantag": [11, 16, 313, 327, 331], "care": [11, 16, 63, 313], "technic": [11, 16, 63, 313], "stanford": [11, 16, 313], "2006": [11, 16, 116, 166, 313, 328], "kmeansmodel": [11, 14, 258], "minibatchkmean": [11, 12, 258, 313], "current": [11, 14, 15, 18, 20, 34, 44, 48, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 74, 85, 86, 91, 93, 94, 95, 96, 97, 102, 104, 106, 107, 108, 109, 119, 172, 189, 193, 217, 221, 235, 239, 257, 308, 311, 320, 323, 328, 331], "yet": [11, 14, 15, 91, 95, 96, 99, 103, 110, 308], "latest": [11, 14, 15, 51, 85, 197, 308], "callback_init_cent": [11, 14], "callback_loop": [11, 14], "perform": [11, 14, 15, 16, 18, 19, 20, 33, 44, 45, 57, 60, 62, 63, 65, 66, 73, 74, 82, 92, 95, 96, 102, 103, 104, 105, 106, 107, 108, 116, 141, 176, 178, 182, 183, 184, 185, 199, 225, 227, 239, 241, 308, 309, 312, 313, 315, 316, 317, 320, 323, 326, 328, 329, 331], "supersed": [11, 14, 211], "onc": [11, 16, 63, 95, 102, 106, 107, 108, 114, 239, 260, 261, 269, 271, 282, 298, 313, 325], "non": [11, 14, 15, 16, 44, 55, 57, 63, 65, 80, 85, 91, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 132, 133, 134, 136, 138, 143, 144, 161, 163, 182, 219, 222, 241, 311, 327, 331], "neg": [11, 15, 16, 65, 80, 85, 90, 102, 106, 107, 108, 109, 117, 134, 136, 138, 168, 199, 219, 222, 235, 237, 241, 242, 243, 317], "fit_transform": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85, 288, 319], "fit_opt": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85], "transform_opt": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85], "simultan": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85, 219], "access": [11, 13, 14, 17, 20, 28, 34, 45, 47, 49, 53, 55, 57, 60, 62, 63, 65, 85, 102, 104, 106, 107, 108, 308, 320, 323, 324, 327, 328, 330, 331], "keyword": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 63, 65, 85, 92, 101, 104, 105, 109, 190, 191, 192, 193, 195, 198, 199, 202, 213, 241], "output": [11, 14, 20, 30, 44, 45, 47, 49, 53, 55, 57, 60, 62, 63, 65, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 176, 196, 229, 241, 251, 258, 316, 317, 318, 319, 320, 323, 326, 331], "kw": [11, 14, 20, 21, 44, 48, 50, 52, 55, 56, 57, 60, 62, 85, 92, 103, 104, 109, 110, 111, 202, 226, 237, 241], "respect": [11, 12, 14, 26, 29, 37, 38, 44, 55, 57, 63, 73, 84, 87, 102, 106, 107, 108, 109, 111, 113, 135, 137, 142, 159, 162, 188, 189, 194, 235, 239, 241, 300, 305, 308, 313, 316, 321, 322, 323, 325, 327, 330, 331], "scikit": [11, 14, 20, 55, 57, 65, 91, 96, 101, 103, 109, 198, 325], "compat": [11, 14, 20, 46, 55, 57, 60, 63, 65, 66, 91, 96, 103, 109, 110, 235, 237, 242, 243, 312, 325], "clustermodel": [11, 12, 14, 15, 258, 300], "implicitli": [11, 14, 44, 104, 109], "choic": [11, 14, 44, 55, 73, 109, 111, 227, 312, 313, 327, 330, 331], "fix": [11, 14, 16, 33, 39, 55, 86, 96, 102, 103, 106, 107, 108, 109, 139, 162, 182, 184, 235, 237, 241, 242, 243, 289, 313, 320, 321, 327, 331], "reproduc": [11, 14, 16, 30, 53, 102, 104, 106, 107, 108, 235, 237, 240, 242, 243, 289, 312, 313, 322, 331], "conjunct": [11, 14, 55, 57, 82, 188], "need": [11, 14, 45, 47, 63, 111, 112, 113, 198, 222, 235, 237, 242, 243, 289, 312, 313, 325, 326, 327, 329, 330, 331], "becaus": [11, 14, 91, 102, 103, 104, 106, 107, 108, 109, 110, 111, 149, 162, 199, 230, 231, 232, 233, 234, 241, 308, 309, 324, 329, 331], "parallel": [11, 14, 30, 74, 112, 219, 235, 237, 240, 242, 243, 328], "execut": [11, 14, 65, 111, 265, 272, 286, 304, 308, 312], "caus": [11, 14, 90, 94, 98, 99, 305], "determinist": [11, 14, 31, 33, 39, 235, 237, 241, 242, 243, 258, 326], "behaviour": [11, 14], "again": [11, 14, 91, 241, 313, 321, 326, 327, 329], "strategi": [11, 14, 111, 289, 313, 329], "guess": [11, 14, 16, 95, 96, 98, 99, 101, 217, 258, 320, 321, 324], "getter": [11, 14, 15, 18, 20, 44, 55, 57, 60, 62, 65, 76, 81, 85, 104, 109, 112, 113, 188, 212, 225, 235, 236], "setter": [11, 14, 15, 18, 20, 44, 55, 57, 60, 62, 65, 85, 104, 109, 188, 212, 235], "overrid": [11, 14, 18, 20, 85, 96], "max": [11, 14, 85, 90, 113, 114, 160, 165, 166, 167, 172, 188, 230, 231, 232, 233, 234, 261, 270, 274, 282, 283, 296, 299, 300, 302, 303, 313, 315, 316, 317, 318, 319, 320, 322, 324, 326, 327, 328, 331, 332], "_clustering_bind": [11, 13, 14, 17], "subclass": [11, 14, 63, 312], "label": [11, 14, 84, 95, 102, 106, 107, 108, 116, 121, 122, 134, 173, 188, 190, 194, 196, 239, 263, 267, 268, 274, 277, 283, 289, 295, 297, 298, 301, 302, 303, 313, 314, 316, 317, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "actual": [11, 14, 44, 55, 57, 83, 85, 92, 95, 102, 106, 107, 108, 110, 116, 313, 324, 328, 330, 331], "criterion": [11, 12, 14, 96, 103, 111], "between": [11, 14, 15, 18, 22, 27, 29, 32, 34, 35, 36, 40, 41, 43, 44, 51, 63, 73, 84, 85, 86, 91, 93, 95, 96, 98, 102, 104, 106, 107, 108, 110, 112, 121, 135, 139, 164, 165, 166, 167, 168, 169, 171, 172, 173, 188, 197, 198, 235, 236, 237, 239, 242, 243, 252, 289, 311, 313, 314, 320, 321, 324, 326, 327, 328, 329, 330, 331], "consid": [11, 14, 15, 45, 55, 57, 63, 85, 86, 95, 102, 106, 107, 108, 109, 110, 112, 224, 230, 231, 232, 233, 234, 309, 311, 312, 314, 315, 321, 324, 327, 328, 330, 331], "inform": [12, 63, 106, 107, 112, 198, 252, 300, 305, 312, 313, 315, 320, 322, 327, 330, 331], "procedur": [12, 20, 67, 85, 91, 95, 98, 99, 149, 309, 320, 330, 331], "pleas": [12, 33, 44, 55, 57, 62, 63, 91, 127, 194, 196, 308, 312, 327, 331, 332], "document": [12, 63, 177, 303, 312, 326, 327, 329, 331], "coincid": [12, 91, 93, 95, 96, 314], "criterium": [12, 103, 329], "construct": [12, 55, 63, 86, 95, 108, 111, 112, 116, 121, 139, 147, 163, 164, 166, 169, 171, 188, 325, 326, 327, 328, 329], "pure": [12, 137], "met": [12, 15], "kmean": [12, 14, 16, 258, 288, 289, 290, 292, 293, 294, 295, 313, 315, 316, 317, 319, 321, 322, 324, 329, 332], "score": [12, 19, 44, 50, 60, 62, 65, 66, 71, 72, 73, 74, 75, 85, 96, 102, 106, 107, 108, 198, 199, 258, 307, 309, 316, 319, 321, 325, 332], "dtype": [12, 18, 60, 61, 62, 63, 64, 65, 66, 90, 93, 94, 95, 98, 105, 182, 183, 184, 185, 188, 207, 209, 232, 233, 234, 238, 295, 300, 313, 316, 317, 329, 330], "doubl": [12, 27, 28, 63, 238, 258, 273, 286, 287, 304, 306, 310], "entri": [12, 18, 63, 95, 98, 104, 109, 122, 141, 150, 175, 176, 232, 233, 234, 321, 322, 325], "squar": [12, 44, 70, 73, 102, 104, 106, 107, 108, 179, 199, 229, 313, 318, 319, 325, 326, 328, 331], "distanc": [12, 15, 33, 44, 55, 57, 73, 85, 107, 241, 289, 313, 327, 331], "train": [12, 14, 44, 59, 60, 62, 63, 65, 72, 73, 74, 95, 197, 199, 298, 313, 316, 317, 319, 320, 321, 322, 326, 331, 332], "loop": [12, 222, 260, 261, 269, 271, 282, 317], "onli": [13, 17, 18, 20, 29, 44, 55, 57, 58, 63, 65, 74, 83, 85, 86, 91, 92, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 112, 125, 127, 135, 144, 147, 149, 161, 162, 176, 188, 189, 194, 195, 196, 213, 217, 222, 224, 232, 233, 234, 235, 237, 239, 241, 242, 243, 305, 309, 311, 312, 313, 314, 320, 321, 324, 325, 327, 328, 330, 331], "custom": [13, 17, 25, 26, 33, 63, 74, 258, 259, 265, 273, 286, 306], "regist": [13, 17, 63, 313], "through": [13, 15, 17, 44, 55, 57, 60, 61, 62, 63, 64, 65, 66, 92, 105, 201, 235, 239, 313, 319, 320, 324, 326, 327, 329, 331], "instanti": [13, 17, 102, 298, 320, 323, 325, 331], "rather": [13, 17, 30, 102, 106, 107, 108, 121, 240, 324, 327, 328], "singleton": [13, 17, 86], "ad": [13, 15, 17, 63, 65, 70, 98, 159, 217, 239, 241, 258, 313], "mai": [13, 17, 34, 45, 47, 51, 53, 63, 74, 95, 104, 109, 110, 111, 112, 149, 165, 167, 186, 194, 196, 198, 199, 211, 217, 218, 222, 312, 313, 316, 329, 332], "link": [13, 17, 305, 312], "against": [13, 17, 44, 60, 62, 63, 95, 112, 227, 325], "librari": [13, 17, 197, 198, 257, 298, 309, 312, 325], "directori": [13, 17, 308, 313], "capi_includ": [13, 17, 313], "inc_clust": [13, 17, 313], "expos": [13, 17, 308], "your": [13, 17, 63, 102, 104, 106, 107, 108, 148, 149, 230, 231, 232, 233, 234, 258, 288, 312, 317, 321, 331], "like": [13, 17, 25, 26, 30, 55, 63, 65, 92, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 148, 149, 164, 187, 199, 204, 227, 236, 241, 251, 308, 309, 313, 315, 319, 320, 323, 326, 327, 328, 329, 331], "includ": [13, 17, 44, 55, 57, 63, 87, 95, 102, 106, 107, 108, 165, 167, 227, 305, 308, 311, 312, 313, 315, 328], "register_clust": [13, 17, 313], "h": [13, 17, 22, 25, 26, 27, 31, 32, 34, 35, 36, 39, 40, 42, 43, 45, 53, 134, 149, 156, 162, 235, 237, 241, 242, 243, 262, 264, 275, 279, 282, 284, 290, 291, 292, 309, 313, 314, 315, 317, 321, 322], "pybind11_modul": [13, 17, 313], "m": [13, 17, 23, 27, 29, 33, 34, 41, 44, 45, 47, 48, 50, 52, 54, 55, 56, 57, 63, 70, 83, 91, 93, 95, 102, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 152, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 183, 184, 185, 207, 222, 230, 231, 232, 233, 234, 235, 236, 239, 241, 289, 309, 313, 314, 320, 322, 324, 329, 331], "doc": [13, 17, 63, 212, 308, 313, 314, 315, 320, 323, 324, 325, 326, 327, 328, 330, 331, 332], "modul": [13, 17, 60, 61, 62, 63, 64, 65, 66, 221, 244, 253, 306, 308, 326, 329, 332], "auto": [13, 17, 18, 67, 123, 132, 142, 163, 188, 194, 196, 230, 231, 232, 233, 234, 313, 326], "custommodul": [13, 17], "def_submodul": [13, 17, 313], "registerclusteringimplement": [13, 17, 313], "bind": [13, 17, 202, 253, 305, 313], "compil": [13, 17, 313], "extens": [13, 17, 241, 242, 243, 313], "renam": [13, 17], "appropri": [13, 17, 44, 66, 96, 149, 313, 317, 324, 325, 327, 332], "impl": [13, 76], "add": [13, 15, 63, 239, 308, 317, 328], "tupl": [13, 29, 55, 57, 63, 65, 68, 92, 95, 105, 111, 117, 118, 119, 120, 148, 163, 187, 188, 210, 223, 224, 239, 309, 326], "batch_siz": [14, 313, 316, 317, 319, 326, 332], "100": [14, 22, 25, 27, 28, 31, 32, 34, 35, 36, 40, 43, 55, 57, 63, 91, 104, 130, 131, 160, 187, 191, 192, 193, 200, 218, 238, 261, 268, 270, 275, 280, 282, 283, 289, 290, 291, 292, 298, 300, 302, 309, 313, 315, 316, 317, 319, 320, 321, 323, 325, 326, 328, 329, 331, 332], "mini": [14, 258, 316], "batch": [14, 55, 57, 60, 62, 65, 81, 258, 317], "fashion": [14, 18, 309, 313], "descript": [14, 18, 44, 62, 85, 91, 109, 110, 121, 202, 238, 330], "remain": [14, 44, 55, 57, 98, 99, 149, 176, 204, 305, 312, 323, 328], "whole": [14, 63, 86, 162, 163, 241, 309, 313], "repeatedli": 14, "thu": [14, 55, 95, 110, 309, 322, 329, 331], "line": [14, 63, 188, 239, 312, 326, 331], "usual": [14, 91, 308, 309, 313, 314, 315, 316, 329], "mix": [14, 55, 91, 102, 106, 107, 108, 194, 196, 228, 327], "overwritten": [14, 199], "dmin": [15, 289, 313], "max_cent": [15, 289, 313], "1000": [15, 22, 23, 27, 32, 34, 35, 36, 39, 40, 43, 84, 91, 94, 96, 111, 170, 211, 217, 268, 279, 280, 282, 293, 294, 300, 303, 313, 319, 326, 327, 328, 331, 332], "least": [15, 39, 74, 112, 114, 199, 222, 313, 320, 325, 327, 330], "other": [15, 47, 63, 112, 162, 207, 222, 305, 307, 312, 313, 320, 321, 322, 323, 324, 327, 330, 331], "accord": [15, 21, 44, 73, 85, 95, 102, 106, 107, 108, 109, 115, 118, 119, 120, 142, 150, 151, 161, 163, 188, 189, 194, 218, 235, 237, 239, 242, 243, 296, 305, 313, 317, 319, 326, 329], "voronoi": [15, 311, 313], "partion": [15, 313], "regular": [15, 44, 49, 51, 53, 62, 65, 68, 69, 70, 71, 75, 98, 99, 102, 106, 107, 108, 199, 217, 229, 241, 258, 289, 301, 317, 319, 321, 322], "similar": [15, 18, 63, 125, 127, 147, 222, 312, 313, 317, 331], "hartigan": [15, 313], "leader": [15, 313], "consist": [15, 63, 95, 96, 98, 99, 111, 117, 118, 119, 120, 160, 199, 219, 241, 252, 309, 313, 325, 328, 329, 330, 331], "ha": [15, 20, 24, 33, 39, 44, 57, 63, 81, 84, 85, 86, 93, 95, 98, 102, 104, 106, 107, 108, 109, 116, 117, 118, 119, 120, 121, 125, 135, 136, 137, 138, 149, 153, 162, 163, 174, 175, 188, 189, 195, 198, 203, 236, 239, 241, 305, 312, 313, 315, 318, 319, 320, 323, 324, 325, 328, 329, 330, 331], "greater": [15, 44, 55, 57, 73, 102, 106, 107, 108, 112, 123, 125, 127, 132, 133, 142, 144, 147, 176, 313, 320, 324, 327], "becom": [15, 170, 222, 313, 327, 331], "partit": [15, 44, 73, 84, 218, 313, 331], "minimum": [15, 58, 74, 87, 89, 95, 110, 112, 199, 218, 222, 289, 313, 329, 331], "threshold": [15, 44, 86, 92, 95, 96, 98, 103, 110, 112, 199, 230, 231, 232, 233, 234, 239, 298, 324, 325, 331], "termin": [15, 217], "jan": [15, 34, 91, 95, 98, 99, 107, 110, 151, 163, 309, 311, 313, 320], "hendrik": [15, 34, 91, 95, 98, 99, 107, 110, 151, 163, 309, 311, 313, 320], "prinz": [15, 34, 91, 95, 98, 99, 107, 110, 151, 156, 163, 258, 273, 286, 306, 311, 313, 320], "hao": [15, 20, 21, 34, 44, 49, 55, 57, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 151, 163, 307, 309, 311, 313, 320, 323, 327, 329, 330, 331, 332], "wu": [15, 20, 21, 34, 44, 49, 55, 57, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 151, 156, 162, 163, 307, 309, 311, 313, 320, 323, 327, 329, 330, 331, 332], "marco": [15, 34, 43, 151, 163, 311, 313, 315], "sarich": [15, 34, 43, 151, 156, 163, 311, 313, 315], "bettina": [15, 34, 91, 151, 163, 311, 313, 320], "keller": [15, 34, 91, 151, 156, 163, 311, 313, 320], "martin": [15, 34, 151, 163, 311, 313, 331], "senn": [15, 34, 151, 156, 163, 311, 313], "held": [15, 18, 34, 151, 156, 163, 311, 312, 313], "john": [15, 34, 91, 96, 107, 111, 123, 132, 133, 143, 151, 163, 311, 313, 320], "chodera": [15, 34, 91, 107, 111, 123, 132, 133, 143, 151, 156, 163, 311, 313, 320], "christof": [15, 34, 43, 53, 84, 116, 121, 151, 163, 309, 311, 313, 315, 322, 328, 331], "sch": [15, 34, 43, 47, 53, 84, 116, 121, 151, 163, 309, 311, 313, 315, 322, 323, 324, 328, 331], "\u00fc": [15, 20, 21, 33, 34, 43, 47, 53, 55, 74, 84, 107, 110, 116, 121, 151, 163, 241, 309, 311, 313, 315, 322, 323, 324, 327, 328, 331], "tte": [15, 34, 43, 47, 53, 84, 116, 121, 151, 163, 309, 311, 313, 315, 322, 323, 324, 328, 331], "frank": [15, 20, 21, 34, 44, 55, 57, 60, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 116, 121, 123, 132, 133, 143, 151, 163, 305, 307, 309, 311, 313, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332], "No": [15, 20, 21, 34, 44, 55, 57, 60, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 116, 121, 123, 132, 133, 143, 151, 163, 307, 309, 311, 313, 320, 323, 326, 327, 328, 329, 330, 331, 332], "\u00e9": [15, 20, 21, 34, 39, 44, 55, 57, 60, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 116, 121, 123, 132, 133, 143, 151, 163, 307, 309, 311, 313, 320, 323, 326, 327, 328, 329, 330, 331, 332], "markov": [15, 28, 30, 34, 41, 43, 44, 55, 57, 65, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 135, 136, 137, 138, 142, 144, 147, 188, 196, 227, 236, 238, 239, 240, 258, 267, 283, 288, 290, 292, 293, 296, 297, 299, 300, 309, 312, 313, 315, 316, 317, 318, 323, 324, 327, 328, 329, 330, 331, 332], "molecular": [15, 20, 21, 34, 43, 44, 53, 55, 57, 60, 65, 73, 74, 102, 103, 107, 111, 113, 151, 156, 162, 163, 307, 311, 313, 315, 322, 326, 327, 329, 331, 332], "kinet": [15, 20, 21, 34, 44, 55, 57, 60, 65, 73, 74, 83, 91, 95, 98, 99, 102, 106, 107, 108, 111, 113, 123, 132, 133, 143, 151, 156, 163, 307, 311, 313, 320, 324, 326, 327, 329, 331, 332], "valid": [15, 29, 34, 44, 60, 62, 65, 73, 74, 76, 81, 95, 102, 106, 107, 108, 136, 138, 151, 156, 163, 190, 225, 226, 227, 228, 239, 258, 293, 305, 311, 313, 316, 317, 326, 331, 332], "journal": [15, 20, 21, 31, 34, 39, 44, 45, 47, 51, 53, 55, 57, 65, 73, 74, 85, 91, 95, 98, 99, 104, 107, 109, 110, 111, 116, 135, 150, 151, 153, 154, 155, 160, 163, 239, 241, 309, 311, 313, 314, 315, 320, 321, 322, 323, 327, 328, 330, 331, 332], "chemic": [15, 20, 21, 34, 44, 53, 55, 57, 73, 74, 85, 91, 95, 98, 99, 104, 107, 110, 111, 151, 163, 309, 311, 313, 320, 322, 323, 327, 328, 330, 331], "physic": [15, 20, 21, 23, 34, 53, 55, 74, 85, 91, 95, 98, 99, 104, 107, 110, 111, 116, 151, 163, 235, 309, 311, 313, 320, 322, 323, 325, 327, 328, 330, 331], "134": [15, 34, 151, 156, 163, 300, 309, 311, 313, 327], "17": [15, 30, 34, 85, 91, 104, 107, 111, 151, 163, 260, 265, 268, 289, 299, 300, 303, 311, 313, 316, 317, 319, 320, 323, 327, 328, 330, 331, 332], "174105": [15, 34, 151, 156, 163, 311, 313], "2011": [15, 34, 91, 107, 123, 132, 133, 143, 151, 156, 163, 217, 309, 311, 313, 320, 327], "wilei": [15, 149, 313], "son": [15, 313], "inc": [15, 202, 300, 312, 313], "1975": [15, 313], "onto": [15, 23, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 63, 84, 95, 102, 105, 106, 107, 108, 164, 191, 192, 239, 249, 307, 314, 327, 328, 331, 332], "carri": [15, 19, 163, 332], "choos": [15, 26, 312, 313, 321, 328, 329], "centroid": 15, "calcul": [15, 86, 91, 95, 98, 99, 102, 106, 107, 108, 111, 112, 113, 139, 199, 215, 320, 329], "larger": [15, 89, 149, 186, 240, 241, 309, 316, 327, 328], "equal": [15, 18, 25, 26, 44, 55, 58, 59, 66, 73, 74, 83, 93, 94, 95, 97, 102, 106, 107, 108, 111, 112, 113, 117, 118, 119, 120, 169, 179, 224, 238, 268, 281, 288, 296, 303, 313, 315, 316, 317, 327, 331], "superse": 15, "exist": [15, 18, 57, 63, 83, 98, 99, 135, 190, 205, 222, 239, 308, 314, 323, 324], "cutoff": [15, 20, 44, 49, 55, 57, 68, 70, 71, 176, 182, 183, 184, 185, 195, 327], "reach": [15, 95, 96, 102, 106, 107, 108, 112, 121, 135, 239, 241, 313, 328], "taken": [15, 44, 95, 98, 102, 106, 107, 108, 160, 188, 197, 198, 222, 312, 327, 328, 329], "account": [15, 44, 73, 98, 188, 317, 321, 327], "you": [15, 55, 57, 63, 83, 86, 91, 95, 96, 98, 99, 102, 104, 106, 107, 108, 127, 148, 149, 164, 218, 230, 231, 305, 308, 312, 313], "might": [15, 66, 82, 84, 85, 95, 98, 102, 106, 107, 108, 170, 226, 230, 231, 232, 233, 234, 241, 305, 309, 324, 328, 329, 331], "alia": [15, 63], "allow": [15, 25, 26, 28, 63, 112, 180, 312, 317, 320, 329, 331], "callback": [16, 65, 104, 111, 202, 203], "n_dim": [16, 240], "n_center": 16, "_metric": 17, "metricregistri": [17, 258], "compute_c00": [18, 19], "compute_c0t": [18, 19, 319], "compute_ctt": [18, 19], "remove_data_mean": 18, "revers": [18, 44, 55, 73, 85, 91, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 125, 127, 137, 142, 147, 159, 160, 161, 162, 163, 236, 309, 312, 317, 320, 323, 324, 327, 328, 330, 331], "bessels_correct": [18, 19], "sparse_mod": [18, 230, 231, 232, 233, 234], "ncov": [18, 20, 55, 57, 309], "diag_onli": [18, 232, 233, 234], "potenti": [18, 26, 27, 28, 34, 35, 36, 40, 42, 43, 44, 45, 48, 50, 52, 54, 55, 56, 57, 65, 73, 85, 113, 220, 226, 235, 237, 238, 241, 242, 243, 251, 258, 273, 276, 280, 281, 282, 284, 285, 286, 290, 300, 306, 313, 314, 315, 316, 322, 328, 329, 330, 331], "lag": [18, 19, 20, 22, 27, 32, 35, 36, 43, 44, 47, 49, 55, 57, 58, 60, 61, 62, 64, 65, 67, 68, 75, 85, 86, 88, 89, 91, 95, 96, 98, 102, 104, 106, 107, 108, 109, 110, 111, 112, 132, 133, 139, 147, 148, 151, 160, 176, 206, 207, 209, 211, 223, 224, 225, 258, 288, 293, 307, 309, 311, 316, 318, 321, 322, 327, 329, 330, 332], "mathrm": [18, 23, 25, 26, 27, 34, 35, 36, 40, 41, 42, 43, 44, 55, 57, 72, 77, 84, 86, 91, 94, 95, 97, 98, 102, 103, 104, 106, 107, 108, 111, 113, 178, 188, 215, 218, 227, 235, 239, 262, 263, 275, 301, 313, 314, 315, 318, 320, 322, 323, 324, 327, 328, 331, 332], "cov": [18, 44, 73, 152, 161, 319, 331], "x_t": [18, 25, 26, 27, 32, 34, 35, 36, 40, 42, 43, 44, 48, 50, 52, 54, 55, 56, 57, 102, 106, 107, 108, 121, 211, 232, 233, 234, 236, 262, 275, 307, 309, 311, 315, 319, 320, 322, 326, 327, 328, 330, 331, 332], "y_t": [18, 233, 234, 320, 321, 332], "contigu": [18, 149], "block": [18, 58, 74, 149, 211, 309, 326], "timeseri": [18, 55, 57, 93, 96, 97, 104, 109, 208, 209, 251, 302, 307, 311, 313, 327, 328, 331, 332], "propos": 18, "here": [18, 26, 55, 57, 104, 109, 110, 116, 148, 160, 166, 187, 215, 241, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 326, 327, 328, 330, 331, 332], "geq": [18, 121, 138, 180, 309, 314, 326, 328], "correl": [18, 19, 44, 51, 55, 57, 73, 85, 89, 91, 95, 96, 98, 102, 104, 106, 107, 108, 111, 112, 132, 133, 148, 149, 176, 309, 321, 327, 331], "part": [18, 44, 63, 73, 84, 113, 159, 194, 196, 235, 237, 242, 243, 295, 305, 312, 316, 321, 327, 331], "shift": [18, 19, 44, 55, 57, 58, 66, 71, 85, 109, 111, 112, 188, 211, 218, 309, 314, 327, 329, 330], "chunk": [18, 19, 20, 211], "subtract": [18, 199, 229], "free": [18, 39, 44, 55, 111, 112, 113, 300, 312, 327, 329, 331], "symmetr": [18, 19, 28, 55, 102, 106, 107, 108, 125, 127, 147, 176, 182, 183, 184, 185, 186, 231, 233, 238, 309, 327], "defin": [18, 25, 26, 34, 44, 47, 55, 57, 63, 71, 77, 83, 84, 95, 102, 104, 106, 107, 108, 112, 115, 121, 128, 134, 147, 152, 157, 158, 159, 164, 166, 172, 176, 188, 194, 196, 199, 235, 237, 242, 243, 258, 262, 275, 308, 309, 312, 314, 315, 316, 317, 319, 321, 322, 324, 325, 326, 327, 328, 329, 332], "sum_t": [18, 232, 233, 234, 327], "moment": [18, 19, 20, 104, 231, 232, 233, 234, 309, 323, 327], "matric": [18, 24, 44, 47, 55, 57, 58, 65, 67, 68, 74, 81, 85, 86, 91, 93, 94, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 138, 144, 148, 159, 160, 161, 162, 163, 176, 196, 217, 224, 229, 236, 253, 289, 309, 313, 314, 318, 321, 322, 323, 325, 327, 329, 330, 331], "bessel": [18, 19], "correct": [18, 19, 85, 95, 110, 111, 112, 132, 133, 305, 311, 330], "order": [18, 45, 55, 57, 58, 63, 83, 84, 86, 87, 91, 96, 98, 102, 104, 106, 107, 108, 109, 112, 115, 125, 127, 148, 149, 163, 180, 181, 198, 230, 231, 232, 233, 234, 239, 307, 316, 318, 321, 325, 327, 328, 331, 332], "unbias": [18, 113, 163, 311, 329], "dens": [18, 74, 85, 102, 106, 107, 108, 151, 162, 163, 230, 231, 232, 233, 234, 253], "alwai": [18, 63, 86, 163, 199, 210, 211, 222, 230, 231, 232, 233, 234, 309, 324, 330], "mode": [18, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 63, 65, 68, 69, 70, 71, 72, 74, 76, 81, 85, 86, 98, 104, 107, 109, 110, 112, 144, 230, 231, 232, 233, 234, 241, 309, 312, 314, 315, 317, 322, 327, 330, 331], "automat": [18, 83, 95, 98, 104, 115, 162, 189, 194, 196, 230, 231, 232, 233, 234], "spars": [18, 24, 84, 85, 86, 102, 103, 104, 106, 107, 108, 109, 110, 111, 116, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 170, 188, 189, 197, 199, 217, 230, 231, 232, 233, 234, 236, 253, 301, 325], "depth": [18, 20, 135, 150, 153, 154, 155, 309], "storag": [18, 20, 63, 309], "combin": [18, 83, 102, 103, 113, 132, 133, 198, 309, 311, 312, 321, 325, 329, 331], "statist": [18, 44, 51, 55, 85, 86, 91, 92, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 148, 149, 160, 162, 201, 232, 233, 234, 258, 311, 320, 321, 323, 328, 330, 331], "weight": [18, 20, 21, 44, 55, 57, 60, 62, 63, 65, 73, 84, 86, 93, 94, 95, 97, 102, 103, 106, 107, 108, 110, 113, 150, 153, 154, 155, 188, 192, 194, 196, 199, 215, 218, 230, 231, 232, 233, 234, 239, 241, 267, 289, 292, 297, 299, 313, 327, 328, 331], "pairwis": [18, 327], "describ": [18, 20, 23, 40, 41, 55, 56, 57, 83, 84, 91, 93, 98, 99, 102, 106, 107, 108, 109, 111, 113, 116, 143, 156, 219, 224, 225, 240, 241, 307, 308, 311, 313, 315, 316, 320, 327, 328, 331], "restrict": [18, 55, 57, 73, 86, 92, 93, 94, 95, 97, 98, 102, 104, 105, 106, 107, 108, 109, 112, 162, 163, 229, 232, 233, 234, 312, 323, 330], "diagon": [18, 44, 65, 95, 131, 136, 142, 178, 188, 189, 232, 233, 234, 313], "autocorrel": [18, 55, 57, 102, 106, 107, 108, 123, 132, 149, 232, 233, 234, 327], "covariancemodel": [18, 21, 44, 50, 55, 57, 73, 258, 327], "toni": [18, 55, 327], "f": [18, 25, 26, 44, 47, 48, 50, 52, 54, 56, 57, 102, 106, 107, 108, 110, 113, 149, 152, 156, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 215, 235, 236, 237, 239, 242, 243, 260, 262, 270, 275, 276, 277, 279, 280, 281, 284, 285, 289, 290, 291, 295, 296, 297, 299, 301, 302, 303, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332], "chan": 18, "gene": 18, "howard": 18, "golub": 18, "randal": 18, "j": [18, 24, 29, 44, 45, 60, 63, 76, 77, 78, 79, 80, 81, 91, 93, 102, 106, 107, 108, 112, 113, 121, 125, 126, 135, 136, 139, 141, 145, 151, 152, 156, 157, 159, 160, 161, 162, 164, 166, 188, 197, 199, 236, 239, 241, 300, 307, 309, 311, 314, 317, 323, 324, 325, 326, 327, 328, 329, 330], "levequ": 18, "formula": 18, "varianc": [18, 44, 55, 57, 63, 64, 73, 102, 106, 107, 108, 112, 152, 240, 326, 327, 329, 331], "compstat": 18, "1982": [18, 313], "5th": [18, 294], "symposium": 18, "toulous": 18, "30": [18, 37, 44, 53, 57, 65, 73, 74, 107, 109, 239, 281, 300, 305, 309, 316, 317, 318, 322, 323, 326, 328, 331, 332], "41": [18, 42, 149, 300], "springer": [18, 22, 51, 311, 321, 331], "final": [18, 20, 55, 57, 112, 263, 313, 317, 318, 329], "aggreg": [18, 20, 160, 324, 325], "n_split": [18, 211], "column_select": [18, 232, 233, 234], "element": [18, 65, 83, 90, 94, 95, 102, 104, 106, 107, 108, 109, 117, 118, 120, 126, 131, 136, 138, 145, 160, 182, 184, 188, 194, 196, 199, 201, 204, 223, 234, 241, 325, 330], "same": [18, 21, 24, 44, 48, 50, 52, 54, 55, 56, 57, 58, 63, 65, 74, 86, 103, 111, 112, 113, 160, 163, 175, 188, 192, 207, 211, 217, 218, 241, 289, 308, 312, 313, 314, 317, 328, 330, 331], "anoth": [18, 30, 121, 149, 224, 252, 309, 323, 324, 327], "arbitrari": [18, 102, 103, 106, 107, 108, 110, 238, 331], "possess": [18, 22, 27, 29, 32, 34, 35, 36, 40, 43, 48, 202, 227, 239, 317, 327, 331], "accept": [18, 63, 73, 222, 312], "re": [18, 55, 63, 95, 96, 98, 99, 102, 106, 107, 108, 110, 143, 176, 222, 288, 323, 327, 328, 329], "factor": [18, 27, 34, 85, 86, 111, 112, 113, 188, 309, 330], "koopmanestim": 18, "split": [18, 45, 58, 59, 74, 84, 102, 106, 107, 108, 211, 309, 316, 326, 332], "column": [18, 44, 102, 106, 107, 108, 127, 142, 176, 181, 182, 197, 230, 231, 232, 233, 234, 241, 324, 325, 327], "term": [18, 39, 65, 107, 121, 132, 135, 198, 236, 239, 241, 312, 320, 321, 325, 328, 329], "increment": [18, 73, 111, 202, 329], "except": [18, 74, 90, 93, 94, 97, 102, 106, 107, 108, 160, 194, 196, 199, 258, 308, 312, 330, 331], "cannot": [18, 83, 91, 95, 324, 326, 328, 332], "appli": [18, 19, 21, 44, 46, 48, 50, 52, 54, 55, 56, 57, 58, 63, 76, 77, 78, 79, 80, 81, 86, 96, 102, 106, 107, 108, 198, 208, 209, 211, 235, 238, 241, 251, 312, 321, 322, 324, 325, 327, 329, 331], "is_lag": 18, "big": [18, 321], "tempor": [18, 23, 45, 56, 74, 224, 315, 327], "differ": [18, 44, 55, 63, 91, 102, 104, 106, 107, 108, 111, 112, 194, 196, 212, 215, 216, 217, 225, 227, 245, 296, 301, 303, 309, 312, 313, 318, 319, 320, 323, 325, 326, 327, 329, 331], "select": [18, 30, 44, 47, 49, 51, 73, 85, 86, 92, 95, 98, 108, 109, 110, 113, 126, 149, 160, 163, 208, 209, 239, 240, 258, 315, 320, 325, 327, 328, 331, 332], "remov": [18, 19, 20, 44, 63, 67, 73, 74, 106, 175, 182, 183, 184, 185, 186, 229, 230, 231, 232, 233, 234, 282, 328, 330], "covari": [19, 20, 21, 37, 38, 44, 50, 55, 57, 68, 73, 102, 104, 106, 107, 108, 152, 161, 229, 230, 231, 232, 233, 234, 240, 258, 289, 309, 313, 319, 321, 322, 327, 331], "cov_00": [19, 44, 67, 331], "cov_0t": [19, 44, 67, 331], "cov_tt": [19, 44, 67, 331], "mean_0": [19, 44, 331], "mean_t": [19, 44, 331], "data_mean_remov": [19, 73], "influenc": [19, 186, 199, 241, 327], "effect": [19, 44, 60, 62, 63, 73, 84, 85, 86, 88, 89, 91, 95, 96, 98, 104, 109, 110, 111, 112, 172, 177, 188, 189, 195, 208, 209, 241, 288, 293, 311, 312, 323, 328, 330], "vamp": [19, 44, 55, 65, 66, 71, 73, 75, 102, 106, 107, 108, 258, 287, 304, 309, 310, 316, 332], "whiten": [19, 21, 44, 55, 57, 229, 319, 331], "epsilon": [19, 20, 44, 49, 51, 53, 55, 57, 65, 68, 69, 70, 71, 72, 73, 75, 102, 106, 107, 108, 176, 182, 183, 184, 185, 217, 241, 294, 317, 319, 321, 322, 327], "10": [19, 22, 23, 26, 28, 29, 31, 32, 35, 36, 39, 40, 43, 44, 47, 53, 55, 57, 60, 73, 74, 98, 102, 106, 107, 108, 110, 123, 143, 150, 153, 154, 155, 157, 158, 159, 160, 163, 176, 182, 183, 184, 185, 194, 196, 217, 235, 238, 241, 267, 268, 269, 271, 272, 274, 286, 289, 291, 293, 295, 297, 299, 300, 302, 305, 307, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332], "qr": [19, 176, 182, 183, 184, 185, 314], "pca": [19, 55, 287, 304, 310], "rank": [19, 44, 45, 51, 55, 57, 106, 110, 174, 176, 182, 183, 184, 185, 186, 315, 327, 331], "defici": 19, "reduc": [19, 44, 57, 93, 182, 183, 184, 185, 186, 208, 209, 313, 315, 320, 329], "truncat": [19, 20, 45, 49, 50, 70, 160, 176, 182, 183, 184, 185, 314, 315, 331], "numer": [19, 33, 44, 45, 47, 55, 57, 94, 141, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 194, 196, 217, 229, 241, 258, 298, 309, 312, 314, 325, 327, 328, 331], "spd_inv_sqrt": [19, 229, 258], "decomposit": [19, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 98, 99, 102, 106, 107, 108, 142, 170, 176, 182, 183, 184, 185, 186, 258, 290, 294, 295, 297, 302, 303, 309, 311, 314, 315, 316, 317, 319, 321, 322, 326, 327, 331, 332], "whitened_data": 19, "06": [20, 44, 49, 51, 55, 57, 65, 68, 69, 70, 71, 72, 75, 109, 196, 217, 300, 304, 316, 327], "inf": [20, 55, 57, 121, 132, 133, 147, 236, 321, 328], "koopman": [20, 21, 44, 47, 48, 50, 52, 54, 55, 56, 57, 65, 68, 71, 73, 102, 106, 107, 108, 110, 227, 307, 309, 315, 322, 331, 332], "plug": 20, "6": [20, 23, 36, 42, 44, 47, 49, 51, 55, 57, 65, 68, 71, 75, 102, 106, 107, 108, 109, 136, 156, 163, 196, 211, 217, 224, 235, 238, 241, 261, 265, 267, 269, 270, 271, 272, 283, 284, 286, 297, 298, 299, 300, 304, 305, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "eigenvalu": [20, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 57, 65, 68, 70, 71, 73, 74, 92, 102, 105, 106, 107, 108, 123, 124, 127, 137, 142, 143, 144, 147, 160, 176, 177, 181, 182, 183, 184, 185, 258, 309, 314, 315, 321, 322, 323, 327], "norm": [20, 26, 44, 55, 57, 102, 104, 106, 107, 108, 109, 142, 163, 176, 180, 181, 182, 183, 184, 185, 199, 217, 275, 296, 297, 299, 313, 319, 324, 328], "infin": 20, "collaps": 20, "while": [20, 63, 91, 95, 96, 98, 112, 230, 231, 232, 233, 234, 239, 309, 313, 317, 320, 323, 328, 329, 331], "end": [20, 22, 23, 24, 30, 31, 37, 38, 39, 41, 43, 55, 57, 63, 98, 101, 102, 106, 107, 108, 121, 139, 157, 158, 159, 166, 170, 222, 231, 233, 234, 235, 236, 239, 240, 308, 312, 313, 316, 317, 319, 321, 325, 326, 327, 328, 330, 331], "after": [20, 44, 45, 48, 50, 52, 54, 55, 56, 57, 63, 65, 70, 85, 86, 95, 98, 102, 106, 107, 108, 111, 112, 130, 131, 185, 201, 211, 222, 313, 320, 323, 329, 330, 331], "been": [20, 86, 93, 95, 102, 106, 107, 108, 109, 121, 198, 239, 312, 313, 316, 325, 328, 331], "felik": [20, 21, 55, 74, 107, 110, 309, 311, 327, 331], "ske": [20, 21, 55, 74, 107, 110, 309, 311, 327, 331], "fabian": [20, 21, 55, 85, 91, 102, 103, 104, 111, 113, 163, 311, 323, 327, 329, 330, 331], "paul": [20, 21, 55, 85, 91, 102, 103, 104, 111, 113, 135, 139, 162, 163, 311, 323, 327, 329, 330, 331], "stefan": [20, 21, 53, 55, 309, 321, 322, 327], "klu": [20, 21, 47, 53, 55, 309, 321, 322, 327], "ter": [20, 21, 55, 327, 331], "koltai": [20, 21, 47, 55, 327, 331], "variat": [20, 21, 44, 49, 51, 55, 57, 62, 64, 65, 73, 74, 102, 106, 107, 108, 109, 149, 217, 258, 301, 307, 309, 321, 323, 327, 331, 332], "slow": [20, 21, 55, 60, 74, 102, 106, 107, 108, 111, 149, 194, 196, 249, 307, 309, 315, 322, 326, 327, 331], "collect": [20, 21, 22, 55, 60, 62, 65, 86, 95, 108, 109, 111, 113, 201, 276, 280, 281, 282, 285, 295, 307, 311, 323, 325, 326, 327, 330], "variabl": [20, 21, 55, 60, 111, 112, 175, 197, 198, 211, 307, 316, 321, 325, 326, 327], "short": [20, 21, 55, 110, 116, 121, 164, 166, 169, 171, 209, 287, 310, 311, 327, 328], "off": [20, 21, 44, 55, 57, 95, 102, 106, 107, 108, 116, 121, 136, 164, 166, 169, 171, 176, 188, 238, 289, 309, 313, 324, 327, 328, 331], "equilibrium": [20, 21, 39, 44, 55, 57, 91, 95, 96, 98, 99, 102, 106, 107, 108, 109, 110, 111, 116, 121, 123, 128, 131, 132, 133, 143, 164, 166, 169, 171, 303, 309, 311, 316, 327, 328, 329, 331], "simul": [20, 21, 22, 23, 24, 27, 29, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 55, 57, 73, 74, 84, 95, 102, 103, 106, 107, 108, 109, 110, 112, 116, 121, 123, 132, 133, 143, 149, 160, 164, 166, 169, 170, 171, 172, 173, 198, 237, 238, 239, 241, 242, 243, 269, 274, 283, 298, 300, 302, 309, 311, 317, 318, 320, 323, 325, 327, 328, 329, 331], "146": [20, 21, 55, 110, 135, 150, 153, 154, 155, 300, 311, 323, 327], "15": [20, 21, 23, 38, 39, 55, 102, 106, 107, 108, 160, 188, 197, 199, 235, 263, 288, 289, 296, 297, 300, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "154104": [20, 21, 55, 327], "2017": [20, 21, 55, 102, 103, 110, 311, 327], "koopmanweightingmodel": [20, 258], "koopman_model": [20, 73, 102, 106, 107, 108], "u_const": 21, "koopman_oper": 21, "whitening_transform": 21, "modifi": [21, 56, 63, 111, 113, 241, 312, 317], "pc": 21, "reweight": [21, 102, 106, 107, 108, 110, 111, 300, 329, 331], "constant": [21, 26, 44, 65, 70, 71, 73, 102, 106, 107, 108, 113, 157, 198, 199, 217, 218, 230, 231, 232, 233, 234, 241, 322], "offset": [21, 86, 95, 281, 295], "const_weight_input": 21, "weights_input": 21, "001": [22, 27, 32, 35, 36, 39, 40, 42, 96, 157, 158, 301], "n_step": [22, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 95, 102, 104, 106, 107, 108, 235, 237, 238, 239, 240, 241, 242, 243, 260, 262, 264, 267, 269, 275, 276, 279, 280, 281, 282, 283, 284, 285, 290, 291, 292, 300, 302, 303, 317, 322, 323, 324, 327, 328, 329, 331], "10000": [22, 27, 35, 36, 40, 43, 110, 270, 276, 281, 285, 289, 300, 313, 315, 316, 322, 326, 329, 332], "arnold": [22, 259, 265, 306], "beltrami": [22, 259, 265, 306], "childress": [22, 259, 265, 306], "flow": [22, 31, 259, 265, 306, 331], "od": [22, 25, 258, 265, 298], "begin": [22, 23, 24, 30, 31, 37, 38, 39, 41, 43, 55, 57, 98, 102, 106, 107, 108, 121, 139, 157, 158, 159, 166, 170, 222, 231, 233, 234, 235, 236, 239, 240, 312, 320, 321, 325, 327, 328, 330, 331], "align": [22, 23, 31, 39, 41, 43, 55, 57, 102, 106, 107, 108, 231, 233, 234, 235, 327, 328, 331], "dot": [22, 31, 39, 142, 152, 197, 198, 215, 302, 313, 319, 321, 322, 325, 331], "sin": [22, 23, 38, 39, 40, 235, 240, 301], "z": [22, 31, 39, 53, 139, 191, 235, 270, 290, 298, 316, 317, 319, 321, 322, 326, 332], "co": [22, 23, 38, 40, 235, 240, 301], "b": [22, 39, 84, 91, 93, 95, 102, 104, 106, 107, 108, 111, 112, 113, 116, 121, 122, 123, 132, 149, 156, 157, 158, 159, 162, 166, 169, 170, 171, 172, 236, 241, 274, 298, 312, 315, 317, 323, 325, 328, 329], "domain": [22, 23, 235, 241, 309, 311, 315, 317, 321, 327], "omega": [22, 23, 235], "pi": [22, 23, 40, 95, 102, 106, 107, 108, 121, 160, 166, 169, 171, 235, 240, 260, 301, 320, 323, 324], "sqrt": [22, 27, 32, 34, 35, 37, 40, 44, 55, 104, 125, 127, 147, 266, 272, 287, 301, 304, 306, 310, 313, 319, 322, 326, 327, 332], "sourc": [22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 84, 173, 188, 189, 190, 191, 192, 193, 194, 195, 196, 217, 218, 227, 228, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 312, 313, 331], "code": [22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 61, 82, 111, 189, 190, 191, 192, 193, 194, 195, 196, 217, 218, 227, 228, 242, 243, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 312, 313, 326], "png": [22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 189, 190, 191, 192, 193, 194, 195, 196, 217, 218, 227, 228], "hire": [22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 189, 190, 191, 192, 193, 194, 195, 196, 217, 218, 227, 228], "pdf": [22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 189, 190, 191, 192, 193, 194, 195, 196, 217, 218, 227, 228, 268], "integr": [22, 25, 26, 27, 31, 32, 34, 35, 36, 39, 40, 42, 43, 57, 63, 149, 198, 217, 235, 237, 242, 243, 298, 315, 322], "step": [22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 39, 40, 42, 43, 44, 55, 57, 60, 62, 65, 91, 95, 102, 104, 106, 107, 108, 110, 111, 123, 130, 131, 132, 135, 139, 147, 149, 151, 160, 162, 171, 190, 198, 225, 235, 237, 238, 239, 240, 241, 242, 243, 267, 293, 300, 309, 313, 315, 316, 317, 318, 320, 321, 322, 325, 327, 328, 330, 331, 332], "rung": [22, 25], "kutta": [22, 25], "That": [22, 27, 32, 35, 36, 43, 91, 324, 325, 328], "system": [22, 25, 26, 27, 31, 32, 33, 34, 35, 36, 39, 40, 42, 43, 44, 49, 56, 74, 106, 107, 116, 123, 132, 133, 143, 149, 163, 197, 198, 199, 218, 235, 237, 239, 241, 242, 243, 258, 259, 260, 264, 265, 276, 279, 280, 281, 282, 284, 285, 287, 290, 291, 293, 304, 306, 309, 310, 312, 314, 315, 316, 317, 318, 321, 322, 325, 327, 328, 329, 331, 332], "timeindependentsystem": [22, 27, 31, 32, 34, 35, 36, 39, 42, 43, 258], "dt": [22, 25, 26, 27, 28, 30, 32, 35, 36, 40, 43, 95, 102, 104, 106, 107, 108, 160, 238, 298, 325], "alreadi": [22, 27, 32, 34, 35, 36, 40, 43, 63, 68, 83, 84, 98, 99, 104, 106, 107, 112, 115, 190, 198, 201, 222, 224, 229, 235, 239, 312, 313, 314, 315, 317, 320, 323, 325, 326, 327, 328, 331, 332], "now": [22, 27, 32, 34, 35, 36, 40, 43, 109, 188, 235, 308, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 332], "traj": [22, 25, 27, 32, 34, 35, 36, 40, 43, 58, 59, 74, 101, 109, 149, 262, 263, 264, 270, 271, 275, 276, 278, 279, 280, 281, 282, 283, 285, 288, 290, 291, 292, 293, 300, 315, 316, 319, 322, 326, 328, 329, 332], "assert": [22, 25, 26, 27, 30, 32, 34, 35, 36, 40, 43, 104], "condit": [22, 27, 32, 34, 35, 36, 40, 43, 57, 93, 112, 162, 198, 235, 237, 242, 243, 298, 311, 312, 316, 320, 322, 323, 324, 325, 327, 331], "Or": [22, 27, 32, 34, 35, 36, 40, 43, 74, 102, 106, 107, 108, 112, 316], "altern": [22, 27, 32, 34, 35, 36, 40, 43, 71, 109, 160, 211, 258, 320, 322], "forward": [22, 27, 32, 34, 35, 36, 40, 43, 44, 48, 50, 52, 54, 56, 57, 60, 63, 84, 95, 102, 106, 107, 108, 116, 121, 122, 123, 132, 135, 166, 195, 198, 234, 236, 296, 298, 302, 316, 317, 321, 322, 325, 326, 328, 331], "dynam": [22, 27, 31, 32, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 49, 53, 55, 57, 73, 74, 95, 102, 106, 107, 108, 123, 132, 133, 143, 149, 197, 198, 199, 227, 235, 237, 242, 243, 309, 311, 313, 314, 315, 316, 321, 322, 323, 325, 327, 328, 331], "test_point": [22, 27, 32, 34, 35, 36, 40, 43, 235, 237, 242, 243], "53": [22, 27, 32, 34, 35, 36, 40, 43, 282, 284, 286, 300], "vladimir": 22, "On": [22, 45, 47, 309, 314, 327, 328], "topologi": 22, "steadi": 22, "ideal": 22, "fluid": [22, 33, 45, 241, 266, 272, 287, 304, 306, 309, 310, 314, 327], "page": [22, 51, 305, 308, 321, 331], "25": [22, 33, 47, 239, 260, 267, 300, 309, 313, 315, 317, 323, 327, 328, 329, 331], "28": [22, 31, 45, 280, 300, 309, 313, 314, 316, 317, 327, 328, 331], "1966": 22, "n_particl": [23, 235, 241, 261, 294, 321, 331], "bickleyjetdataset": 23, "bicklei": [23, 235, 258, 259, 265, 287, 304, 306, 310, 321], "jet": [23, 235, 258, 259, 265, 276, 281, 285, 287, 300, 304, 306, 310, 321, 329], "particl": [23, 27, 33, 34, 35, 36, 40, 43, 235, 241, 290, 291, 315, 317, 318, 322, 325, 331], "u_0": [23, 235], "4138": [23, 235], "frac": [23, 27, 34, 36, 40, 43, 44, 55, 57, 77, 102, 103, 106, 107, 108, 132, 133, 139, 147, 151, 152, 160, 171, 188, 199, 231, 233, 235, 241, 301, 313, 314, 325, 327, 328], "dai": [23, 235], "l_0": [23, 235], "77": [23, 235, 300, 320, 328], "r_0": [23, 235], "371": [23, 235, 300], "1446": [23, 235], "205": [23, 235, 300], "461": [23, 235, 295, 300, 304], "ep": [23, 98, 99, 103, 186, 235, 316, 317, 319], "075": [23, 235], "4": [23, 32, 33, 34, 35, 36, 42, 43, 55, 60, 65, 74, 94, 102, 104, 106, 107, 108, 109, 130, 131, 138, 142, 144, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 163, 211, 222, 224, 235, 239, 241, 261, 262, 265, 269, 272, 274, 275, 282, 286, 294, 300, 302, 303, 304, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "20": [23, 25, 31, 123, 143, 156, 194, 196, 199, 235, 241, 271, 276, 280, 282, 285, 289, 290, 291, 292, 300, 302, 313, 315, 316, 317, 321, 322, 327, 328, 329, 331], "evolut": [23, 56, 143, 224, 260, 325], "401": [23, 235, 300, 317], "timestep": [23, 103, 149, 197, 198, 238, 241, 317], "period": [23, 235, 317, 321, 331], "direct": [23, 63, 86, 87, 92, 95, 135, 150, 153, 154, 155, 163, 241, 289, 312, 321, 323, 324, 327, 328, 330, 331, 332], "wrap": [23, 63, 207, 242, 243, 308, 326], "surfac": [23, 187, 193, 235, 241, 287, 304, 310], "cylind": [23, 235], "pmatrix": [23, 30, 37, 38, 235, 240, 327], "cdot": [23, 27, 34, 68, 188, 215, 224, 235, 240, 321, 331], "further": [23, 55, 57, 190, 309, 316, 327, 331], "dataspac": 23, "bin": [23, 28, 111, 112, 113, 218, 238, 274, 279, 283, 284, 289, 292, 300, 313, 316, 318, 322, 327, 329], "discontinu": 23, "introduc": [23, 33, 55, 85, 102, 106, 107, 108, 116, 309, 311, 314, 320, 323, 327, 328, 330], "2d": [23, 273, 286, 287, 304, 306, 310, 313], "treat": [23, 85, 93, 94, 97], "propag": [23, 25, 26, 44, 45, 48, 50, 52, 54, 55, 56, 57, 60, 62, 65, 95, 102, 106, 107, 108, 123, 132, 227, 241, 302, 309, 314, 315, 331], "bickleyjet": [23, 258, 317], "underli": [23, 45, 55, 86, 95, 102, 106, 107, 108, 112, 113, 240, 241, 298, 307, 308, 320, 324, 325, 327, 329, 330, 331], "last": [23, 24, 57, 102, 106, 107, 108, 121, 151, 216, 235, 236, 308, 329], "endpoint": [23, 263, 276, 280, 281, 285], "endpoints_dataset": [23, 294, 321], "radiu": [23, 26, 210, 217, 235, 275], "endpoints_3d": 23, "to_3d": [23, 235, 317], "endpoints_3d_clust": 23, "n_bin": [23, 113, 191, 192, 290, 291, 329], "alireza": [23, 235], "hadjighasem": [23, 235], "daniel": [23, 235], "karrasch": [23, 235], "hiroshi": [23, 235], "teramoto": [23, 235], "georg": [23, 55, 163, 235, 309, 327], "haller": [23, 235], "spectral": [23, 53, 83, 98, 99, 102, 106, 107, 108, 115, 141, 235, 309, 311, 314, 320, 322, 324, 327, 328, 331], "approach": [23, 44, 49, 53, 57, 65, 73, 74, 85, 102, 106, 107, 108, 109, 111, 112, 148, 149, 151, 235, 241, 309, 322, 323, 326, 330, 331, 332], "lagrangian": [23, 111, 235, 321], "vortex": [23, 235], "detect": [23, 235, 321], "review": [23, 55, 235, 309, 311, 327], "93": [23, 235, 300, 328], "063107": [23, 235], "2016": [23, 47, 55, 111, 113, 197, 199, 235, 311, 325, 327, 329], "q": [24, 44, 121, 236, 274, 297, 328], "birth": [24, 236, 273, 286, 306], "death": [24, 236, 273, 286, 306], "chain": [24, 30, 41, 92, 105, 130, 131, 162, 171, 201, 236, 240, 273, 286, 306, 311, 323, 324, 330], "annihil": [24, 236], "creation": [24, 236], "probabl": [24, 29, 30, 41, 57, 65, 83, 84, 86, 91, 93, 94, 95, 97, 98, 99, 100, 102, 104, 106, 107, 108, 109, 113, 116, 118, 121, 130, 134, 135, 137, 141, 144, 149, 156, 160, 162, 163, 190, 194, 196, 218, 225, 236, 239, 240, 258, 289, 296, 297, 311, 313, 316, 317, 320, 323, 324, 327, 330, 331], "transit": [24, 29, 30, 37, 38, 41, 58, 63, 83, 84, 85, 86, 91, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 156, 159, 160, 161, 162, 163, 166, 170, 171, 172, 173, 188, 189, 194, 196, 227, 236, 238, 239, 240, 252, 258, 277, 300, 309, 311, 313, 315, 318, 320, 322, 323, 324, 327, 329, 332], "matrix": [24, 29, 30, 37, 38, 41, 44, 45, 50, 55, 57, 58, 65, 67, 68, 70, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 194, 196, 197, 199, 227, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 251, 253, 309, 311, 313, 314, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332], "p_": [24, 41, 44, 91, 95, 113, 125, 127, 134, 138, 147, 156, 161, 162, 163, 166, 236, 239, 309, 311, 320, 323, 324, 327, 328, 330], "ij": [24, 44, 91, 93, 98, 111, 113, 121, 125, 127, 134, 135, 136, 137, 138, 147, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 166, 172, 236, 239, 311, 321, 322, 323, 324, 328, 330], "q_i": [24, 166, 171, 236, 328], "text": [24, 98, 102, 106, 107, 108, 130, 152, 158, 159, 161, 194, 196, 202, 236, 239, 305, 316, 318, 319, 321, 324, 327, 328, 330, 331], "r_i": [24, 55, 111, 113, 123, 127, 132, 133, 137, 236, 327], "p_i": [24, 196, 236, 241], "zero": [24, 44, 63, 86, 91, 93, 94, 95, 97, 98, 99, 104, 109, 110, 111, 112, 136, 160, 161, 174, 176, 192, 199, 218, 224, 230, 231, 232, 233, 234, 241, 274, 275, 295, 300, 313, 318, 320, 322, 324, 328, 329, 331], "wise": [24, 160, 201, 204, 241, 325], "foral": [24, 157, 166, 311, 323, 328], "ldot": [24, 45, 47, 77, 102, 106, 107, 108, 178, 215, 240, 241, 311, 313, 314, 315, 320, 323, 328, 331], "birthdeathchain": [24, 258], "rh": [25, 26, 262, 275], "definit": [25, 26, 65, 102, 106, 107, 108, 113, 116, 176, 182, 183, 184, 185, 186, 235, 237, 241, 242, 243, 312, 317], "ordinari": [25, 109, 176, 313, 320, 326], "differenti": [25, 26, 27, 32, 35, 36, 42, 43, 197, 198, 217, 258, 315, 322, 325], "equat": [25, 26, 27, 32, 35, 36, 42, 43, 44, 73, 102, 106, 107, 108, 113, 121, 197, 198, 199, 227, 256, 257, 314, 315, 322, 325], "hand": [25, 26, 95, 198, 235, 237, 242, 243, 290, 307, 313, 327, 331], "side": [25, 26, 60, 62, 198, 235, 237, 242, 243, 290, 312, 331], "sde": [25, 26, 40, 235, 237, 242, 243, 258, 286, 322], "record": [25, 26, 31, 39, 40, 63, 235, 241], "customsystem": [25, 26, 258], "some": [25, 26, 44, 45, 63, 65, 85, 95, 102, 103, 106, 107, 108, 199, 227, 235, 237, 242, 243, 252, 255, 287, 307, 308, 310, 314, 317, 319, 320, 325, 328, 329, 331], "exponenti": [25, 160, 331], "decai": [25, 316, 331], "def": [25, 26, 63, 260, 271, 275, 282, 295, 298, 300, 303, 308, 317, 319, 321, 329], "45": [25, 116, 121, 130, 263, 277, 300, 302, 314, 328], "With": [25, 251, 316, 317, 321, 323, 325, 328], "x0": [25, 26, 197, 198, 235, 237, 242, 243, 262, 263, 264, 282, 284, 290, 291, 292, 293, 298, 300, 301, 314, 315, 317, 319, 321, 322, 325, 329], "50": [25, 160, 260, 262, 264, 275, 277, 281, 282, 284, 293, 300, 302, 309, 316, 317, 318, 321, 322, 324, 327, 329, 332], "propagated_sampl": [25, 26], "sigma": [26, 27, 31, 36, 42, 43, 44, 76, 77, 79, 81, 94, 103, 104, 275, 301, 314, 315, 321, 322], "stochast": [26, 27, 32, 35, 36, 42, 43, 74, 93, 95, 100, 107, 108, 126, 127, 135, 138, 139, 144, 145, 149, 162, 163, 258, 309, 311, 315, 320, 322, 323, 328, 331], "w_t": [26, 27, 35, 36, 40, 42, 43, 275, 315, 322], "prefactor": 26, "front": [26, 202], "wiener": [26, 27, 35, 36, 40, 42, 43], "euler": [26, 27, 32, 34, 35, 36, 43, 315, 322], "maruyama": [26, 27, 32, 34, 35, 36, 43, 315, 322], "Then": [26, 57, 85, 102, 106, 107, 108, 320, 327, 328], "forc": [26, 33, 36, 91, 98, 99, 113, 241, 320, 331], "harmon": [26, 300, 329], "spheric": [26, 241], "inclus": [26, 86, 222], "harmonic_sphere_forc": [26, 275], "dist_to_origin": [26, 275], "linalg": [26, 275, 314], "dist_to_spher": [26, 275], "els": [26, 103, 104, 109, 110, 111, 121, 142, 158, 159, 162, 163, 199, 235, 237, 242, 243, 275, 295, 316, 317, 318, 328, 332], "our": [26, 312, 314, 315, 316, 320, 321, 322, 326, 328, 329, 330, 332], "diag": [26, 44, 55, 77, 102, 106, 107, 108, 130, 178, 186, 275, 289, 313, 327, 331], "lambda": [26, 30, 74, 144, 240, 262, 275, 291, 300, 314, 317, 319, 321, 322, 329], "55": [26, 188, 277, 300, 328], "300": [26, 289, 300, 317], "temperature_factor": [27, 34, 276], "damp": [27, 34, 241], "live": [27, 29, 31, 35, 36, 39, 40, 43, 63, 239, 313, 318, 328], "landscap": [27, 34, 35, 36, 40, 41, 42, 43, 200, 218, 255, 273, 276, 280, 284, 285, 286, 306, 315, 318], "subject": [27, 35, 36, 40, 43, 60, 62, 312, 315], "nabla": [27, 34, 35, 36, 40, 42, 43, 315, 322], "v": [27, 34, 35, 36, 40, 42, 43, 44, 57, 152, 182, 199, 276, 280, 281, 282, 284, 285, 287, 295, 304, 310, 314, 315, 316, 318, 321, 322, 323, 331], "kt": [27, 34, 41, 292], "x_1": [27, 35, 36, 47, 215, 320, 321, 322, 325], "x_2": [27, 35, 36, 322, 325], "temperatur": [27, 34, 35, 40, 102, 106, 107, 108, 300, 316, 322, 329], "mcmc": [28, 162, 238], "100000": [28, 96, 160, 274, 308], "vari": [28, 318], "qualiti": [28, 305, 313], "give": [28, 86, 104, 109, 112, 113, 149, 197, 198, 312, 324, 325, 328, 329, 330, 331], "opportun": 28, "synthet": [28, 30, 93, 94, 97, 102, 106, 107, 108, 327], "doublewelldiscret": [28, 258], "grid_siz": [29, 239, 267, 297, 299, 328], "bar_loc": [29, 239, 267, 297, 299, 328], "union": [29, 44, 55, 57, 60, 62, 63, 65, 73, 74, 81, 86, 88, 91, 95, 96, 98, 102, 104, 106, 107, 108, 109, 163, 188, 196, 224], "9": [29, 39, 55, 65, 84, 93, 102, 106, 107, 108, 109, 110, 113, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 137, 138, 139, 142, 143, 144, 147, 156, 194, 261, 267, 270, 274, 286, 291, 292, 293, 296, 297, 298, 299, 300, 304, 307, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332], "home_loc": [29, 239, 267, 297, 299, 328], "drunkard": [29, 239, 266, 272, 287, 304, 306, 310, 328], "plane": [29, 239, 313, 316], "take": [29, 44, 55, 57, 60, 63, 70, 74, 85, 86, 88, 95, 102, 104, 106, 107, 108, 111, 112, 130, 160, 188, 189, 193, 220, 239, 309, 313, 316, 320, 321, 327, 328, 329], "home": [29, 239, 288, 295, 321, 328], "absorb": [29, 239], "3x3": [29, 239], "corner": [29, 239], "ones": [29, 44, 55, 57, 63, 112, 239, 241, 313, 317, 324, 328, 329], "do": [29, 45, 86, 95, 102, 106, 107, 108, 112, 135, 160, 208, 209, 239, 312, 326, 329, 331], "lead": [29, 44, 57, 58, 66, 70, 85, 91, 98, 113, 182, 186, 188, 204, 230, 231, 232, 233, 234, 238, 239, 241, 309, 313, 314, 323, 324, 330], "nm": [29, 239], "jump": [29, 41, 84, 102, 106, 107, 108, 112, 116, 121, 160, 166, 170, 172, 173, 239, 296, 311, 314, 320, 323, 324, 326, 327, 328, 332], "identifi": [29, 239, 309, 316], "nj": [29, 239], "locat": [29, 34, 83, 95, 188, 222, 239, 291, 328], "coordin": [29, 34, 44, 55, 148, 151, 191, 192, 200, 218, 239, 279, 316, 327, 328, 329, 331], "drunkardswalk": [29, 258, 328], "lazi": [30, 240, 268, 324], "97": [30, 240, 268, 300, 319, 323, 324, 327], "rotat": [30, 240, 318], "higher": [30, 44, 95, 240, 241, 313, 316, 317, 324], "msm": [30, 74, 83, 84, 85, 86, 89, 95, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 188, 189, 196, 218, 236, 239, 240, 252, 258, 274, 283, 288, 290, 292, 293, 296, 297, 299, 300, 311, 316, 317, 319, 320, 324, 328, 329, 330, 332], "stai": [30, 98, 99, 112, 240, 317, 322, 323, 327, 328], "continu": [30, 111, 198, 252, 311], "multivari": [30, 55, 240, 327], "distribut": [30, 44, 57, 65, 83, 84, 91, 93, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 113, 115, 118, 125, 127, 128, 131, 133, 139, 142, 143, 144, 145, 147, 149, 161, 162, 163, 166, 169, 171, 218, 235, 236, 238, 240, 274, 277, 289, 296, 297, 303, 312, 313, 314, 316, 318, 320, 322, 323, 324, 326, 327, 329, 331, 332], "act": [30, 241, 315, 331], "hidden": [30, 37, 38, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 252, 258, 270, 271, 326, 332], "gaussian": [30, 76, 77, 81, 94, 95, 96, 98, 99, 101, 240, 313, 319, 320, 321, 322, 326, 331], "benchmark": [30, 316, 317, 326, 332], "demonstr": [30, 109, 262, 270, 271, 275, 282, 288, 289, 290, 291, 293, 296, 314, 315, 323, 328, 329], "purpos": [30, 60, 62, 83, 95, 312, 313, 324, 329, 331, 332], "equip": [30, 65, 75, 240, 320, 331], "nois": [30, 110, 240, 314, 317], "half": [30, 44, 57, 63, 73, 240, 321, 328], "open": [30, 86, 240], "interv": [30, 86, 92, 103, 104, 105, 190, 201, 204, 225, 240, 251, 260, 261, 271, 282, 317, 323, 327], "feature_trajectori": [30, 103, 303, 309, 327, 331], "2e": [31, 194, 196, 300, 328], "lorenz": [31, 259, 265, 306], "rho": [31, 227, 321], "xy": [31, 231, 233, 234, 275, 276, 280, 281, 282, 285, 287, 290, 304, 310, 317, 319, 321, 322, 332], "beta": [31, 32, 35, 40, 62, 152, 282, 322], "8": [31, 34, 36, 42, 55, 102, 104, 106, 107, 108, 109, 111, 137, 163, 188, 241, 260, 261, 262, 263, 264, 265, 267, 269, 271, 272, 275, 278, 279, 281, 283, 284, 286, 289, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "edward": 31, "nonperiod": 31, "atmospher": 31, "scienc": [31, 44, 47, 53, 57, 65, 73, 74, 102, 103, 107, 109, 111, 113, 116, 121, 123, 132, 133, 143, 197, 199, 309, 311, 315, 321, 322, 323, 325, 327, 328, 329, 331, 332], "130": [31, 300, 328], "141": [31, 300], "1963": 31, "ornstein": [32, 273, 286, 306], "uhlenbeck": [32, 273, 286, 306], "dx_t": [32, 40], "alpha": [32, 98, 152, 157, 158, 159, 199, 217, 240, 264, 271, 274, 277, 283, 298, 301, 303, 314, 316, 318, 319, 323, 325, 327, 331], "dw_t": [32, 40], "n_burn_in": [33, 91, 269, 302, 320], "5000": [33, 290, 291, 292, 295, 302, 313, 317, 324, 331], "initial_posit": [33, 241, 269], "pbf": [33, 241, 269, 331], "40": [33, 34, 55, 57, 131, 267, 271, 276, 277, 281, 300, 316, 317, 321, 328], "boundari": [33, 84, 121, 235, 238, 328, 331], "simplic": [33, 241, 328], "972": [33, 331], "interact": [33, 55, 241, 327], "equilibr": [33, 327, 331], "pbfsimul": [33, 258], "without": [33, 57, 63, 83, 95, 96, 102, 106, 107, 108, 112, 120, 228, 230, 231, 232, 233, 234, 305, 312, 323, 324, 328], "drift": [33, 241], "explicit": 33, "mile": [33, 241, 331], "macklin": [33, 241, 331], "matthia": [33, 241, 331], "ller": [33, 241, 331], "acm": [33, 241, 331], "transact": [33, 241, 313, 331], "graphic": [33, 241, 331], "tog": [33, 241, 331], "32": [33, 241, 269, 272, 300, 317, 324, 331], "12": [33, 55, 74, 104, 107, 111, 123, 132, 133, 136, 137, 138, 139, 143, 163, 165, 167, 241, 269, 296, 299, 300, 302, 304, 313, 315, 316, 317, 319, 320, 321, 323, 324, 326, 327, 328, 330, 331, 332], "2013": [33, 43, 45, 55, 74, 83, 91, 95, 98, 99, 107, 115, 141, 149, 241, 309, 311, 314, 315, 320, 324, 326, 327, 331], "diffus": [34, 41], "quadrupl": [34, 35, 36, 273, 286, 306, 322], "80": [34, 55, 160, 292, 300, 316, 317], "x_": [34, 44, 48, 50, 52, 54, 55, 56, 57, 102, 104, 106, 107, 108, 109, 111, 112, 113, 135, 151, 163, 199, 211, 217, 236, 239, 307, 309, 311, 314, 315, 321, 326, 327, 328, 330, 331], "eta_t": 34, "sim": [34, 91, 240, 267, 297, 299, 313, 325, 328], "mathcal": [34, 57, 224, 227, 240, 301, 309, 313, 314, 315, 320, 321, 323, 331], "minima": 34, "too": [34, 65, 70, 85, 86, 111, 112, 208, 209, 235, 242, 313, 320], "high": [34, 160, 207, 289, 309, 311, 313, 322, 328], "larg": [34, 74, 85, 91, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 170, 194, 196, 309, 313, 320, 328], "nan": [34, 175, 204, 226, 328], "energi": [34, 41, 111, 112, 113, 193, 200, 218, 235, 237, 242, 243, 273, 275, 279, 286, 287, 290, 300, 304, 306, 310, 329], "73943019": 34, "22373758": 34, "26914935": 34, "67329635": 34, "invers": [35, 40, 44, 48, 50, 52, 54, 56, 65, 68, 70, 71, 83, 84, 95, 102, 106, 107, 108, 169, 183, 229, 239, 315, 318, 322, 328, 331], "asymmetr": [36, 273, 286, 306], "16": [36, 63, 270, 284, 291, 296, 300, 304, 313, 316, 317, 318, 319, 320, 323, 326, 327, 328, 329, 331, 332], "2x_1": [36, 325], "3x_1": 36, "n_sampl": [37, 38, 55, 57, 91, 104, 197, 198, 199, 226, 270, 271, 293, 300, 319, 323, 326, 329, 332], "emiss": [37, 38, 270, 271, 320, 326, 332], "mask": [37, 199, 295], "metast": [37, 43, 83, 91, 95, 98, 99, 102, 106, 107, 108, 115, 141, 290, 297, 309, 311, 315, 320, 322, 324, 328, 331], "linearli": [37, 38, 239, 295, 319, 326, 327, 332], "separ": [37, 38, 55, 91, 92, 95, 98, 99, 105, 110, 201, 230, 231, 232, 233, 295, 305, 309, 313, 319, 320, 323, 324, 325, 326, 327, 332], "devic": [37, 38, 60, 61, 62, 63, 64, 65, 66, 316, 317, 326, 332], "sequenc": [37, 38, 55, 93, 94, 95, 119, 120, 210, 226, 240, 318, 320, 323, 327, 328], "Its": [37, 38, 63, 104, 241, 331], "95": [37, 38, 92, 104, 105, 190, 195, 201, 204, 225, 300, 320, 327], "mu_0": [37, 38, 44, 331], "mu_1": [37, 38, 102, 106, 107, 108, 331], "015": 37, "afterward": [37, 38, 63, 331], "swissrol": [38, 266, 272, 306], "90": [38, 300, 316, 318, 328], "7": [38, 55, 83, 84, 98, 99, 102, 104, 106, 107, 108, 109, 115, 116, 121, 127, 141, 149, 156, 160, 163, 166, 170, 172, 173, 263, 267, 274, 286, 294, 295, 296, 297, 298, 299, 300, 304, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "mu_2": 38, "mu_3": 38, "thoma": [39, 116, 121, 259, 265, 306, 328], "attractor": [39, 259, 265, 306], "bx": 39, "bz": 39, "dissip": 39, "stabl": [39, 141, 194, 196, 331], "attract": 39, "ren": [39, 107, 123, 132, 133, 143], "chao": [39, 321], "seen": [39, 300, 326, 331], "feedback": 39, "circuit": 39, "analysi": [39, 51, 53, 55, 83, 84, 86, 91, 98, 99, 102, 106, 107, 108, 109, 110, 111, 115, 125, 127, 135, 136, 137, 138, 142, 144, 147, 149, 160, 252, 258, 300, 309, 311, 313, 320, 321, 322, 324, 327, 328, 329, 331], "synthesi": 39, "labyrinth": 39, "bifurc": 39, "1889": 39, "1905": 39, "1999": [39, 323], "quintupl": [40, 273, 286, 306], "slowli": [40, 55, 282, 327], "oscil": [40, 241, 282, 331], "origin": [40, 45, 55, 70, 86, 95, 116, 139, 236, 282, 297, 312, 314, 318, 320, 321, 328, 329, 331], "arctan": 40, "timedependentsystem": [40, 258], "start": [40, 58, 91, 95, 96, 98, 99, 102, 104, 106, 107, 108, 111, 121, 133, 139, 143, 149, 162, 170, 219, 236, 238, 239, 263, 267, 302, 311, 313, 316, 318, 320, 326, 327, 328], "metropoli": [41, 273, 286, 306], "neighbor": [41, 158, 241, 328], "1d": [41, 109, 273, 286, 287, 304, 306, 310], "unit": [41, 44, 63, 84, 95, 102, 106, 107, 108, 110, 142, 200, 218, 222, 314, 319, 326, 328, 332], "min": [41, 47, 55, 57, 188, 270, 282, 296, 299, 300, 302, 303, 313, 316, 317, 318, 319, 326, 327, 328, 329, 331, 332], "e_": 41, "e_i": [41, 104, 109, 163], "tripl": [42, 43, 273, 286, 306, 315], "75": [42, 188, 261, 296, 300], "24": [42, 43, 53, 60, 272, 300, 307, 313, 315, 317, 322, 326, 328, 331], "82": [42, 241, 272, 300], "4251": 42, "27": [42, 286, 300, 313, 317, 328, 331], "5344": 42, "53128": 42, "24006": 42, "0684": 42, "found": [43, 49, 63, 85, 90, 91, 109, 110, 113, 308, 313, 317, 320, 321, 322, 330], "09": [43, 102, 106, 107, 108, 194, 300, 315], "3e": [43, 60, 300, 317, 319, 324, 328], "quad": [43, 45, 311, 312, 321, 322, 323], "5e": [43, 65, 300, 316], "volum": [43, 57, 188, 311, 315, 327, 328], "american": [43, 96, 160, 311, 315, 320, 328], "mathemat": [43, 96, 121, 311, 315, 320, 328], "soc": [43, 315, 328], "instantaneous_coeffici": 44, "singular_valu": [44, 50, 331], "timelagged_coeffici": 44, "rank_0": 44, "rank_t": 44, "var_cutoff": [44, 55, 57, 327], "instantaneous_ob": [44, 48, 50, 52, 54, 56], "_monomi": [44, 49, 55, 56, 57, 327], "ident": [44, 49, 55, 56, 57, 75, 84, 91, 95, 102, 106, 107, 108, 112, 220, 227, 258, 314, 315, 320, 321, 327], "timelagged_ob": [44, 48, 50, 52, 54, 56], "tau": [44, 48, 50, 52, 54, 55, 56, 57, 58, 85, 86, 91, 95, 102, 104, 106, 107, 108, 110, 111, 112, 123, 132, 133, 139, 147, 151, 160, 211, 227, 302, 307, 309, 316, 318, 321, 322, 323, 326, 327, 330, 331], "project": [44, 45, 48, 55, 57, 63, 91, 95, 98, 99, 107, 249, 260, 263, 264, 271, 298, 302, 303, 307, 308, 309, 312, 314, 315, 316, 317, 319, 320, 326, 327, 331, 332], "specif": [44, 76, 77, 78, 79, 80, 81, 149, 204, 211, 222, 308, 331], "singular": [44, 47, 50, 55, 57, 71, 73, 74, 102, 106, 107, 108, 180, 186, 294, 309, 317], "sigma_i": [44, 180, 331], "chi_1": [44, 331, 332], "approx": [44, 47, 186, 197, 198, 215, 307, 325, 331], "chi_0": [44, 317, 331, 332], "full": [44, 58, 84, 86, 95, 102, 103, 104, 106, 107, 108, 109, 115, 149, 162, 163, 164, 166, 169, 171, 194, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 309, 313, 327, 331, 332], "kind": [44, 60, 62, 63, 65, 67, 74, 104, 227, 296, 305, 308, 312, 323, 326, 328, 330], "tica": [44, 57, 258, 287, 304, 309, 310, 331], "basis_transform_forward": 44, "basis_transform_backward": 44, "output_dimens": [44, 48, 50, 52, 54, 56, 331], "transferoperatormodel": [44, 258], "coeffici": [44, 188, 197, 198, 199, 215, 309, 325], "c_": [44, 55, 57, 68, 91, 98, 102, 106, 107, 108, 111, 113, 151, 156, 158, 160, 161, 162, 230, 231, 233, 234, 321, 323, 327, 328, 330, 331], "00": [44, 55, 57, 68, 102, 106, 107, 108, 142, 265, 272, 286, 300, 304, 327, 331], "0t": [44, 55, 57, 68, 327, 331], "tt": [44, 55, 57, 68, 327, 331], "structur": [44, 65, 163, 294, 308, 309, 312, 315, 317, 321, 327], "11": [44, 55, 57, 65, 73, 74, 102, 106, 107, 108, 149, 277, 283, 286, 288, 293, 300, 304, 307, 313, 316, 317, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332], "cut": [44, 55, 57, 176], "togeth": [44, 57, 133, 207, 250, 312, 324, 328], "futur": [44, 48, 50, 52, 54, 56, 57, 63, 312, 331], "backward": [44, 48, 50, 52, 54, 56, 57, 63, 84, 98, 102, 106, 107, 108, 116, 121, 122, 135, 144, 166, 169, 171, 234, 236, 302, 317, 321, 328, 331], "mapped_data": [44, 48, 50, 52, 54, 56], "ck_test": [44, 92, 95, 102, 105, 106, 107, 108, 190, 225, 258, 288, 316], "test_model": [44, 73, 227, 288, 331], "include_lag0": [44, 92, 95, 102, 105, 106, 107, 108, 227], "n_observ": 44, "phi": [44, 57, 315, 316, 321, 322], "chapman": [44, 92, 95, 102, 105, 106, 107, 108, 190, 225, 227, 257, 287, 304, 310, 316], "kolmogorov": [44, 92, 95, 102, 105, 106, 107, 108, 190, 225, 227, 257, 287, 304, 310, 316], "encapsul": [44, 47, 49, 53, 60, 62, 65, 85, 193, 238], "limit": [44, 55, 57, 85, 102, 106, 107, 108, 111, 112, 190, 312, 328, 330], "input_dimens": 44, "express": [44, 130, 236, 312, 320, 331], "n_statist": 44, "progressbar": [44, 91, 217, 220, 227], "chapmankolmogorovtest": [44, 95, 102, 106, 107, 108, 190, 227, 258], "langl": [44, 102, 106, 107, 108, 123, 127, 132, 133, 309, 321, 331], "g_": [44, 321, 322], "f_": [44, 112, 152, 164, 166, 172, 325, 328], "rangle_": [44, 123, 132, 321, 331], "rho_": 44, "empir": [44, 102, 106, 107, 108, 274, 277, 331], "predict": [44, 102, 103, 106, 107, 108, 190, 197, 198, 199, 225, 325], "th": [44, 95, 102, 106, 107, 108, 111, 112, 113, 124, 126, 146, 161, 197, 215, 300, 308, 325, 329, 330], "power": [44, 95, 102, 106, 107, 108, 325, 331], "champan": 44, "compar": [44, 60, 62, 104, 109, 151, 163, 227, 309, 317, 319, 320, 328, 329, 331, 332], "static": [44, 85, 91, 103, 201, 208, 209, 226, 235, 239, 313, 320], "effective_output_dimens": 44, "rank0": 44, "rankt": 44, "lag_multipl": 44, "observables_mean_fre": 44, "statistics_mean_fre": 44, "approxim": [44, 47, 49, 51, 55, 56, 57, 58, 59, 73, 74, 89, 102, 106, 107, 108, 162, 183, 184, 185, 198, 215, 217, 258, 298, 309, 314, 315, 317, 322, 324, 327, 331, 332], "extrapol": [44, 216, 331], "markovian": [44, 95, 227, 255, 309, 316], "unmodifi": 44, "averag": [44, 63, 73, 85, 102, 103, 106, 107, 108, 111, 112, 320, 330, 331], "window": [44, 58, 85, 86, 111, 112, 151, 160, 210, 215, 323, 330], "total": [44, 84, 86, 148, 149, 160, 169, 170, 171, 173, 199, 202, 203, 217, 236, 241, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 328, 330], "_": [44, 57, 76, 77, 78, 79, 80, 81, 94, 102, 106, 107, 108, 121, 123, 128, 132, 133, 143, 160, 188, 227, 260, 290, 309, 313, 317, 318, 319, 321, 322, 324, 327, 328, 331], "sigma_": [44, 161, 327], "psi_": [44, 315], "phi_": 44, "q_": [44, 121, 328], "r_": [44, 276, 280, 281, 285], "mu_t": 44, "achiev": [44, 63, 313, 331], "hat": [44, 313, 314], "cross": [44, 67, 73, 74, 102, 106, 107, 108, 123, 132, 231, 321, 322, 328, 331], "typic": [44, 63, 73, 160, 322, 331], "vamp1": [44, 73, 102, 106, 107, 108], "rayleigh": [44, 73, 102, 106, 107, 108], "quotient": [44, 73, 102, 106, 107, 108], "vamp2": [44, 65, 71, 72, 73, 102, 106, 107, 108], "error": [44, 63, 73, 85, 86, 91, 102, 103, 106, 107, 108, 111, 148, 149, 152, 160, 320, 326, 328, 330, 331], "covariances_test": [44, 73], "realiz": [44, 73, 95, 102, 106, 107, 108, 148, 149, 323], "spd": [44, 182, 183, 184, 185], "mani": [44, 55, 96, 102, 106, 107, 108, 109, 198, 219, 241, 311, 320, 321, 323, 324, 326, 327], "33": [44, 63, 73, 282, 300, 317], "nonlinear": [44, 47, 52, 53, 57, 63, 65, 73, 74, 107, 109, 197, 199, 309, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 331, 332], "23": [44, 55, 57, 65, 73, 74, 104, 107, 109, 111, 113, 194, 196, 199, 300, 309, 311, 313, 317, 323, 327, 328, 329, 331, 332], "66": [44, 57, 65, 73, 74, 107, 109, 300, 309, 315, 323, 331, 332], "2020": [44, 49, 57, 65, 73, 74, 107, 109, 309, 323, 331, 332], "cecilia": [44, 55, 57, 73, 102, 103, 107, 110, 309, 311, 327, 331], "clementi": [44, 55, 57, 73, 102, 103, 107, 110, 309, 311, 327, 331], "theori": [44, 45, 49, 55, 57, 73, 84, 91, 102, 106, 107, 108, 110, 116, 121, 166, 170, 171, 172, 173, 217, 241, 258, 307, 309, 311, 313, 314, 320, 327, 331], "5002": [44, 55, 57, 73, 107, 327, 331], "5011": [44, 55, 57, 73, 107, 327, 331], "2015": [44, 47, 53, 55, 57, 73, 74, 85, 91, 104, 107, 111, 163, 309, 315, 322, 323, 327, 328, 330, 331], "timescal": [44, 55, 89, 91, 92, 95, 96, 98, 102, 105, 106, 107, 108, 132, 133, 149, 195, 226, 228, 257, 287, 304, 309, 310, 311, 316, 318, 323, 327], "impli": [44, 86, 133, 147, 149, 195, 257, 287, 304, 310, 312, 316, 327], "t_i": [44, 55, 102, 106, 107, 108, 132, 133, 147, 211, 236, 327], "log": [44, 63, 64, 111, 113, 132, 133, 147, 156, 160, 192, 218, 289, 291, 293, 313, 316, 326, 327], "lambda_i": [44, 55, 102, 106, 107, 108, 123, 132, 133, 147, 160, 323, 327], "By": [44, 55, 89, 90, 93, 94, 95, 97, 102, 106, 107, 108, 110, 111, 117, 120, 192, 195, 197, 198, 218, 325, 326, 327, 331], "under": [44, 55, 57, 60, 62, 63, 65, 85, 91, 95, 102, 106, 107, 108, 109, 160, 162, 186, 227, 235, 237, 242, 243, 308, 309, 312, 313, 315, 316, 318, 320, 323, 331], "principl": [44, 241, 309, 314, 327, 331, 332], "howev": [44, 63, 85, 102, 106, 107, 108, 308, 313, 320, 321, 324, 327, 331], "percentag": [44, 55, 327, 331], "interpret": [44, 92, 109, 188, 221, 222, 224, 239, 309, 321, 327, 328, 330, 331], "rais": [44, 63, 74, 95, 104, 108, 112, 160, 194, 196, 208, 209, 224, 235, 237, 242, 243], "valueerror": [44, 112, 224], "real": [44, 102, 106, 107, 108, 137, 294, 295, 307, 314, 315, 317, 319, 321, 322], "imaginari": [44, 288, 295], "transformed_data": [44, 50, 52, 54, 56], "cumulative_kinetic_vari": 44, "cumul": [44, 55, 57], "strictli": [44, 55, 57, 63], "feature_component_correl": [44, 327], "x_i": [44, 45, 47, 76, 77, 78, 79, 80, 81, 104, 109, 112, 113, 163, 224, 313, 314, 315, 320, 321, 322, 327, 329], "theta_j": [44, 327], "linear": [44, 45, 55, 57, 63, 135, 150, 153, 154, 155, 188, 197, 198, 199, 239, 291, 314, 316, 317, 319, 324, 325, 326, 327, 331, 332], "them": [44, 50, 52, 54, 55, 56, 57, 61, 63, 64, 70, 92, 98, 99, 104, 108, 148, 149, 196, 311, 315, 327, 330], "written": [44, 57, 123, 132, 311, 320, 321, 327, 331], "corr": [44, 123, 327], "theta": [44, 197, 198, 325, 327], "sum_l": [44, 327], "x_l": [44, 327], "mu_l": [44, 327], "li": [44, 327, 329], "eigenvector": [44, 45, 47, 51, 52, 53, 54, 55, 83, 95, 102, 106, 107, 108, 115, 123, 126, 132, 137, 141, 142, 143, 144, 160, 176, 177, 181, 182, 294, 314, 318, 321, 323, 324], "problem": [44, 47, 55, 57, 91, 121, 176, 258, 308, 312, 321, 322, 327, 328, 329, 331], "There": [44, 45, 91, 222, 321, 322, 328, 331], "row": [44, 83, 91, 93, 95, 100, 102, 106, 107, 108, 109, 117, 118, 119, 120, 136, 138, 142, 161, 175, 184, 197, 225, 230, 231, 232, 233, 234, 239, 241, 311, 317, 320, 321, 325, 327], "koopman_matrix": [44, 48, 50, 52, 54, 56, 258], "operator_invers": [44, 48, 50, 52, 54, 56], "pseudo": [44, 48, 50, 52, 54, 56, 160, 315], "instead": [44, 48, 49, 50, 52, 54, 55, 56, 57, 63, 70, 74, 102, 103, 104, 106, 107, 108, 109, 110, 111, 199, 236, 239, 309, 326, 327], "km": [44, 57], "singular_vectors_left": [44, 303, 327, 331], "repres": [44, 65, 86, 87, 95, 102, 106, 107, 108, 123, 132, 133, 143, 305, 311, 325, 328], "singular_vectors_right": [44, 331], "certain": [44, 63, 86, 95, 241, 309, 312, 328], "preced": [44, 55, 57], "disabl": [44, 63, 313], "whitening_rank_0": 44, "whitening_rank_t": 44, "exact": [45, 46, 238, 298, 314, 325], "driver": 45, "scipi": [45, 84, 116, 121, 123, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170, 177, 189, 191, 198, 253, 268, 270, 276, 280, 281, 285, 298, 319, 321, 326, 332], "support": [45, 47, 82, 103, 203, 241, 313, 317, 321, 331], "standard": [45, 91, 93, 94, 96, 103, 104, 142, 148, 149, 201, 241, 311, 314, 319, 320, 321, 322, 323, 331], "follow": [45, 55, 57, 63, 74, 84, 91, 98, 102, 104, 106, 107, 108, 111, 112, 121, 128, 130, 160, 162, 188, 198, 218, 222, 236, 241, 307, 308, 311, 312, 313, 314, 315, 317, 319, 322, 324, 325, 327, 328, 329, 331], "formul": [45, 116, 166, 305, 311, 321, 328], "available_mod": [45, 46], "svd": [45, 49, 50, 102, 106, 107, 108, 314, 331], "packag": [45, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 295, 308, 309, 311, 312, 313, 321, 323, 325], "z_0": 45, "z_t": 45, "z_": [45, 314], "z_1": [45, 314], "y_i": [45, 47, 224, 313, 314, 315, 321, 322], "assumpt": [45, 55, 149, 160, 227, 309, 314, 324], "relationship": [45, 322], "peter": [45, 309, 314, 323, 327, 328], "schmid": [45, 309, 314, 327], "experiment": [45, 102, 103, 106, 107, 108, 309, 311, 314, 327], "mechan": [45, 63, 309, 312, 314, 327], "656": [45, 309, 314, 327], "2010": [45, 160, 309, 313, 314, 321, 327], "jonathan": [45, 309, 314], "tu": [45, 309, 314], "clarenc": [45, 47, 53, 309, 314, 315, 322, 327], "w": [45, 47, 53, 55, 125, 142, 149, 166, 176, 182, 183, 184, 185, 199, 215, 232, 233, 234, 236, 239, 241, 309, 314, 315, 317, 322, 324, 327], "rowlei": [45, 47, 53, 309, 314, 315, 322, 327], "dirk": [45, 309, 314], "luchtenburg": [45, 309, 314], "steven": [45, 197, 199, 309, 314, 325], "l": [45, 63, 95, 102, 104, 106, 107, 108, 112, 121, 123, 132, 133, 142, 143, 149, 152, 156, 160, 161, 164, 166, 169, 171, 176, 183, 184, 185, 197, 199, 201, 225, 282, 309, 314, 320, 323, 325, 328, 329], "brunton": [45, 197, 199, 309, 314, 325], "nathan": [45, 197, 199, 309, 314, 325], "kutz": [45, 197, 199, 309, 314, 325], "applic": [45, 83, 93, 94, 96, 97, 98, 99, 107, 115, 141, 241, 258, 294, 295, 309, 311, 312, 314, 320, 324], "arxiv": [45, 49, 91, 309, 314, 320, 326], "preprint": [45, 49, 85, 91, 309, 314, 320, 326, 330], "1312": [45, 309, 314, 326], "0041": [45, 309, 314], "dmdmodel": [45, 258], "to_dataset": [45, 47, 51, 53, 55, 57, 258], "available_driv": 45, "dmd": [46, 258, 309, 315, 327], "captur": [46, 55, 325, 327, 331], "output_trajectori": 46, "n_eig": [47, 51, 53, 177, 294, 295, 315, 317, 319, 321, 322], "extend": [47, 53, 104, 305, 309, 315, 319, 322, 327, 331], "perron": [47, 141, 322, 324], "frobeniu": [47, 322], "x_m": [47, 322], "y_1": 47, "y_m": 47, "word": [47, 112], "psi_x": [47, 315], "psi_i": [47, 315, 331], "solv": [47, 55, 121, 176, 197, 314, 321, 322, 325, 327, 331], "_f": [47, 314], "pre": [47, 63, 313, 332], "domin": [47, 55, 57, 84, 170, 176, 186, 249, 253, 302, 303, 307, 315, 321, 322, 327, 328, 331], "available_oper": 47, "matthew": [47, 53, 309, 315, 322, 327], "o": [47, 53, 63, 260, 271, 289, 309, 313, 315, 319, 320, 322, 323, 324, 327, 331], "william": [47, 53, 309, 315, 322, 327], "ioanni": [47, 53, 309, 315, 322, 327], "kevrekidi": [47, 53, 309, 315, 322, 327], "driven": [47, 53, 309, 315, 322, 325, 327, 331], "oopman": [47, 53, 309, 315, 322, 327], "1307": [47, 309, 315, 327], "1346": [47, 309, 315, 327], "erron": 47, "robeniu": 47, "51": [47, 300], "79": [47, 300], "doi": [47, 53, 60, 307, 321, 322, 326], "3934": 47, "jcd": 47, "2016003": 47, "edmdmodel": [47, 258], "edmdkoopmanmodel": 47, "edmd": [48, 258, 309, 327], "varphi": [48, 314, 322], "kernel": [49, 50, 51, 52, 53, 54, 69, 76, 77, 79, 80, 81, 82, 199, 241, 258, 270, 287, 304, 309, 310, 326, 332], "_base": [49, 69], "observable_transform": [49, 50, 55, 57, 316, 317, 319, 327, 332], "embed": [49, 50, 108, 322], "introduct": [49, 135, 139, 258, 311, 320], "predefin": [49, 51, 331], "raw": [49, 55, 57, 67, 208, 327], "kvadmodel": [49, 258], "wenchong": 49, "tian": 49, "low": [49, 51, 160, 183, 184, 185, 253, 289, 313, 322], "2008": [49, 111, 162], "02962": 49, "singular_vector": 50, "kvad": [50, 250, 258], "version": [51, 63, 74, 91, 116, 199, 211, 224, 309, 312, 313, 317, 321, 322], "cca": [51, 258, 287, 304, 309, 310], "kernelccamodel": [51, 258], "franci": [51, 309, 321], "bach": [51, 309, 321], "michael": [51, 111, 309, 321], "jordan": [51, 309, 321], "independ": [51, 55, 96, 148, 149, 162, 230, 231, 232, 233, 234, 243, 309, 321, 327], "machin": [51, 309, 321], "research": [51, 217, 305, 309, 321], "jul": [51, 309, 321], "48": [51, 300, 309, 321, 328], "2002": [51, 309, 321], "harold": [51, 321, 331], "hotel": [51, 321, 331], "breakthrough": [51, 321, 331], "162": [51, 300, 321, 331], "190": [51, 300, 321, 331], "1992": [51, 321, 331], "kernelcca": [52, 250, 258, 294, 295, 317, 319, 321], "247": [53, 300, 309, 322], "265": [53, 300, 309, 322], "ingmar": [53, 322], "schuster": [53, 55, 309, 322, 327], "krikamol": [53, 322], "muandet": [53, 322], "eigendecomposit": [53, 322], "transfer": [53, 56, 227, 322, 332], "ilbert": [53, 322], "283": [53, 261, 265, 300, 322], "315": [53, 300, 322, 324], "2019": [53, 312, 321, 322, 331], "1007": [53, 322], "s00332": [53, 322], "019": [53, 322], "09574": [53, 322], "andrea": [53, 65, 307, 322, 332], "bittrach": [53, 322], "conform": [53, 57, 107, 112, 322, 323], "149": [53, 300, 322], "244109": [53, 322], "2018": [53, 60, 65, 307, 311, 322, 326, 331, 332], "kerneledmdmodel": [53, 258], "kedmd": [54, 319], "eigenfunct": [54, 55, 294, 295, 309, 315, 318, 321, 322, 327, 331], "kerneledmd": [54, 258, 319, 322], "kinetic_map": [55, 57, 327, 331], "contrast": 55, "maxim": [55, 111, 160, 176, 211, 307, 320, 321, 327, 331], "therefor": [55, 57, 86, 95, 102, 106, 107, 108, 149, 236, 305, 313, 323, 331, 332], "excel": 55, "thermostat": 55, "fact": [55, 102, 106, 107, 108, 159, 305, 327], "slowest": [55, 73, 102, 106, 107, 108, 149, 316, 327, 331], "relev": [55, 57, 102, 106, 107, 108, 144, 149, 314, 316, 328], "exactli": [55, 57, 58, 63, 102, 106, 107, 108, 109, 210, 222, 309, 328], "said": [55, 57, 327, 328, 330], "c0": [55, 176, 274, 277, 283, 301, 319], "keep": [55, 57, 186, 199], "kept": [55, 57, 106, 107, 309, 327, 331], "n_compon": [55, 57, 289, 303, 313, 327], "n_uncorrelated_featur": [55, 57], "specifi": [55, 57, 63, 74, 84, 86, 92, 95, 98, 103, 104, 105, 109, 110, 122, 124, 125, 131, 140, 145, 146, 150, 153, 154, 155, 163, 186, 189, 194, 235, 237, 242, 243, 253, 312, 323, 326, 327, 328, 332], "until": [55, 57, 102, 106, 107, 108, 313, 328], "exce": [55, 57, 239, 309], "fraction": [55, 57, 84, 86, 108, 170, 328], "subspac": [55, 57], "unless": [55, 57, 63, 91, 305, 328, 331], "exclus": [55, 57, 86, 195, 328], "commute_map": [55, 327], "c_0": [55, 327], "mu": [55, 57, 84, 102, 106, 107, 108, 113, 121, 123, 125, 127, 128, 131, 132, 137, 139, 142, 144, 147, 162, 163, 229, 313, 318, 327, 329], "relax": [55, 92, 95, 102, 105, 106, 107, 108, 123, 132, 133, 149, 309, 316, 320, 323, 327, 331], "ln": [55, 95, 102, 106, 107, 108, 323, 327], "reduct": [55, 57, 185, 258, 313, 327, 331], "good": [55, 111, 238, 277, 311, 312, 316, 320, 327], "autocovari": 55, "due": [55, 102, 106, 107, 108, 112, 218, 309, 313, 317, 320, 327, 328, 332], "finit": [55, 56, 57, 98, 135, 215, 216, 217, 218, 301, 309, 311, 321, 325, 331], "symmetri": [55, 163, 323], "explicitli": [55, 102, 106, 107, 108, 327, 330], "enforc": [55, 63, 91, 96, 151, 327], "signal": [55, 102, 106, 107, 108, 110, 309, 327], "shown": [55, 57, 85, 111, 112, 222, 297, 313, 330, 331], "invok": [55, 63, 65, 312], "model_onedim": 55, "projected_data": 55, "assert_equ": [55, 85], "model_var": 55, "brief": 55, "explain": [55, 312, 326, 327, 331], "why": 55, "outperform": 55, "extract": [55, 91, 96, 98, 102, 106, 107, 108, 325], "reaction": [55, 84, 116, 121, 166, 169, 170, 171, 236, 258], "look": [55, 63, 86, 133, 143, 149, 194, 196, 308, 309, 313, 315, 316, 318, 326, 329], "covariancekoopmanmodel": [55, 57, 73, 74, 102, 106, 107, 108, 258], "guillermo": [55, 327], "rez": [55, 327], "hern": [55, 327], "\u00e1": [55, 327], "ndez": [55, 327], "giorgino": [55, 327], "gianni": [55, 327], "de": [55, 85, 305, 312, 327, 330], "fabritii": [55, 327], "identif": [55, 197, 199, 287, 304, 309, 310, 324, 325, 327], "139": [55, 91, 95, 98, 99, 107, 300, 320, 327], "07b604_1": [55, 327], "ralf": [55, 327], "banisch": [55, 327], "commut": [55, 327], "5620": [55, 327], "5630": [55, 327], "lutz": [55, 309, 327], "molgedei": [55, 309, 327], "heinz": [55, 309, 327], "mixtur": [55, 101, 289, 309, 313, 327], "delai": [55, 309, 327], "letter": [55, 309, 327], "72": [55, 300, 309, 327], "3634": [55, 309, 327], "1994": [55, 309, 327], "christian": [55, 91, 320, 327], "schwant": [55, 327], "vijai": [55, 74, 107, 163, 311, 327, 331], "pand": [55, 74, 107, 163, 311, 327, 331], "improv": [55, 309, 327], "reveal": [55, 309, 313, 314, 315, 317, 326, 327, 331, 332], "nativ": [55, 327], "fold": [55, 74, 116, 121, 164, 166, 169, 171, 327, 328], "ntl9": [55, 327], "2000": [55, 320, 324, 327, 328], "2009": [55, 84, 116, 121, 160, 163, 164, 166, 169, 170, 171, 172, 173, 311, 327, 328], "classmethod": [55, 57], "covariance_estim": [55, 57, 327, 331], "properli": [55, 57, 312, 327], "memori": [55, 57, 63, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 313, 317], "usag": [55, 57, 249, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "from_data": [55, 57, 95, 98, 99, 258], "run": [55, 57, 63, 95, 102, 106, 107, 108, 241, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 312, 329], "decreas": [55, 57, 86, 112, 125, 127, 170, 194, 196], "load": [55, 57, 111, 309, 316, 317, 322], "individu": [55, 57, 63, 74, 86, 107, 123, 132, 133, 143, 150, 190, 235, 242, 305, 316], "timeshifted_split": [55, 57, 258, 309], "chunksiz": [55, 57, 211, 309], "joint_model": [55, 57], "fit_from_covari": [55, 57], "fit_from_timeseri": [55, 57], "dispatch": [55, 57, 76, 77, 78, 79, 80, 81, 86, 226, 308], "insid": [55, 57, 103, 111, 195, 241, 308, 315], "unscal": [55, 327, 331], "As": [55, 312, 313, 320, 324, 327, 328, 330, 331], "timescale_i": 55, "thereof": [56, 95, 109, 323], "upon": [57, 108, 194, 196, 331], "induc": [57, 313, 330, 331], "wrt": [57, 199], "convent": [57, 142, 222], "densiti": [57, 94, 102, 106, 107, 108, 241, 274, 277, 283, 284, 287, 304, 309, 310, 322, 329, 331], "visit": [57, 83, 86, 90, 95, 121, 239, 283, 324, 329, 330, 331], "infinitesim": 57, "phase": 57, "earlier": 57, "action": [57, 312, 331], "dy": [57, 331], "mid": [57, 95, 103, 236, 309, 311, 318, 320, 323, 325, 328, 330, 331], "situat": [57, 143, 320], "irrevers": 57, "stationari": [57, 83, 84, 91, 92, 95, 96, 98, 99, 102, 104, 105, 106, 107, 108, 109, 115, 116, 125, 127, 128, 131, 137, 139, 142, 144, 145, 147, 149, 160, 162, 163, 166, 169, 171, 194, 196, 218, 236, 238, 274, 277, 296, 309, 318, 323, 324, 331], "superposit": 57, "ansatz": [57, 309, 319, 331], "chi": [57, 95, 317, 319, 331, 332], "freedom": [57, 159], "exclud": [57, 92, 95, 105, 109, 312, 328], "next": [57, 89, 121, 239, 307, 309, 325, 328], "best": [57, 199, 314, 317, 325, 331, 332], "prime": [57, 321], "blocksiz": [58, 74, 319], "slide": [58, 74, 85, 86, 109, 110, 111, 112, 151, 160, 210, 317, 318, 319, 323, 328, 330], "random_st": [58, 59, 74, 211, 240, 282, 289, 313, 319], "uncorrel": [58, 85, 86, 89, 91, 95, 96, 98, 109, 111, 112, 162, 330], "fragment": [58, 74, 328], "Will": [58, 74, 91], "longer": [58, 86, 91, 95, 96, 98, 102, 106, 107, 108, 149, 310, 316, 330], "These": [58, 65, 86, 111, 308, 309, 311, 322, 323, 325, 329, 330, 331, 332], "overlap": [58, 74, 112, 309], "conserv": [58, 149, 165, 167, 328], "count": [58, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 131, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 258, 293, 311, 317, 319, 323, 328, 329], "dtraj": [58, 74, 85, 86, 88, 89, 90, 91, 92, 95, 96, 98, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 148, 151, 238, 240, 270, 271, 274, 277, 279, 288, 290, 292, 293, 295, 300, 316, 317, 318, 319, 326, 329, 332], "randomli": [58, 74, 100, 148, 149, 313], "randomst": [58, 59, 74, 211, 282, 289, 313, 314, 315, 317], "decod": [60, 61, 62, 64, 326], "optim": [60, 62, 63, 65, 66, 83, 102, 111, 115, 141, 160, 163, 194, 196, 197, 199, 241, 298, 313, 317, 319, 320, 321, 323, 325, 326, 331, 332], "adam": [60, 62, 65, 317, 321], "learning_r": [60, 62, 65, 316, 319, 326, 332], "0003": 60, "cpu": [60, 63, 66, 316, 317, 326, 332], "autoencod": [60, 61, 62, 64, 258, 307], "torch": [60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 308, 316, 317, 319, 326, 332], "nn": [60, 61, 62, 63, 64, 65, 66, 316, 317, 319, 326, 332], "sgd": 60, "rmsprop": 60, "lr": [60, 142], "rate": [60, 62, 65, 84, 136, 160, 169, 236, 258, 317, 328], "karpathi": 60, "christoph": [60, 110, 111, 113, 307, 311, 326, 329], "wehmey": [60, 110, 111, 113, 307, 311, 326, 329], "chem": [60, 156, 162, 307, 326], "phy": [60, 156, 162, 166, 307, 326], "148": [60, 300, 307, 326], "241703": [60, 307, 326], "jun": [60, 307, 326], "1063": [60, 307, 321, 326], "5011399": [60, 307, 326], "evaluate_loss": [60, 62], "tensor": [60, 62, 63, 65, 66, 67, 68, 71, 72, 81, 103, 152, 161, 317, 326, 332], "loss": [60, 62, 65, 72, 317, 326], "network": [60, 61, 62, 63, 64, 65, 66, 84, 102, 106, 107, 108, 116, 166, 170, 189, 194, 196, 236, 239, 253, 255, 258, 287, 304, 307, 309, 310, 317, 326, 328, 332], "taemodel": [60, 64, 258], "data_load": [60, 62, 65], "dataload": [60, 62, 65, 316, 317, 319, 326, 332], "n_epoch": [60, 62, 65, 316, 317, 319, 326, 332], "validation_load": [60, 62, 65, 316, 326, 332], "reset": [60, 62], "loader": [60, 62, 207, 316, 317, 326, 332], "epoch": [60, 62, 65, 317], "mnone": [60, 62], "setup_optim": [60, 62, 65], "pytorch": [60, 62, 65, 81, 82, 207, 249, 250, 258, 307, 316, 326, 332], "float32": [60, 61, 62, 64, 65, 66, 93, 269, 316, 317, 319, 326, 332], "float64": [60, 62, 63, 65, 93, 113], "train_loss": [60, 62, 326], "empti": [60, 62, 65, 112, 191, 192, 208, 209, 268, 314, 319, 327], "validation_loss": [60, 62, 326], "latent": [61, 62, 64, 307, 326], "datatyp": [61, 63, 207, 209], "tae": [61, 62, 258, 326], "latent_cod": [61, 64], "represent": [61, 63, 64, 102, 106, 107, 108, 194, 196, 327, 331, 332], "0005": [62, 65], "kld": 62, "tvaemodel": [62, 258], "reconstruct": [62, 319, 326], "activ": [63, 83, 91, 95, 102, 106, 107, 108], "elu": [63, 316, 317], "mlp": [63, 66, 319, 326, 332], "add_modul": 63, "child": 63, "fn": 63, "recurs": 63, "submodul": 63, "children": 63, "init": [63, 91, 95, 98, 99, 100, 101, 271, 308, 320, 322], "no_grad": [63, 317], "init_weight": 63, "fill_": 63, "net": [63, 84, 164, 165, 166, 167, 168, 287, 296, 304, 310, 328], "sequenti": [63, 199, 314, 316, 317, 325, 326, 332], "in_featur": [63, 316, 326, 332], "out_featur": [63, 316, 326, 332], "bia": [63, 110, 111, 112, 113, 198, 300, 311, 316, 326, 329, 332], "bfloat16": 63, "cast": [63, 66, 295], "buffer": 63, "place": [63, 194, 196, 235, 289, 298, 308, 311, 312, 313, 328, 329, 331], "member": [63, 84, 92, 103, 105, 201], "buf": 63, "20l": 63, "1l": 63, "5l": 63, "immedi": [63, 224], "move": [63, 149, 300, 328, 329, 332], "cuda": [63, 316, 317, 326, 332], "gpu": [63, 317], "eval": [63, 181, 295, 317], "behavior": [63, 65, 103, 104, 108, 109, 110, 111, 235, 324, 325], "thei": [63, 70, 84, 86, 93, 96, 102, 106, 107, 108, 177, 211, 224, 239, 244, 252, 307, 309, 315, 316, 320, 323, 324, 325, 326, 328, 329], "affect": 63, "dropout": [63, 317], "batchnorm": 63, "etc": [63, 85, 111, 112, 328, 330], "equival": [63, 93, 94, 97, 222, 309, 321, 327], "local": [63, 96, 217, 241, 312, 313, 320, 329], "grad": 63, "comparison": [63, 258, 287, 304, 310], "confus": 63, "extra_repr": 63, "extra": 63, "To": [63, 101, 170, 222, 308, 313, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331], "own": [63, 317], "both": [63, 95, 102, 106, 107, 108, 111, 112, 113, 291, 309, 312, 314, 319, 323, 328], "multi": [63, 326, 329], "overridden": [63, 76, 77, 78, 79, 80, 81, 212], "although": [63, 313], "recip": 63, "within": [63, 66, 83, 86, 95, 111, 112, 117, 118, 119, 120, 211, 239, 314, 317, 324, 327, 330], "sinc": [63, 71, 74, 96, 98, 131, 241, 303, 309, 314, 316, 317, 321, 323, 326, 327, 331], "hook": 63, "silent": 63, "get_buff": 63, "target": [63, 84, 102, 106, 107, 108, 134, 139, 140, 188, 199, 326], "throw": 63, "docstr": 63, "get_submodul": 63, "explan": 63, "correctli": [63, 295], "fulli": [63, 83, 115, 160], "qualifi": 63, "referenc": [63, 187], "attributeerror": 63, "invalid": [63, 102, 106, 107, 108, 212, 319], "path": [63, 84, 95, 98, 102, 106, 107, 108, 116, 121, 166, 170, 171, 172, 173, 239, 258, 311, 317, 330], "resolv": [63, 85, 86, 88, 89, 92, 98, 255, 313, 316], "someth": [63, 235, 237, 242, 243, 323], "get_extra_st": 63, "state_dict": 63, "set_extra_st": 63, "build": [63, 104, 308, 309, 313, 318, 326], "pickleabl": 63, "ensur": [63, 91, 93, 95, 102, 106, 107, 108, 162, 312, 329], "serial": 63, "guarante": [63, 210, 222, 309], "break": 63, "pickl": 63, "get_paramet": 63, "sai": [63, 323, 325], "net_b": 63, "net_c": 63, "conv": 63, "conv2d": 63, "kernel_s": 63, "stride": [63, 85, 88, 89, 91, 95, 96, 98, 111, 112, 211, 241, 269, 321, 330, 331], "200": [63, 290, 300, 301, 315, 317, 319, 320], "diagram": [63, 305], "show": [63, 112, 195, 269, 274, 276, 277, 278, 282, 283, 284, 292, 294, 295, 297, 298, 299, 300, 303, 313, 316, 317, 328, 329, 330, 331], "would": [63, 98, 99, 112, 199, 222, 305, 308, 309, 312, 313, 320, 325, 326, 327, 331], "runtim": [63, 321], "queri": 63, "named_modul": 63, "abov": [63, 102, 104, 106, 107, 108, 199, 227, 231, 233, 312, 317, 320, 324, 325, 327, 328, 331], "ipu": 63, "load_state_dict": [63, 317], "strict": 63, "descend": [63, 87, 102, 106, 107, 108, 176, 181, 182], "kei": [63, 308, 317, 325], "persist": 63, "missing_kei": 63, "miss": [63, 328, 330], "unexpected_kei": 63, "unexpect": 63, "namedtupl": 63, "field": 63, "runtimeerror": [63, 95], "duplic": [63, 305], "idx": 63, "enumer": [63, 87, 188, 289, 297, 300, 311, 316, 318, 328, 329, 330], "named_buff": 63, "prefix": 63, "prepend": [63, 222], "running_var": 63, "named_children": 63, "conv4": 63, "conv5": 63, "memo": 63, "remove_dupl": 63, "named_paramet": 63, "register_backward_hook": 63, "removablehandl": 63, "deprec": [63, 74, 213], "favor": 63, "register_full_backward_hook": 63, "handl": [63, 81, 112, 219, 239, 267, 282, 295, 297, 317, 328, 331], "register_buff": 63, "running_mean": 63, "save": [63, 92, 95, 102, 106, 107, 108, 128, 230, 231, 232, 233, 234], "alongsid": [63, 313], "num_featur": 63, "register_forward_hook": 63, "signatur": 63, "won": 63, "inplac": [63, 235], "register_forward_pre_hook": 63, "gradient": [63, 82, 197, 198, 217, 235, 237, 241, 242, 243, 301], "grad_input": 63, "grad_output": 63, "reason": [63, 102, 106, 107, 108, 323, 325], "receiv": [63, 112, 312], "view": [63, 135, 149, 150, 154, 155, 190, 222, 288, 305], "similarli": [63, 123, 132, 313, 315, 323, 331], "caller": 63, "register_load_state_dict_post_hook": 63, "post": [63, 239, 305, 312], "incompatible_kei": 63, "modif": [63, 312], "thrown": 63, "clearn": 63, "avoid": [63, 98, 99], "register_modul": 63, "register_paramet": 63, "requires_grad_": 63, "requires_grad": 63, "autograd": 63, "help": [63, 311, 327], "freez": 63, "finetun": 63, "gan": 63, "share_memori": 63, "share_memory_": 63, "destin": 63, "keep_var": 63, "dictionari": [63, 308], "releas": 63, "design": [63, 308], "ordereddict": 63, "compos": [63, 205, 206, 208], "detach": 63, "non_block": 63, "memory_format": 63, "channels_last": 63, "complex": [63, 91, 95, 98, 99, 104, 107, 295, 320, 327, 328], "unchang": 63, "convert": [63, 86, 92, 94, 97, 105, 151, 188, 207, 209, 222, 224, 228, 332], "asynchron": 63, "host": [63, 308], "pin": 63, "below": [63, 86, 92, 95, 98, 149, 199, 222, 312, 313, 323, 327, 331], "desir": [63, 99, 102, 106, 107, 108, 127, 160, 200, 218, 239, 325, 326], "whose": [63, 175, 308, 325], "format": [63, 151, 188, 194, 196, 291, 317, 318, 319, 320, 331], "4d": 63, "1913": 63, "3420": 63, "5113": 63, "2325": 63, "gpu1": 63, "1914": 63, "5112": 63, "2324": 63, "float16": 63, "cdoubl": 63, "3741": 63, "2382": 63, "5593": 63, "4443": 63, "complex128": 63, "6122": 63, "1150": 63, "to_empti": 63, "dst_type": 63, "xpu": 63, "zero_grad": [63, 317], "set_to_non": 63, "context": [63, 65, 311], "tvae": [64, 258, 326], "reparametr": 64, "lobe": [65, 66, 316, 317, 319, 332], "lobe_timelag": [65, 66], "score_method": [65, 331], "score_mod": 65, "try": [65, 196, 241, 307, 313, 320, 326, 332], "neural": [65, 307, 317, 326, 332], "crisp": [65, 95, 295, 316, 317, 324], "softmax": [65, 316], "share": [65, 66, 190, 312, 332], "semi": [65, 186], "perturb": [65, 95, 102, 106, 107, 108, 152], "small": [65, 68, 70, 71, 86, 91, 104, 109, 163, 170, 194, 196, 217, 312, 316, 318, 319, 325], "sure": [65, 96, 98, 99, 164], "complet": [65, 84, 96, 110, 149, 155, 202, 305, 309, 316, 327, 331], "sym_invers": [65, 68, 71, 258], "strength": 65, "invert": [65, 70, 176, 182, 183, 184, 185, 321], "incom": 65, "mardt": [65, 307, 332], "luca": [65, 307, 332], "pasquali": [65, 307, 332], "natur": [65, 307, 320, 327, 332], "commun": [65, 307, 332], "vampnetmodel": [65, 258, 317], "train_score_callback": 65, "validation_score_callback": 65, "manag": [65, 326], "eg": 65, "partial": [65, 102, 106, 107, 108, 152, 222, 313], "meaning": [65, 109, 149, 312, 331], "validation_data": 65, "steer": 65, "train_scor": [65, 316, 317, 332], "validation_scor": [65, 316, 332], "vampnet": [66, 72, 258, 307], "One": [66, 85, 86, 111, 112, 163, 239, 241, 262, 273, 275, 286, 294, 306, 313, 316, 324, 328, 329, 330, 331], "api": [66, 110, 194, 196, 212, 308, 313, 314, 315, 320, 323, 324, 325, 326, 327, 328, 330, 332], "remove_mean": [67, 230, 231, 232, 233, 234], "trunc": [68, 70, 71, 72], "c_xx": [68, 230, 231, 233], "hermetian": [68, 71], "c00": [68, 331], "c0t": [68, 331], "ctt": [68, 331], "chi_x": [69, 317], "_kernel": 69, "gaussiankernel": [69, 81, 258, 294, 295, 317, 319, 321, 322], "mat": [70, 180, 186], "return_sqrt": 70, "root": [70, 104, 229, 330], "absolut": [70, 127, 165, 167, 176, 320], "x_inv": 70, "data_lag": [71, 72, 75, 207, 209, 294, 317, 321], "contribut": 71, "decorrel": [71, 104], "splitting_mod": 74, "blocksplit": 74, "idea": [74, 258, 313, 314], "divid": [74, 85, 86, 111, 112, 199, 238, 277, 296, 299, 328, 330, 331], "pointer": [74, 319], "consecut": [74, 327], "repetit": 74, "solid": 74, "vamp_scor": [74, 75, 258, 317], "blocksplit_dtraj": 74, "len": [74, 97, 104, 119, 120, 194, 196, 210, 215, 224, 238, 263, 264, 267, 268, 275, 276, 280, 281, 285, 295, 299, 300, 302, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 326, 327, 328, 329, 332], "multiscal": [74, 84, 107, 116, 121, 149, 160, 166, 170, 172, 173, 311, 328, 331], "635": [74, 107, 149, 331], "655": [74, 107, 149, 291, 304, 331], "robert": [74, 107, 135, 150, 153, 154, 155, 241, 331], "mcgibbon": [74, 107, 331], "142": [74, 107, 300, 331], "03b621_1": [74, 107, 331], "cdist": [76, 81], "kappa": [76, 77, 78, 79, 80, 81], "exp": [76, 77, 79, 113, 262, 317, 321, 325], "sum_k": [76, 104, 109, 113, 163], "x_k": 76, "y_k": 76, "bandwidth": [76, 77, 79, 81, 319, 321, 322], "kxy": [76, 77, 78, 79, 80, 81], "_evalu": [76, 77, 78, 79, 80, 81], "intend": [76, 77, 78, 79, 80, 81, 305], "data_1": [76, 77, 78, 79, 80, 81], "data_2": [76, 77, 78, 79, 80, 81], "t_1": [76, 77, 78, 79, 80, 81, 102, 106, 107, 108, 325], "t_2": [76, 77, 78, 79, 80, 81, 325], "y_j": [76, 77, 78, 79, 80, 81, 321, 322], "gramian": [76, 77, 78, 79, 80, 81], "gram": [76, 77, 78, 79, 80, 81, 321, 322], "valid_impl": [76, 81], "binomi": [76, 81], "sigma_1": [77, 331], "sigma_d": 77, "laplacian": 79, "_2": [79, 104, 109, 163, 321], "inhomogen": [80, 317, 331], "polynomi": [80, 197, 198, 319, 321, 325], "even": [82, 98, 112, 186, 311, 314, 331], "still": [82, 85, 102, 106, 107, 108, 109, 165, 167, 194, 196, 312, 313, 328], "usabl": 82, "penalti": 82, "transition_matrix_coars": 83, "pi_coars": 83, "membership": [83, 95, 99, 102, 106, 107, 108, 115, 141, 297, 317, 320, 324, 328], "metastable_distribut": [83, 95, 102, 106, 107, 108, 324], "pcca": [83, 98, 99, 102, 106, 107, 108, 141, 194, 251, 258, 287, 290, 304, 310, 311, 320, 328], "connect": [83, 86, 87, 92, 95, 98, 104, 109, 110, 112, 115, 135, 144, 150, 153, 154, 155, 239, 258, 312, 323, 324, 328, 329, 330], "disconnect": [83, 95, 109, 115], "perfect": [83, 115], "coars": [83, 84, 95, 98, 99, 102, 106, 107, 108, 164, 194, 196, 258, 290, 311, 313, 318, 320], "markovstatemodel": [83, 84, 92, 95, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 188, 196, 236, 238, 239, 258, 283, 296, 300, 311, 320, 323, 328, 329], "grain": [83, 84, 95, 98, 99, 102, 106, 107, 108, 164, 189, 194, 196, 258, 311, 320, 325], "susanna": [83, 98, 99, 107, 115, 141, 311, 320, 324], "\u00f6": [83, 98, 99, 107, 115, 123, 132, 133, 141, 143, 311, 320, 324], "blitz": [83, 98, 99, 107, 115, 141, 311, 320, 324], "marcu": [83, 98, 99, 107, 115, 141, 311, 320, 324], "weber": [83, 98, 99, 107, 115, 141, 311, 320, 324], "fuzzi": [83, 95, 98, 99, 107, 115, 141, 311, 316, 320, 324], "classif": [83, 98, 99, 107, 115, 141, 311, 319, 320, 324], "advanc": [83, 98, 99, 107, 115, 141, 258, 311, 320, 324], "147": [83, 98, 99, 107, 115, 141, 300, 311, 320, 324], "179": [83, 98, 99, 107, 115, 141, 300, 311, 320, 324], "recommend": [83, 85, 91, 95, 102, 106, 107, 108, 109, 111, 112, 123, 125, 127, 132, 133, 142, 144, 147, 330], "visual": [83, 95, 188, 194, 196, 299, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 331, 332], "quantiti": [83, 84, 92, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 201, 311, 320, 323, 324, 328], "emploi": [83, 95, 311, 324, 325], "coarse_grained_stationary_prob": [83, 324], "coarse_grained_transition_matrix": [83, 324], "n_metast": 83, "belong": [83, 95, 102, 106, 107, 108, 112, 307, 320, 323, 327, 330], "bayesian": [83, 85, 91, 92, 95, 96, 98, 104, 105, 107, 111, 112, 226, 227, 251, 258, 293, 316, 330], "p_out": 83, "microst": [83, 121, 139, 141, 147, 150, 151, 238, 320, 324, 328], "source_st": [84, 102, 106, 107, 108, 116, 296], "target_st": [84, 102, 106, 107, 108, 116, 296], "net_flux": [84, 194, 296, 299, 328], "stationary_distribut": [84, 102, 106, 107, 108, 115, 116, 236, 274, 277, 323], "qminu": [84, 116, 166, 169, 171], "qplu": [84, 116, 166], "gross_flux": [84, 188, 296, 299, 328], "reactiv": [84, 102, 106, 107, 108, 116, 188, 194, 258, 299], "flux": [84, 102, 106, 107, 108, 116, 188, 194, 196, 236, 239, 258, 287, 296, 304, 310, 311], "tpt": [84, 102, 106, 107, 108, 116, 166, 171, 188, 251, 328], "sink": [84, 173], "intermedi": [84, 239, 309, 328], "node": [84, 154, 188, 189, 194, 196, 216, 217, 330], "committor": [84, 102, 106, 107, 108, 116, 122, 166, 171, 194, 236, 258, 296], "edg": [84, 95, 150, 153, 154, 155, 188, 189, 239, 296, 328, 330], "unnecessari": [84, 102, 106, 107, 108], "back": [84, 86, 107, 188, 300, 307, 308, 311, 315, 317, 319, 320, 327, 328, 329, 330], "gross": [84, 166, 172, 188, 287, 296, 304, 310, 328], "pathwai": [84, 102, 106, 107, 108, 112, 116, 121, 164, 166, 169, 171, 258], "passag": [84, 102, 106, 107, 108, 139, 140, 169, 258, 311, 328], "tool": [84, 86, 110, 116, 125, 127, 135, 136, 137, 138, 142, 144, 147, 207, 252, 258, 311, 312, 313, 321, 331], "educt": 84, "product": [84, 95, 102, 106, 107, 108, 112, 162, 168, 169, 171, 186, 215, 236, 321, 325], "reactive_flux": [84, 102, 106, 107, 108, 188, 258, 296, 299, 328], "philipp": [84, 116, 121, 311, 328], "metzner": [84, 116, 121, 166, 170, 172, 173, 311, 328], "eric": [84, 116, 121, 160, 311, 328], "vanden": [84, 116, 121, 160, 164, 166, 169, 170, 171, 172, 173, 311, 328], "eijnden": [84, 116, 121, 160, 164, 166, 169, 170, 171, 172, 173, 311, 328], "1192": [84, 116, 121, 166, 170, 172, 173, 311, 328], "1219": [84, 116, 121, 166, 170, 172, 173, 311, 328], "coarse_grain": [84, 328], "user_set": 84, "shall": [84, 312], "distinguish": [84, 135, 312, 321, 327], "remaind": [84, 328, 331], "reflect": [84, 260, 261, 269, 271, 282, 303, 309, 318, 332], "backward_committor": [84, 166, 328], "necessari": [84, 170, 222, 312, 327], "preserv": [84, 102, 106, 107, 108, 222, 241], "major_flux": 84, "main": [84, 258, 323], "compris": 84, "request": [84, 86, 96, 104, 320, 331], "maxit": [84, 96, 103, 104, 109, 111, 160, 163, 170, 217, 300, 328, 329], "decompos": [84, 109, 170, 314], "assembl": [84, 170], "capac": [84, 170, 328], "forward_committor": [84, 166, 296, 328], "rightarrow": [84, 85, 110, 328, 330], "intermediate_st": 84, "mfpt": [84, 102, 104, 106, 107, 108, 140, 323, 328], "n_state": [84, 85, 86, 88, 89, 94, 95, 102, 103, 106, 107, 108, 110, 188, 239, 274, 277, 317, 318, 319, 324, 328, 330], "reactant": [84, 169, 171, 173, 236], "total_flux": [84, 171, 328], "count_mod": [85, 104, 109, 110, 111, 112, 288, 293, 319, 323, 330], "transitioncountmodel": [85, 95, 98, 102, 103, 104, 106, 107, 108, 109, 112, 113], "herebi": [85, 312], "decid": [85, 308, 312], "overestim": [85, 330], "likelihood": [85, 86, 91, 94, 95, 96, 98, 104, 107, 109, 111, 112, 113, 156, 160, 163, 195, 226, 258, 311, 320, 329, 330], "plai": [85, 330], "role": [85, 86, 330], "wrong": [85, 104, 111, 112, 323, 330], "uncertainti": [85, 86, 91, 102, 103, 104, 106, 107, 108, 111, 112, 162, 163, 320, 323, 330], "geometr": [85, 111, 112, 330], "subsampl": [85, 95, 111, 112, 330], "s_1": [85, 111, 112, 328, 330], "s_": [85, 111, 112, 152, 320, 328, 330], "s_2": [85, 111, 112, 328, 330], "t_": [85, 111, 112, 121, 135, 137, 139, 152, 156, 162, 263, 323, 328, 330], "consequ": [85, 331], "encount": [85, 238, 311, 328, 330], "portion": [85, 312], "sens": [85, 92, 308, 325, 331], "benjamin": [85, 91, 104, 107, 111, 163, 323, 330], "trendelkamp": [85, 91, 104, 111, 162, 163, 323, 330], "schroer": [85, 91, 104, 111, 162, 163, 323, 330], "143": [85, 91, 104, 111, 163, 300, 323, 330], "11b601_1": [85, 91, 104, 111, 163, 323, 330], "ineffici": [85, 149, 330], "http": [85, 194, 196, 212, 222, 312, 330], "public": [85, 241, 305, 312, 330], "mi": [85, 330], "fu": [85, 305, 330], "berlin": [85, 305, 330], "1699": [85, 330], "__init__": [85, 91, 103, 106, 308, 317], "deal": [85, 253, 309, 311, 312, 317, 328, 331], "lot": [85, 91, 128], "count_matrix": [85, 86, 87, 323, 330], "sparsiti": [85, 160, 163], "counting_mod": 86, "state_histogram": [86, 330], "state_symbol": [86, 108, 109, 328, 330], "count_matrix_ful": 86, "state_histogram_ful": 86, "submodel": [86, 92, 93, 94, 95, 97, 102, 105, 106, 107, 108, 109, 112, 258, 328, 329], "subselect": [86, 95, 98, 251, 330], "made": [86, 93, 94, 95, 97, 98, 104, 106, 109, 312, 327], "analyz": [86, 253, 311, 327, 331, 332], "connected_set": [86, 154, 330], "prune": 86, "mincount_connect": 86, "simpli": [86, 308, 325, 331], "subset": [86, 95, 102, 106, 107, 108, 109, 117, 120, 205, 206, 208, 327, 330], "fine": [86, 189, 318, 319, 325], "far": 86, "effective_count_matrix": 86, "histogram": [86, 90, 104, 106, 112, 191, 192, 218, 283, 284, 318, 322, 329, 330], "discretestatesmanag": [86, 93], "symbol": [86, 93, 95, 108, 109, 325, 329, 330], "iota": [86, 95, 239], "rang": [86, 94, 95, 222, 226, 227, 239, 260, 291, 299, 302, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 328, 329, 331, 332], "transitioncountestim": [86, 104, 109, 112, 288, 293, 316, 317, 318, 319, 323, 328, 330], "connectivity_threshold": [86, 87, 92, 95, 98, 109, 110, 330], "probability_constraint": 86, "sort_by_popul": 86, "regardless": 86, "increas": [86, 96, 112, 170, 194, 196, 309, 328], "n_states_ful": [86, 328], "commonli": [86, 102, 106, 107, 108, 309], "undirect": [86, 87, 95, 104, 150, 153, 154, 155, 330], "graph": [86, 87, 92, 95, 135, 150, 153, 154, 155, 189, 260, 328, 330], "constraint": [86, 96, 104, 109, 162, 241, 323, 330], "decreasingli": 86, "submodel_largest": [86, 92, 95, 98, 288, 318, 319, 328, 330], "count_matrix_histogram": 86, "magnitud": [86, 125, 177, 181, 199, 241, 331], "is_connect": 86, "states_to_symbol": [86, 328], "largest": [86, 90, 91, 92, 95, 96, 98, 104, 107, 109, 112, 114, 149, 150, 154, 155, 177, 182, 184, 186, 328, 329, 330], "elimin": 86, "fall": [86, 107, 112], "disregard": [86, 92, 98, 199], "_state": [86, 92, 98, 104], "_full": [86, 92, 98], "popul": [86, 92, 95, 98, 238, 274, 313, 316, 330], "symbols_to_st": [86, 328, 330], "present": [86, 102, 106, 107, 108, 121, 148, 149, 241, 305, 307, 311, 312, 314, 322, 328, 330, 331], "discard": [86, 91, 295, 320, 324, 330], "happen": [86, 170], "transform_discrete_trajectories_to_submodel": [86, 319, 330], "curat": [86, 95], "unconsid": [86, 95], "possibli": 86, "attent": [86, 312], "could": [86, 94, 102, 106, 107, 108, 118, 120, 189, 316, 321, 327, 328, 329, 332], "across": [86, 235, 242, 331], "irrespect": [86, 163], "is_full_model": 86, "selected_count_fract": 86, "selected_state_fract": 86, "state_symbols_with_blank": 86, "plu": [86, 303, 314, 328], "total_count": 86, "visited_set": 86, "boolean": [87, 102, 106, 107, 108, 120, 166, 184, 194, 199], "seek": [87, 197, 309, 316, 325], "compute_effective_strid": [88, 258], "lag_observ": 88, "stridden": 88, "nonrevers": [89, 91, 162, 163, 309], "neglect": [89, 91, 96, 98], "ignore_neg": 90, "occurr": [90, 112, 117, 118, 119, 120], "hmm": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 196, 258, 312, 320], "initial_hmm": [91, 320], "hiddenmarkovmodel": [91, 92, 96, 98, 99, 100, 101, 102, 106, 107, 108, 258, 320], "n_transition_matrix_sampling_step": 91, "initial_distribution_prior": 91, "transition_matrix_prior": 91, "store_hidden": [91, 92], "prior": [91, 92, 93, 96, 98, 104, 105, 157, 158, 159, 162, 211, 241, 258, 309, 311, 319, 320, 323, 328], "accordingli": [91, 94, 96, 98], "p0": [91, 95, 102, 106, 107, 108, 130, 133, 143], "dirichlet": [91, 93, 94, 149, 161, 162], "conjug": [91, 93], "prod_i": 91, "_i": [91, 121, 176, 313, 315, 327, 328], "a_i": [91, 102, 106, 107, 108, 128, 129], "n_i": [91, 102, 106, 107, 108, 118, 148, 149], "initial_model": [91, 96, 320], "mle": [91, 93, 160, 163, 311], "sooner": 91, "later": [91, 196, 312, 327, 330], "soon": [91, 327], "drawn": [91, 95, 102, 106, 107, 108, 187, 188, 194, 196, 211, 239, 313, 319, 320, 323], "sampler": [91, 162, 317], "recov": [91, 113, 258, 316, 320], "never": [91, 309], "serv": [91, 314], "regim": [91, 331], "neglig": [91, 182, 186], "posterior": [91, 92, 104, 105, 161, 162, 320, 323], "b_": [91, 98, 157, 158, 159], "broadcast": [91, 222], "b_ij": [91, 159], "occur": [91, 93, 94, 97, 111, 112, 113, 114, 117, 118, 119, 120, 305, 328, 330], "bayesianhmmposterior": [91, 258, 320], "hidden_state_trajectories_sampl": [91, 92], "balanc": [91, 96, 162, 163, 309, 323, 324, 327, 328, 331], "confid": [91, 92, 95, 103, 104, 105, 190, 195, 201, 204, 225, 228, 251, 320, 323], "global": [91, 96, 98, 99, 308, 317, 329], "nuria": [91, 95, 98, 99, 107, 320], "plattner": [91, 95, 98, 99, 107, 320], "molecul": [91, 95, 98, 99, 102, 106, 107, 108, 316, 320], "18": [91, 95, 98, 99, 107, 260, 289, 299, 300, 313, 316, 317, 319, 320, 323, 324, 327, 328, 329, 331, 332], "11b609_1": [91, 95, 98, 99, 107, 320], "phillip": [91, 320], "elm": [91, 320], "kaiser": [91, 320], "aaron": [91, 320], "ewal": [91, 320], "wice": [91, 320], "susan": [91, 320], "marquse": [91, 320], "carlo": [91, 320, 323], "bustamant": [91, 320], "nina": [91, 320], "singhal": [91, 320], "hinrich": [91, 320], "spectroscopi": [91, 102, 106, 107, 108, 320], "character": [91, 121, 314, 320], "measur": [91, 103, 197, 198, 218, 247, 298, 320, 325], "1108": [91, 320], "1430": [91, 320], "n_hidden_st": [91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 320], "prior_submodel": 91, "bhmm": [91, 312], "n_thin": [91, 320], "burn": 91, "gibb": [91, 104, 162, 320, 323], "bayesianhmm": [92, 95, 258, 320], "err_est": [92, 95, 102, 105, 106, 107, 108, 225, 227], "evaluate_sampl": [92, 105], "delimit": [92, 105, 201], "deeper": [92, 105], "hierarchi": [92, 105], "gather_stat": [92, 104, 105, 320, 323], "store_sampl": [92, 104, 105, 201, 323], "about": [92, 102, 105, 106, 107, 108, 112, 198, 201, 311, 315, 319, 322, 323, 331], "quantitystatist": [92, 105, 258], "ob": [92, 93, 94, 95, 97, 133, 143, 295, 313], "discreteoutputmodel": [92, 95, 97, 98, 99, 252, 258], "observe_nonempti": [92, 95], "submodel_popul": [92, 95], "output_prob": [93, 95], "ignore_outli": [93, 94, 97], "discrete_states_manag": 93, "classic": [93, 326], "literatur": [93, 311], "b_i": 93, "n_": [93, 94, 95, 97, 188, 313, 328], "a_": [93, 325, 330], "outlier": [93, 94, 97], "t_k": [93, 94, 97], "outputmodel": [93, 94, 95, 252, 258], "generate_observation_trajectori": [93, 94, 97], "hidden_state_trajectori": [93, 94, 95, 97], "o_t": [93, 94, 97], "_t": [93, 97, 176, 331], "s_t": [93, 94, 97, 323], "map_observations_to_submodel": [93, 95], "sub": [93, 95, 291, 309], "mapped_observ": 93, "observations_per_st": [93, 94, 97], "n_k": [93, 94, 329], "output_model": [93, 94, 95], "asarrai": [93, 300], "to_state_probability_trajectori": [93, 94, 97], "entir": [93, 161, 328], "p_o": 93, "meant": [93, 94, 97, 162, 194, 196], "worst": [93, 94, 97], "unhandl": [93, 94, 97], "crash": [93, 94, 97, 98, 99], "n_observable_st": [93, 94, 97], "contin": [93, 94, 97, 116], "instabl": [94, 241, 324], "ntrajectori": 94, "nob": 94, "randn": 94, "my": 94, "randint": 94, "state_index": [94, 95], "p_t": [94, 97], "state_prob": [94, 95, 97, 316], "n_hidden": [94, 97], "deviat": [94, 104, 148, 149, 201, 319, 320, 323], "transition_model": [95, 320], "initial_distribut": 95, "initial_count": 95, "observation_symbol": 95, "observation_symbols_ful": 95, "macro": [95, 312, 320, 324], "micro": [95, 102, 106, 107, 108, 297, 320, 324, 328], "baum": [95, 96, 320], "welch": [95, 96, 320], "gamma": 95, "sort": [95, 102, 106, 107, 108, 150, 176, 181, 182], "metastable_from_data": [95, 99, 101, 258, 320], "metastable_from_msm": [95, 98, 101, 258, 320], "maximumlikelihoodhmm": [95, 258, 320], "collect_observations_in_st": 95, "retriev": [95, 104], "collected_observ": 95, "nsampl": [95, 104, 118, 120], "compute_observation_likelihood": [95, 320], "compute_viterbi_path": 95, "viterbi": 95, "done": [95, 102, 106, 107, 108, 111, 112, 176, 241, 320], "beforehand": 95, "correlation_ob": 95, "maxtim": [95, 102, 106, 107, 108], "ncv": [95, 102, 106, 107, 108, 123, 125, 127, 132, 133, 142, 144, 147], "experi": [95, 102, 103, 106, 107, 108, 123, 132, 133, 143, 316], "expectation_ob": 95, "fingerprint_correlation_ob": 95, "fingerprint": [95, 102, 106, 107, 108, 123, 132, 133, 143, 258], "fingerprint_correl": [95, 102, 106, 107, 108, 133], "fingerprint_relaxation_ob": 95, "fingerprint_relax": [95, 102, 106, 107, 108, 132], "nonempty_ob": 95, "p_k": [95, 102, 106, 107, 108, 241], "p_0": [95, 102, 106, 107, 108], "pk": [95, 102, 106, 107, 108], "relaxation_ob": 95, "sample_by_observation_prob": 95, "effici": [95, 102, 103, 104, 106, 107, 108, 109, 110, 111, 135, 150, 153, 154, 155, 163, 180, 206, 322], "htraj": 95, "otraj": 95, "states_largest": 95, "strong": [95, 330], "weak": [95, 148, 149, 330], "states_popul": 95, "don": [95, 230, 231, 232, 233, 234, 313], "submodel_disconnect": 95, "bare": 95, "strongli": [95, 112, 218, 330], "weakli": [95, 330], "connectivii": 95, "sub_hmm": 95, "transform_discrete_trajectories_to_observed_symbol": 95, "transition_matrix_ob": 95, "parametr": [95, 213, 317], "kolmogorow": 95, "neq": [95, 136, 139, 151, 161, 166, 328], "p_c": 95, "_c": 95, "pi_c": 95, "count_model": [95, 102, 106, 107, 108, 112, 113, 318, 319, 323, 328], "eigenvectors_left_ob": 95, "eigenvectors_right_ob": 95, "constructor": [95, 102, 106, 107, 108, 202], "lifetim": 95, "ii": 95, "come": [95, 104, 149, 236, 313, 326, 327, 328], "metastable_assign": [95, 102, 106, 107, 108], "pout": 95, "metastable_membership": [95, 102, 106, 107, 108], "metastable_set": [95, 102, 106, 107, 108], "n_observation_st": [95, 100, 320], "algo": 95, "stationary_distribution_ob": 95, "transition_count": [95, 112], "accuraci": [96, 160, 318], "maxit_revers": 96, "heurist": [96, 98, 99, 101, 104, 320], "routin": [96, 111, 127, 197, 253, 319, 325], "prone": [96, 320], "stuck": [96, 98, 99, 313, 320], "optima": [96, 313, 320], "what": [96, 111, 112, 160, 227, 308, 309, 326, 328, 329, 330, 331], "em": 96, "successfulli": 96, "warn": [96, 160, 163, 213, 230, 231, 288, 313, 321, 329], "1000000": [96, 104, 109, 163, 283], "leonard": [96, 320], "alonzo": [96, 320], "eagon": [96, 320], "inequ": [96, 320], "probabilist": [96, 320], "ecologi": [96, 320], "bulletin": [96, 320], "societi": [96, 241, 311, 320], "73": [96, 300, 317, 320], "360": [96, 300, 320], "363": [96, 300, 320], "1967": [96, 320], "fixed_initial_distribut": 96, "fixed_stationary_distribut": 96, "basic": [97, 314, 326, 327], "suppos": [97, 102, 106, 107, 108, 308, 325], "gaussianoutputmodel": [97, 101, 252, 258], "separate_symbol": [98, 99], "unconnect": 98, "region": [98, 121, 277, 315, 316, 327], "populu": 98, "suffix": 98, "everyth": [98, 220, 313], "reversibli": 98, "rl": [98, 121, 157, 158, 159, 166], "ji": [98, 111, 137, 158, 160, 162, 163, 166, 172, 323, 324, 328], "artif": 98, "reversib": [98, 99], "nonzero": [98, 99, 299, 325, 328], "renorm": [98, 99], "suboptim": [98, 99], "hmm_init": [98, 99, 101], "draw": [100, 104, 110, 162, 188, 193, 196, 239, 313, 317], "init_hmm": 100, "transition_matrix_kwarg": 101, "transition_matrix": [101, 102, 104, 106, 107, 108, 116, 236, 238, 283, 300, 317, 318, 320, 323, 324, 329, 332], "n_eigenvalu": [102, 106, 107, 108], "amm_optimizer_st": 102, "augment": [102, 103, 311], "simon": [102, 103, 311], "olsson": [102, 103, 311], "proceed": [102, 103, 107, 111, 113, 116, 121, 123, 132, 133, 143, 197, 199, 311, 313, 320, 325, 328, 329], "nation": [102, 103, 107, 111, 113, 116, 121, 123, 132, 133, 143, 197, 199, 311, 325, 328, 329], "academi": [102, 103, 107, 111, 113, 116, 121, 123, 132, 133, 143, 197, 199, 311, 325, 328, 329], "114": [102, 103, 300, 311], "31": [102, 103, 300, 311, 317, 331], "8265": [102, 103, 311], "8270": [102, 103, 311], "n_metastable_set": [102, 105, 106, 107, 108, 288, 290, 324], "known": [102, 106, 107, 108, 149, 321, 323, 328], "themselv": [102, 106, 107, 108, 308], "plot_ck_test": [102, 106, 107, 108, 225, 227, 258, 288, 304, 316], "committor_backward": [102, 106, 107, 108, 236], "committor_forward": [102, 106, 107, 108, 236], "p_fold": [102, 106, 107, 108], "compute_state_indic": [102, 106, 107, 108], "inact": [102, 106, 107, 108], "state_indic": [102, 106, 107, 108], "compute_trajectory_weight": [102, 106, 107, 108, 218, 292], "reweigh": [102, 106, 107, 108], "t_n": [102, 106, 107, 108, 325], "w_": [102, 106, 107, 108, 133, 143], "interest": [102, 104, 106, 107, 108, 148, 149, 204, 311, 313, 317, 328], "rangl": [102, 106, 107, 108, 123, 127, 132, 133, 309], "rangle_t": [102, 106, 107, 108], "fluoresc": [102, 106, 107, 108], "neutron": [102, 106, 107, 108], "scatter": [102, 106, 107, 108, 241, 260, 263, 267, 268, 271, 282, 289, 294, 295, 303, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 326, 327, 328, 331, 332], "want": [102, 104, 106, 107, 108, 164, 218, 318, 329], "accur": [102, 106, 107, 108, 241], "acf_a": [102, 106, 107, 108], "ccf_": [102, 106, 107, 108], "acf": [102, 106, 107, 108], "stand": [102, 106, 107, 108, 325], "ccf": [102, 106, 107, 108], "long": [102, 106, 107, 108, 208, 209, 311, 322, 327], "infinit": [102, 106, 107, 108, 328, 331], "agre": [102, 106, 107, 108], "ceil": [102, 106, 107, 108], "almost": [102, 106, 107, 108, 182, 230, 231, 232, 233, 234, 313, 314, 324], "lanczo": [102, 106, 107, 108, 123, 125, 127, 132, 133, 142, 144, 147, 177], "plot": [102, 106, 107, 108, 110, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 214, 218, 225, 226, 227, 228, 239, 241, 258, 260, 262, 264, 270, 275, 278, 279, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 298, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "matplotlib": [102, 106, 107, 108, 187, 188, 189, 191, 192, 193, 194, 195, 196, 239, 241, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "99": [102, 106, 107, 108, 300, 328], "pylab": [102, 106, 107, 108], "plt": [102, 106, 107, 108, 189, 193, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "eigenvectors_left": [102, 106, 107, 108, 318], "l_ij": [102, 106, 107, 108], "eigenvectors_right": [102, 106, 107, 108, 319], "r_ij": [102, 106, 107, 108], "val": [102, 106, 107, 108, 128], "fo": [102, 106, 107, 108, 128], "sum_i": [102, 106, 107, 108, 123, 128, 132, 133, 143, 148, 171, 180, 241, 313, 328, 331], "pi_i": [102, 106, 107, 108, 163, 166, 171, 323, 324, 328], "amplitud": [102, 106, 107, 108, 132, 133, 235], "nhidden": [102, 106, 107, 108], "return_estim": [102, 106, 107, 108], "pccamodel": [102, 106, 107, 108, 258], "pcca_obj": [102, 106, 107, 108], "reactiveflux": [102, 106, 107, 108, 116, 194, 258, 299, 328], "variou": [102, 106, 107, 108, 253, 257, 319, 325], "tptobj": [102, 106, 107, 108], "ph": [102, 106, 107, 108], "pressur": [102, 106, 107, 108, 241], "rapid": [102, 106, 107, 108], "ensembl": [102, 104, 106, 107, 108, 112, 116, 121, 162, 163, 164, 166, 169, 171, 328, 329], "prepar": [102, 106, 107, 108], "toward": [102, 106, 107, 108, 116, 166, 188, 328, 331], "e_a": [102, 106, 107, 108], "special": [102, 106, 107, 108, 206, 258, 309, 328, 331], "submatrix": [102, 106, 107, 108, 155], "to_koopman_model": [102, 106, 107, 108], "analyt": [102, 106, 107, 108], "update_stationary_distribut": [102, 106, 107, 108], "update_transition_matrix": [102, 106, 107, 108], "cach": [102, 103, 106, 107, 108, 212], "deriv": [102, 103, 104, 106, 107, 108, 109, 110, 111, 197, 198, 215, 216, 217, 287, 298, 304, 310, 321, 322, 325, 328, 331], "empirical_koopman_model": [102, 106, 107, 108], "i1": [102, 106, 107, 108], "1i": [102, 106, 107, 108], "ni": [102, 106, 107, 108], "has_count_model": [102, 106, 107, 108], "is_real": [102, 106, 107, 108], "mu_n": [102, 106, 107, 108], "optimizer_st": 102, "transition_matrix_toler": [102, 106, 107, 108, 109, 116], "expectations_by_st": 103, "experimental_measur": 103, "experimental_measurement_weight": 103, "support_ci": 103, "max_cach": 103, "3000": [103, 279, 317, 321], "conveni": [103, 151, 255, 313, 330, 332], "estimator_from_feature_trajectori": 103, "outsid": [103, 321, 328], "o_": 103, "pred": 103, "lagrang": [103, 113], "multipli": [103, 111, 112, 113], "megabyt": 103, "amm": 103, "parameter": [103, 239, 240, 320, 326, 327, 332], "augmentedmsm": 103, "recent": [103, 104, 109, 111], "convergence_criterion_lagrang": 103, "newton": [103, 160, 241], "algebra": [103, 104, 109, 110, 111, 324], "python": [103, 104, 109, 110, 111, 116, 160, 211, 222, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 313], "suggest": [103, 104, 109, 110, 111, 149, 241], "4000": [103, 104, 109, 110, 111], "much": [103, 104, 109, 110, 111, 149, 324, 327, 331], "support_confid": 103, "stationary_distribution_constraint": [104, 109, 323], "maxerr": [104, 109, 111, 163, 300], "08": [104, 107, 109, 111, 163, 300, 301, 304, 319], "nstep": [104, 162, 322], "unknown": [104, 112, 137, 149, 314, 320, 329], "intersect": 104, "exit": [104, 109, 111, 121, 163, 236], "ik": [104, 109, 160, 163], "track": [104, 109, 163], "qualit": [104, 303], "quantit": 104, "involv": [104, 331], "mm": 104, "70000001": 104, "16463699": 104, "135363": 104, "38169055": 104, "61830945": 104, "12023989": 104, "23690297": 104, "64285714": 104, "furthermor": [104, 305, 309, 311, 320, 323, 328, 330], "abl": [104, 262, 275, 305, 314, 330], "bayesianmsmposterior": [104, 258], "summari": [104, 331], "71108663": 104, "15947371": 104, "12943966": 104, "41076105": 104, "58923895": 104, "13079372": 104, "23005443": 104, "63915185": 104, "likewis": 104, "std": [104, 201, 313, 319], "13707029": 104, "09479627": 104, "09200214": 104, "15247454": 104, "07701315": 104, "09385258": 104, "1119089": 104, "And": [104, 109, 132, 133, 315, 316, 318, 320, 323, 326, 328, 330, 331], "control": [104, 112, 189, 239, 241, 309, 325], "percentil": 104, "conf": [104, 190, 204, 225], "stat": [104, 149, 166, 268, 270, 319, 320, 326, 332], "44083423": 104, "03926518": 104, "0242113": 104, "14102544": 104, "30729828": 104, "02440188": 104, "07629456": 104, "43682481": 104, "93571706": 104, "37522581": 104, "40180041": 104, "69307665": 104, "8649215": 104, "31029752": 104, "44035732": 104, "85994006": 104, "9049811296": 104, "9763615793248155": 104, "6540958274695701": 104, "26": [104, 149, 263, 300, 313, 317, 321, 328, 331], "295326015231058": 104, "909895469938899": 104, "sampledmsm": 104, "previous": [104, 109, 121, 313, 320, 328], "maximumlikelihoodmsm": [104, 106, 107, 108, 258, 290, 292, 317, 318, 319, 323, 324, 328, 332], "ignore_counting_mod": 104, "isn": 104, "famili": [104, 241, 307, 314, 320], "caution": [104, 324], "fit_from_count": [104, 109], "fit_from_discrete_timeseri": [104, 109], "discrete_timeseri": [104, 109], "heavili": [104, 327], "bias": [104, 112, 218, 309, 311, 327, 329], "fit_from_msm": 104, "append": [104, 222, 260, 282, 288, 293, 300, 317, 318, 328, 329], "constrain": [104, 109, 160, 325], "bayesianmsm": [105, 106, 107, 109, 258, 288, 293, 316, 323], "twostep_count_matric": 106, "oom_compon": 106, "oom_eigenvalu": 106, "oom_evalu": 106, "oom_information_state_vector": 106, "oomreweightedmsm": [106, 107], "decis": [106, 110, 149, 327], "oom": [106, 110], "oom_rank": 106, "oom_timescal": 106, "c2t": 106, "neig": 107, "doos": [107, 123, 132, 133, 143], "isabella": [107, 123, 132, 133, 143], "daidon": [107, 123, 132, 133, 143], "marc": [107, 123, 132, 133, 143], "llmann": [107, 123, 132, 133, 143], "marku": [107, 123, 132, 133, 143, 312], "sauer": [107, 123, 132, 133, 143], "jeremi": [107, 123, 132, 133, 143], "smith": [107, 123, 132, 133, 143], "probe": [107, 123, 132, 133, 143], "biomolecular": [107, 123, 132, 133, 143], "108": [107, 123, 132, 133, 143, 300], "4822": [107, 123, 132, 133, 143], "4827": [107, 123, 132, 133, 143], "lindner": 107, "zheng": 107, "yi": 107, "11b602_1": 107, "transition_matric": [108, 113], "behav": [108, 109, 227, 316, 324], "triplet": [108, 191], "switch": [108, 109], "model_index": 108, "mimic": 108, "indexerror": 108, "current_model": 108, "count_fract": [108, 328], "n_connected_msm": [108, 109], "state_fract": [108, 328], "allow_disconnect": [109, 317], "use_lcc": 109, "markovstatemodelcollect": [109, 111, 113, 258], "transient": 109, "level": [109, 193, 200, 207, 253, 275, 276, 280, 281, 282, 285, 300, 308, 311, 315, 317, 319, 320, 321, 322, 329, 332], "dummi": 109, "msm1": 109, "msm2": 109, "ultim": 109, "time_unit": 110, "nb": 110, "rank_mod": 110, "bootstrap_count": 110, "tol_rank": 110, "pretti": 110, "ax": [110, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 239, 260, 261, 263, 264, 267, 268, 270, 271, 274, 276, 277, 280, 281, 282, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332], "whitespac": 110, "permit": [110, 305, 312], "femtosecond": 110, "picosecond": 110, "nanosecond": 110, "microsecond": 110, "millisecond": 110, "bootstrap_traj": 110, "094104": [110, 311], "koopmanreweightedmsm": 110, "sklearn": [110, 197, 289, 298, 303, 313, 325, 327], "mbar": [111, 300, 329], "init_maxit": 111, "init_maxerr": 111, "track_log_likelihood": 111, "callback_interv": [111, 329], "paper": [111, 199], "biased_conf_energi": [111, 113, 300, 329], "f_i": [111, 113, 152, 325, 331], "thermodynam": [111, 112, 113, 300, 311, 329], "lagrangian_mult_log": [111, 113], "v_i": [111, 113, 127, 331], "logarithm": [111, 113, 160, 313], "modified_state_counts_log": [111, 113], "unsuccessfulli": 111, "significantli": [111, 327, 331], "speed": [111, 235, 317], "sum_j": [111, 121, 134, 138, 328], "c_ij": 111, "c_ji": 111, "1ee": 111, "down": [111, 325], "tramdataset": [111, 113, 258, 329], "trammodel": [111, 112, 258], "multiensembl": [111, 113, 311, 329], "113": [111, 113, 197, 199, 300, 311, 325, 329], "e3221": [111, 113, 311, 329], "e3230": [111, 113, 311, 329], "shirt": 111, "129": [111, 300, 313], "124105": 111, "suppli": [111, 160, 312], "bias_matric": [111, 112, 113, 300, 329], "ttraj": [111, 112], "inner": [111, 321], "n_therm_stat": [111, 112, 113], "replica": [111, 112, 311, 329], "exchang": [111, 112, 311, 329], "lie": [111, 112], "highest": [111, 112], "n_markov_st": [111, 112], "organ": [112, 308], "tram": [112, 113, 258, 287, 304, 310, 311], "infer": [112, 113, 160, 327], "swap": 112, "check_against_model": 112, "those": [112, 162, 163, 232, 233, 234, 305, 323], "encompass": 112, "restrict_to_largest_connected_set": [112, 329], "post_hoc_r": 112, "connectivity_factor": 112, "recomput": 112, "bar_vari": [112, 329], "summed_count_matrix": 112, "joint": 112, "delta": [112, 160, 241, 320], "kl": [112, 152, 160, 161], "Not": [112, 312], "weaken": [112, 314], "hypothet": 112, "restrict_to_submodel": 112, "connectivity_opt": 112, "state_count": 112, "easier": [112, 245, 309, 326], "pad": [112, 296, 299, 328], "got": 112, "drop": 112, "tram_input": 112, "traminput": 112, "restructur": 112, "doesn": 112, "matter": 112, "bias_list": 112, "fell": 112, "therm_state_energi": 113, "markov_state_energi": 113, "pmf": [113, 258], "hold": [113, 137, 162, 226, 252, 308, 320, 328, 329], "compute_pmf": [113, 329], "bin_indic": 113, "therm_stat": 113, "binned_sampl": 113, "compute_log_likelihood": 113, "log_likelihood": 113, "compute_observ": 113, "observable_valu": 113, "compute_sample_weights_log": 113, "sample_weights_log": 113, "k_": [113, 121, 136, 160, 171, 328], "f_k": [113, 152], "msm_collect": 113, "only_us": 114, "group": [115, 305], "central": [116, 166], "comittor": [116, 121, 166, 169, 171, 236], "outlin": [116, 162], "weinan": [116, 328], "123": [116, 166, 300, 317, 328], "503": [116, 166, 300, 328], "lothar": [116, 121, 328], "reich": [116, 121, 164, 166, 169, 171, 328], "weikl": [116, 121, 164, 166, 169, 171, 328], "106": [116, 121, 164, 166, 169, 171, 294, 300, 328], "19011": [116, 121, 164, 166, 169, 171, 328], "19016": [116, 121, 164, 166, 169, 171, 328], "hit": [121, 134, 139, 236, 328], "disjoint": 121, "fromal": 121, "l_": [121, 160, 328], "setminu": 121, "cup": [121, 328], "came": 121, "sup": 121, "notin": [121, 134, 139], "formal": [121, 328], "d_": [121, 131, 313], "adjoint": 121, "89": [121, 300, 328], "u_plu": 121, "u_minu": 121, "45454545": [121, 133], "sensit": [122, 124, 126, 129, 140, 145, 146, 152, 258], "return_tim": [123, 235, 242], "sum_x": [123, 132, 133, 143], "eigenvlau": [123, 132], "l_i": [123, 127, 132, 133, 137, 176], "40909091": 123, "34081364": 123, "28585667": 123, "23424263": 123, "mu_j": [125, 127, 137, 147, 162], "precomput": [125, 127, 147, 199], "eigvec": 127, "rdl_decomposit": 127, "lapack": [127, 253], "arpack": [127, 253], "orthonorm": [127, 331], "77350269e": 127, "07106781e": 127, "90147543e": 127, "02": [127, 142, 163, 188, 272, 296, 300, 304, 319], "recalcul": 128, "m_a": 128, "909090909": 128, "ec": [130, 131], "44616147": 130, "0495735": 130, "50413223": 130, "04960006": 130, "36": [130, 281, 300], "44640052": 130, "90909091": 131, "54545455": 131, "spectrum": [132, 133, 176, 186, 327], "gamma_i": [132, 133], "lvert": [132, 133, 147], "rvert": [132, 133, 147], "amp": [132, 133], "49122158": [132, 133, 147], "43429448": [132, 133, 147], "20661157": 132, "22727273": 132, "02066116": 132, "w_0": [133, 143], "04545455": 133, "solut": [134, 176, 217, 298, 314, 316, 321, 325], "h_i": 134, "precis": [135, 163, 198, 320], "go": [135, 190, 239, 308, 320, 327, 328], "irreduc": [135, 323], "adjenc": 135, "tarjan": [135, 150, 153, 154, 155], "hoel": [135, 139], "sidnei": [135, 139], "port": [135, 139], "charl": [135, 139], "stone": [135, 139], "waveland": [135, 139], "press": [135, 139], "1986": [135, 139], "search": [135, 150, 153, 154, 155, 323], "siam": [135, 149, 150, 153, 154, 155], "160": [135, 150, 153, 154, 155, 300, 332], "1972": [135, 150, 153, 154, 155], "tol": [136, 137, 138, 160, 217, 301], "follw": 137, "wit": 138, "elementari": [139, 147], "m_t": 139, "_x": [139, 314, 321], "t_y": 139, "cc": [139, 150], "_z": 139, "mu_x": 139, "mu_z": 139, "22": [139, 198, 285, 290, 300, 313, 317, 320, 328, 331], "meta": 141, "id": [142, 160, 314], "probabilitydistribut": 142, "distributionof": 142, "repeat": [142, 282, 313, 317, 327, 328], "00000000e": 142, "04880885e": 142, "16227766e": 142, "54545455e": 142, "09090909e": 142, "8407": 143, "71979377": 143, "60624287": 143, "fallback": 144, "check_input": 144, "unsuccess": 144, "degener": 144, "44444444": 144, "11111111": 144, "corrlength": 148, "resampl": [148, 149], "often": [148, 149, 311, 313, 320, 325, 330, 331], "bootstrap": [148, 149, 258], "bootstrap_trajectori": 148, "correlation_length": 149, "segment": [149, 263, 264, 276, 280, 281, 285], "longest": 149, "rough": [149, 320], "shorter": 149, "put": [149, 317, 323], "corrlat": 149, "t_corr": 149, "floor": [149, 329], "subtrajectori": 149, "slightli": [149, 188, 317], "critic": [149, 313], "better": [149, 309, 313, 328, 332], "theoret": 149, "computation": [149, 313, 320, 328], "demand": 149, "kuensch": 149, "jackknif": 149, "ann": 149, "1217": 149, "1989": [149, 320], "efron": 149, "1979": 149, "anderson": 149, "york": 149, "1971": 149, "noe": [149, 156, 162, 164, 166, 169, 171, 305], "nuesk": 149, "pp": 149, "vertic": [150, 155, 331], "lcc": [150, 154, 155], "adjac": [150, 153, 154, 155, 188, 189, 328, 330], "cc_direct": 150, "cc_undirect": 150, "sparse_return": 151, "nstate": [151, 194, 196], "coo_matrix": 151, "coun": 151, "slidingwindow": 151, "skip": 151, "seper": 151, "lfloor": [151, 330], "rfloor": [151, 330], "chi_": 151, "sperat": 151, "c_slide": 151, "csr": 151, "toarrai": 151, "c_lag": 151, "scalar": [152, 197, 198, 222], "rvert_": 152, "t_0": 152, "suitabl": [152, 312, 313], "ijk": 152, "jk": 152, "largest_connected_submatrix": 153, "lcc_direct": 154, "lcc_undirect": 154, "c_cc": 155, "largest_connected_set": 155, "larest": 155, "c_cc_direct": 155, "c_cc_undirect": 155, "orscipi": 156, "logl": 156, "58": [156, 272, 300], "21": [156, 260, 265, 271, 272, 286, 300, 304, 313, 317, 320, 327, 328, 331], "38": [156, 300, 328], "2808034725": 156, "68": [156, 300, 321], "2144096814": 156, "schuett": [156, 164, 166, 169, 170, 171, 172, 173], "triangl": 159, "essenti": 159, "triangular": 159, "elsewher": 159, "t_agg": 160, "10000000": 160, "k0": 160, "on_error": 160, "cve": 160, "truncated_log": 160, "logm": 160, "2dt": 160, "crommelin": 160, "u_": 160, "lj": 160, "lambda_": 160, "delta_": 160, "algorihtm": 160, "kalbfleisch": 160, "lawless": 160, "occupi": 160, "0e7": 160, "quasi": [160, 235, 295, 317], "factr": 160, "fmin_l_bfgs_b": 160, "1e12": 160, "1e7": 160, "moder": 160, "extrem": 160, "happend": 160, "0138": 160, "6993": 160, "davi": 160, "embedd": 160, "electron": [160, 305], "1474": 160, "1486": 160, "daan": 160, "convex": 160, "1751": 160, "1778": 160, "jd": 160, "jerald": 160, "franklin": 160, "panel": [160, 319], "392": [160, 300], "863": 160, "871": 160, "1985": 160, "propto": [161, 162, 218], "whenev": [161, 192, 331], "t0": [162, 235, 242, 317], "obei": [162, 212, 324, 325, 331], "mc": 162, "sweep": 162, "py": [162, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 313, 321, 329], "class": [162, 244, 258, 308, 312, 313, 317], "transitionmatrixsampl": 162, "fulfil": [162, 165, 167, 241], "128": [162, 300, 317, 319], "244103": 162, "submit": 162, "rev_pisym": 163, "return_statdist": 163, "warn_not_converg": 163, "countmatrix": [163, 258], "occup": 163, "fast": [163, 327], "pi_j": [163, 323, 324], "asympot": 163, "return_conv": 163, "histori": 163, "pi_chang": 163, "return_statist": 163, "gregori": [163, 311], "bowman": [163, 311], "kyle": 163, "beauchamp": 163, "boxer": 163, "challeng": 163, "autom": 163, "protein": [163, 309, 327, 328], "131": [163, 300], "124101": 163, "t_nrev": 163, "array_str": 163, "833": 163, "083": 163, "t_rev": 163, "104": [163, 300], "063": 163, "351": [163, 300], "649": 163, "049": 163, "151": [163, 300, 323], "29": [163, 276, 286, 300, 312, 313, 317, 328, 331], "t_mu": 163, "948": 163, "006": 163, "046": 163, "429": [163, 300], "571": 163, "111": [163, 271, 298, 300], "869": 163, "fc_": 164, "ot": 164, "necessarili": [164, 313], "anymor": 164, "netflux": [164, 166, 170, 172, 236], "to_netflux": 164, "ch": [164, 166, 169, 171, 323, 324], "proc": [164, 166, 169, 171], "natl": [164, 166, 169, 171], "acad": [164, 166, 169, 171], "sci": [164, 166, 169, 171], "usa": [164, 166, 169, 171], "rtol": [165, 167], "atol": [165, 167], "outflux": [165, 167], "influx": [165, 167], "dirti": [165, 167], "therebi": [165, 167], "violat": [165, 167], "reli": [166, 171], "q_j": [166, 328], "523": [166, 300, 304], "prod": 168, "consumpt": [168, 309, 313], "totflux": [169, 171], "tab": 169, "netork": 170, "rapidli": 170, "prohibitev": 170, "expens": [170, 320], "prevent": [170, 305, 317], "advis": 170, "monitor": 170, "kab": [171, 236], "flux_matrix": 171, "event": [171, 309, 311, 312, 316, 328], "ab": [171, 230, 231, 232, 233, 234, 295, 313, 315, 317, 319, 320, 322, 328, 332], "turnov": 173, "consum": 173, "with_traceback": 174, "tb": 174, "__traceback__": 174, "arr": [175, 179], "_np": 175, "ct": 176, "canonical_sign": [176, 182, 184], "return_rank": [176, 185], "robust": [176, 182, 183, 184, 185, 324], "hermitian": [176, 180], "_0": 176, "conduct": 176, "schur": [176, 182, 183, 184, 185], "retain": 176, "lm": 177, "eigenpair": 177, "a_1": 178, "a_n": 178, "is_diagon": 178, "ndim": [179, 222], "schatten": 180, "_r": 180, "evec": 181, "lexicograph": 181, "check_sym": 182, "sign": [182, 184, 324, 331], "truli": [183, 184, 185], "moor": 183, "penros": 183, "umathrm": 186, "deem": [186, 312], "contour": [187, 191, 192, 193, 241, 287, 291, 292, 304, 310, 315, 329], "colorbar": [187, 191, 192, 193, 270, 275, 276, 280, 281, 285, 290, 291, 296, 297, 299, 300, 316, 319, 320, 322, 324, 326, 327, 328, 329, 331, 332], "plot_energy2d": [187, 200, 218, 258, 292], "unpack": 187, "energy2d": [187, 193, 200, 258, 292], "cbar": [187, 193, 200, 292, 328], "quadcontourset": 187, "adjacency_matrix": [188, 189], "po": [188, 194, 196, 222, 268, 291, 324, 328, 330], "cmap": [188, 194, 239, 263, 264, 275, 276, 280, 281, 282, 285, 290, 292, 295, 296, 297, 299, 300, 315, 317, 318, 319, 320, 324, 326, 328, 329, 331, 332], "state_s": [188, 194, 196], "state_scal": [188, 194, 196], "state_color": [188, 194, 196, 296], "ff5500": [188, 194, 196], "state_label": [188, 194, 196], "edge_scal": [188, 194, 196], "edge_curvatur": [188, 194, 196, 296], "edge_label": [188, 194, 196, 324, 328], "edge_label_format": [188, 194, 196], "edge_label_loc": 188, "arc": 188, "color": [188, 190, 193, 194, 195, 196, 225, 239, 263, 268, 274, 275, 277, 282, 283, 295, 296, 297, 298, 299, 301, 313, 315, 317, 318, 319, 320, 323, 324, 326, 328, 329, 332], "colormap": [188, 239], "_scale": 188, "d_x": 188, "d_y": 188, "_size": 188, "circl": 188, "twice": [188, 227], "depict": [188, 255, 290, 313, 328], "arrow": [188, 194, 196], "width": [188, 194, 196, 210, 296, 328], "rcparam": 188, "linewidth": [188, 302, 317, 319, 325], "curvatur": [188, 194, 196], "straight": [188, 239], "arrow_label": 188, "curv": [188, 194, 196], "midpoint": [188, 216], "96": [188, 296, 300], "networkx": [188, 189, 196, 296, 324, 328, 330], "spring": 188, "layout": [188, 189, 196, 312], "nx": [188, 296, 324, 328, 330], "spring_layout": [188, 189], "from_numpy_arrai": [188, 296], "textkwarg": [188, 194, 196], "disc": [188, 194, 196], "thick": 188, "xmin": 188, "xmax": [188, 319, 332], "ymin": [188, 274, 319, 332], "ymax": [188, 274, 319, 332], "height": [188, 190, 225, 328], "edge_base_scal": 188, "n_node": 188, "node_s": [188, 328], "rescal": [188, 318], "style": [188, 241, 308], "rgb": [188, 194, 196], "scale_st": 189, "gca": [189, 191, 192, 193, 194, 268], "aspect": [190, 225, 311, 325], "cktestgrid": 190, "legend": [190, 225, 239, 263, 267, 268, 274, 277, 283, 288, 295, 298, 301, 302, 303, 314, 316, 317, 319, 323, 324, 325, 326, 327, 328, 331, 332], "xlabel": [190, 225, 278, 298, 313, 316, 317, 318, 319, 323, 324, 325, 331, 332], "ylabel": [190, 225, 298, 313, 316, 318, 319, 323, 324, 325, 331, 332], "y01": [190, 225], "sharei": [190, 225, 279, 297, 318, 328], "plot_kwarg": [190, 225], "figur": [190, 193, 196, 241, 260, 263, 264, 268, 271, 294, 298, 301, 303, 311, 313, 315, 317, 319, 320, 321, 322, 324], "ck": [190, 288], "overlai": [190, 288], "nearest": [191, 297, 313, 328], "contourf_kw": [191, 192, 193, 200, 290, 291, 292], "interpol": [191, 239, 276, 280, 281, 285, 297, 327, 328], "unord": [191, 192, 290, 291], "resolut": [191, 192, 195], "griddata": 191, "contourf": [191, 192, 193, 241, 268, 270, 275, 276, 280, 281, 282, 285, 300, 315, 317, 319, 321, 322, 326, 329, 331, 332], "grab": [191, 192], "mappabl": [191, 192, 290], "avoid_zero_count": [192, 291], "clamp": 192, "lowest": 192, "energylandscape2d": [193, 218, 258], "cbar_kw": [193, 200], "cbar_ax": [193, 200], "energy2dplot": [193, 258], "flux_scal": 194, "minflux": [194, 196], "attribute_to_plot": [194, 296], "show_committor": 194, "coolwarm": [194, 263, 275, 276, 280, 281, 285, 290, 296, 315, 326, 328, 332], "ugli": [194, 196], "area": [194, 195, 196, 241, 313, 316, 331], "hex": [194, 196], "grayscal": [194, 196], "red": [194, 196, 263, 282, 317, 319, 320, 328], "34": [194, 196, 265, 300, 317, 321], "35": [194, 196, 300, 319, 328], "displai": [194, 196, 202, 312, 317, 321, 331], "org": [194, 196, 312], "text_api": [194, 196], "html": [194, 196, 317, 321, 331], "info": [194, 196], "arrow_label_s": [194, 196], "impliedtimescal": [195, 228, 258], "n_it": [195, 228, 293], "show_ml": 195, "show_sampl": 195, "show_sample_mean": 195, "show_sample_confid": 195, "show_cutoff": 195, "sample_confid": 195, "exis": 195, "from_model": [195, 226], "mutual": [195, 328], "grei": [195, 318], "fill": [195, 239, 328], "shade": 195, "rc": 195, "config": 195, "prop_cycl": 195, "orang": 196, "p_ij": 196, "theta_1": [197, 325], "theta_2": [197, 325], "theta_k": 197, "xi": [197, 198, 298, 325], "satisfi": [197, 328], "candid": [197, 325], "n_input_features_": 197, "n_output_features_": 197, "coef_": 197, "intercept_": 197, "regressor": [197, 199], "linear_model": 197, "stlsq": [197, 258, 298, 325], "x1": [197, 298], "n_input_featur": [197, 198], "joshua": [197, 199, 325], "proctor": [197, 199, 325], "discov": [197, 199, 256, 298, 325], "govern": [197, 199, 256, 311, 312, 325, 329], "3932": [197, 199, 325], "3937": [197, 199, 325], "sindymodel": [197, 258, 298, 325], "sindi": [198, 199, 258, 287, 304, 309, 310, 312], "intercept": [198, 199], "correpond": 198, "n_output_featur": 198, "round": [198, 281, 316, 321, 331], "lh": [198, 298], "human": 198, "readabl": 198, "r2_score": [198, 199], "scoring_kw": 198, "odeint": [198, 298], "integrator_kw": 198, "n_featur": [198, 199], "ridge_kw": 199, "fit_intercept": 199, "copy_x": 199, "attempt": [199, 325], "xw": 199, "2_2": 199, "l2": [199, 295], "ridg": 199, "regress": [199, 325, 331], "n_target": 199, "subobject": 199, "sample_weight": 199, "residu": 199, "y_true": 199, "y_pred": 199, "arbitrarili": [199, 204], "wors": 199, "n_samples_fit": 199, "n_output": 199, "multioutput": 199, "uniform_averag": 199, "multioutputregressor": 199, "x_meshgrid": 200, "y_meshgrid": 200, "kbt": [200, 218, 292], "n_bins_x": 200, "n_bins_i": 200, "k_bt": [200, 218], "gather": [201, 323, 329], "sought": [201, 331], "set_descript": [202, 203], "close": [202, 203, 307, 317, 322, 323, 324, 325, 327, 331], "progresscallback": [203, 258], "remove_nan": 204, "concat": [205, 206, 208], "concatdataset": [206, 258], "fanci": 206, "slice": 206, "astyp": [207, 209, 269, 316, 317, 319, 326, 329, 332], "converted_d": [207, 209], "from_trajectori": [208, 209], "from_numpi": [208, 316, 317], "assertionerror": [208, 209, 235, 237, 242, 243], "seq": 210, "fixed_width": 210, "manner": [210, 312], "shuffl": [211, 313, 316, 319, 326, 332], "timeshift": [211, 309], "whatev": [211, 312], "decor": [212, 213, 214], "fget": 212, "fset": 212, "fdel": 212, "inspir": 212, "github": [212, 222, 308, 312], "com": [212, 222, 312], "pydanni": 212, "stackoverflow": 212, "17330273": 212, "delet": [212, 305], "descriptor": 212, "argument_nam": 213, "replaced_bi": 213, "msg": 213, "mark": [213, 214], "messag": [213, 305], "factori": 213, "requires_networkx": 214, "instal": [214, 221, 249, 307, 312, 313, 316, 332], "diff": [215, 216, 217, 301], "x_bar": 215, "fd": 215, "_coeff": 215, "_around": 215, "x_n": [215, 217, 239, 320, 321, 325], "window_radiu": 216, "u0": [217, 235], "fd_window_radiu": [217, 301], "edge_ord": 217, "earli": 217, "tv": [217, 287, 304, 310], "safe": 217, "rick": 217, "chartrand": 217, "noisi": [217, 301, 317], "nonsmooth": 217, "scholarli": 217, "notic": [217, 241, 328], "shift_energi": [218, 292], "boltzmann": 218, "encourag": 218, "kj": 218, "mol": 218, "298": [218, 300], "479": [218, 300], "energy_landscap": 218, "platform": [220, 221, 308], "noth": [220, 308], "progress_bar": 220, "modnam": 221, "ari": 222, "insert": 222, "atleast_1d": 222, "atleast_2d": 222, "atleast_3d": 222, "pull": 222, "7804": 222, "atleast_": 222, "comprehens": [222, 311], "rule": 222, "roughli": [222, 313, 324, 331], "subok": 222, "ndmin": 222, "easi": 222, "functool": 222, "ducktyp": 223, "presenc": 223, "is_dataset": 223, "is_timelagged_dataset": [224, 258], "arang": [224, 269, 274, 275, 276, 277, 280, 281, 282, 285, 293, 298, 302, 313, 316, 317, 318, 319, 322, 324, 327, 328, 331], "data_instantan": 224, "data_timelag": 224, "predictions_sampl": 225, "estimates_sampl": 225, "has_error": 225, "its_stat": 226, "plot_implied_timescal": [226, 228, 258, 293, 304, 316], "n_lagtim": 226, "n_process": 226, "lagtime_index": 226, "process_index": 226, "samples_for_process": 226, "timescales_sampl": 226, "max_n_sampl": 226, "timescales_for_process": 226, "has_sampl": 226, "max_n_process": 226, "tau_1": 227, "tau_2": 227, "verifi": 227, "overset": 227, "tild": [227, 314], "mainli": [227, 308, 313, 332], "smallest": 227, "its_data": [228, 293], "sqrt_inv_cov": 229, "modify_data": [230, 231, 232, 233, 234], "sparse_tol": [230, 231, 232, 233, 234], "xx": [230, 231, 233, 234, 315, 321, 322], "exploit": [230, 231, 232, 233, 234], "moments_xx": [230, 258], "faster": [230, 231, 232, 233, 234, 316], "surpris": [230, 231, 232, 233, 234], "effort": [230, 231, 232, 233, 234, 312], "moments_xxxi": [231, 258], "c_xy": [231, 233], "unnorm": [232, 233, 234], "s_x": [233, 234], "s_y": [233, 234], "yx": [234, 321, 322], "yy": [234, 315, 321, 322], "sx": 234, "sy": 234, "cxx": 234, "cxy": 234, "cyx": 234, "cyi": 234, "full_period": 235, "rk45": 235, "built": 235, "evolv": [235, 237, 242, 243, 315, 316, 317, 325], "handle_n_job": [235, 237, 242, 243, 258], "apply_periodic_boundary_condit": 235, "3d": [235, 260, 263, 264, 271, 298], "xyz": [235, 287, 304, 310], "l0": 235, "characterist": 235, "veloc": [235, 241], "travel": 235, "wave": 235, "varepsilon": [235, 241, 321, 322], "right_hand_sid": [235, 237, 242, 243], "has_potential_funct": [235, 237, 242, 243], "periodic_bc": 235, "r0": 235, "earth": 235, "time_depend": [235, 237, 242, 243], "vectorized_f": [235, 237, 242, 243], "w_x": 236, "p_x": 236, "t_a": 236, "t_b": 236, "u_x": 236, "arriv": [236, 324], "totalflux": 236, "tiotal": 236, "anhil": 236, "prop": [237, 242, 243, 318, 319], "custom_sd": [237, 258, 275], "custom_od": [237, 258, 262], "n_initial_condit": [237, 242, 243], "n_evalu": [237, 242, 243], "squeez": [237, 242, 243, 278, 279, 281, 319], "dtraj_n": [238, 277], "100k": 238, "dtraj_n2": 238, "simulate_trajectori": 238, "n_trajectori": 238, "fewer": [238, 241, 312, 320, 327], "analytic_msm": [238, 277], "dtraj_n2bad": 238, "bad": [238, 320], "dtraj_n2good": 238, "dtraj_n6good": 238, "barrier": [239, 328], "stencil": 239, "hoc": 239, "add_barri": [239, 267, 297, 299, 328], "bresenham": 239, "jack": 239, "digit": [239, 279], "plotter": 239, "ibm": 239, "1965": 239, "coordinate_to_st": [239, 328], "coord": [239, 275, 280, 281, 315], "is_valid_coordin": 239, "is_valid": 239, "plot_2d_map": [239, 267, 297, 299, 328], "barrier_mod": [239, 297, 328], "face": 239, "hollow": [239, 297, 328], "border": [239, 328, 331], "plot_network": [239, 296, 299, 304, 328], "connection_threshold": [239, 299, 328], "edge_color": 239, "plot_path": [239, 267, 328], "color_lerp": [239, 328], "plot_kw": 239, "walk": [239, 266, 272, 287, 304, 306, 310, 328], "spline": 239, "scatterplot": 239, "lerp": 239, "linecollect": [239, 276, 280, 281, 285], "state_to_coordin": [239, 328], "return_st": [239, 328], "random_walk": 239, "setup": [239, 313, 327], "map_discrete_to_observ": [240, 303, 327], "ftraj": [240, 269, 327], "covariance_matrix": [240, 268], "rng": 240, "domain_s": 241, "interaction_dist": 241, "n_solver_iter": 241, "graviti": 241, "016": 241, "rest_dens": 241, "tensile_instability_dist": 241, "tensile_instability_k": 241, "rest": [241, 327, 331], "rho_0": 241, "smooth": 241, "hydrodynam": 241, "cell": [241, 328], "solver": [241, 258], "slower": 241, "defaul": 241, "respons": [241, 305], "tension": 241, "p_1": 241, "p_n": 241, "v_1": 241, "v_n": 241, "sph": 241, "rho_i": 241, "m_i": 241, "p_j": 241, "equiv": 241, "convolut": 241, "c_i": [241, 328], "c_k": 241, "vanish": 241, "dampen": 241, "few": [241, 321, 323, 328], "clump": 241, "remedi": 241, "tensil": 241, "gingold": 241, "joseph": 241, "monaghan": 241, "star": 241, "monthli": 241, "royal": 241, "astronom": 241, "181": [241, 300], "375": [241, 300], "389": [241, 300], "1977": 241, "leon": 241, "luci": 241, "fission": 241, "hypothesi": 241, "1013": 241, "1024": 241, "make_anim": [241, 261, 269, 321, 331], "anim": [241, 260, 271, 282, 317, 331], "asid": 241, "n_grid_x": [241, 302, 331], "transform_to_dens": [241, 302, 331], "n_grid_i": [241, 302, 331], "figsiz": [241, 260, 261, 267, 269, 270, 284, 289, 291, 295, 296, 297, 298, 299, 300, 302, 303, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332], "n_traj": 241, "ncol": [241, 274, 284, 294, 303, 315, 317, 318, 319, 320, 321, 322, 331], "nrow": [241, 284, 294, 303, 315, 317, 318, 320, 321, 322, 331], "titl": [241, 268, 298, 299, 303, 313, 315, 316, 319, 321, 322, 324, 328, 331], "funcanim": [241, 260, 271, 282, 317], "simulate_oscillatory_forc": [241, 269, 302, 331], "n_oscil": [241, 302, 331], "alternatingli": [241, 331], "negat": 241, "kde": [241, 331], "knowledg": [241, 319, 328, 329], "lost": 241, "develop": [244, 258, 288, 311, 313, 321, 324], "readi": [250, 323, 325], "fork": 253, "msmtool": [253, 312], "diagnost": 255, "throughout": [257, 328], "notebook": [258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 313, 316, 317, 319, 321, 322, 329, 332], "alanin": 258, "dipeptid": 258, "wedg": 258, "backtransform": [258, 317], "coher": [258, 287, 304, 309, 310, 315, 321, 331], "kvadnet": 258, "regularspac": [258, 289, 313], "kmeans_plusplu": 258, "koopmanweightingestim": [258, 327], "whiteningtransform": 258, "covar": [258, 331], "moments_block": 258, "vamp_score_data": [258, 321], "vamp_score_cv": [258, 319], "cvsplit_traj": 258, "blocksplit_traj": 258, "tvaeencod": [258, 326], "vampnet_loss": 258, "kvad_scor": [258, 317], "number_of_st": 258, "count_stat": 258, "compute_connected_set": 258, "compute_dtrajs_effect": 258, "indices_by_distribut": 258, "compute_index_st": 258, "indices_by_sequ": 258, "indices_by_st": 258, "random_guess": [258, 320], "monomi": [258, 315, 319, 325], "generalizedgaussiankernel": 258, "laplaciankernel": 258, "polynomialkernel": 258, "torchgaussiankernel": [258, 317], "is_torch_kernel": 258, "abc_flow": [258, 260], "bickley_jet": [258, 261, 294, 317, 321], "lorenz_system": [258, 263], "thomas_attractor": [258, 264], "position_based_fluid": [258, 269, 302, 331], "tmatrix_metropolis1d": [258, 283, 300, 329], "birth_death_chain": [258, 274], "ornstein_uhlenbeck": [258, 278], "double_well_2d": [258, 276, 293], "double_well_discret": [258, 277], "triple_well_1d": [258, 284], "triple_well_2d": [258, 285, 290, 292, 315], "quadruple_wel": [258, 280, 291, 322], "quadruple_well_asymmetr": [258, 281], "time_dependent_quintuple_wel": [258, 282], "prinz_potenti": [258, 279, 318], "ellipsoid": [258, 266, 272, 288, 303, 306, 313, 324, 327, 331], "sqrt_model": [258, 270, 295, 319, 326, 332], "swissroll_model": [258, 271], "drunkards_walk": [258, 267, 297, 299, 328], "plot_contour2d_from_xyz": [258, 290, 304], "plot_dens": [258, 291, 304], "plot_adjac": 258, "plot_markov_model": [258, 296], "plot_flux": [258, 296], "drop_nan_row": 258, "is_diagonal_matrix": 258, "is_square_matrix": 258, "schatten_norm": 258, "eig": 258, "eig_corr": 258, "sort_eig": 258, "spd_eig": 258, "spd_truncated_svd": 258, "spd_inv": 258, "spd_inv_split": 258, "zerorankerror": 258, "implied_timescal": [258, 293, 316], "sliding_window": 258, "confidence_interv": 258, "atleast_nd": 258, "tv_deriv": [258, 301], "finite_difference_coeffici": 258, "finite_difference_operator_midpoint": 258, "cached_properti": 258, "plotting_funct": 258, "deprecated_argu": 258, "module_avail": [258, 308], "handle_progress_bar": 258, "imprint": 258, "softwar": 258, "licens": 258, "click": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "download": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "pyplot": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "num": [260, 262, 263, 276, 280, 281, 283, 284, 285, 295, 300, 315, 319, 329], "set_data": 260, "set_3d_properti": 260, "add_subplot": [260, 263, 264, 271, 294, 298, 303, 315, 317, 319, 320, 321, 322], "set_titl": [260, 270, 276, 280, 281, 284, 285, 289, 291, 293, 294, 295, 296, 297, 299, 303, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 331, 332], "abc": 260, "flowfield": 260, "linestyl": [260, 274, 298, 302, 303, 319, 331], "marker": [260, 267, 268, 271, 283, 289, 303, 313, 314, 318, 319, 324, 327, 328, 332], "set_xlim": [260, 282, 315, 317, 318], "set_ylim": [260, 282, 315, 317, 318, 319], "set_zlim": 260, "blit": [260, 271, 282, 317], "script": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "minut": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "624": [260, 265], "mb": [260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "plot_abc_flow": [260, 265], "jupyt": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "ipynb": [260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "sphinx_gallery_thumbnail_numb": 261, "250": [261, 267, 278, 300, 328], "fig": [261, 267, 268, 271, 274, 276, 280, 281, 282, 285, 293, 294, 297, 298, 299, 300, 315, 317, 321, 322, 324, 325, 328, 329], "subplot": [261, 267, 270, 274, 276, 277, 279, 280, 281, 282, 284, 285, 289, 290, 291, 293, 295, 296, 297, 299, 300, 302, 313, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 328, 329, 331, 332], "agg_backend": [261, 269], "max_fram": 261, "14": [261, 265, 295, 298, 300, 303, 313, 316, 317, 319, 320, 323, 324, 326, 327, 328, 331, 332], "plot_bickley_jet": [261, 265], "n_eval": 262, "final_tim": 262, "313": [262, 265, 300], "plot_custom_od": [262, 265], "mpl_toolkit": [263, 264, 296, 299, 328], "mplot3d": [263, 264], "art3d": [263, 264], "line3dcollect": [263, 264], "3500": 263, "blue": [263, 295, 297, 324, 328], "reshap": [263, 264, 268, 269, 270, 275, 276, 279, 280, 281, 282, 284, 285, 297, 300, 315, 317, 319, 321, 326, 328, 329, 331, 332], "coll": [263, 264, 276, 280, 281, 285], "set_arrai": [263, 264, 276, 280, 281, 285], "set_linewidth": [263, 264, 276, 280, 281, 285], "add_collect": [263, 264, 276, 280, 281, 285], "set_xlim3d": 263, "19": [263, 300, 313, 316, 317, 327, 328, 331, 332], "set_ylim3d": 263, "set_zlim3d": 263, "set_box_aspect": [263, 264], "ptp": [263, 264], "700": [263, 265], "plot_lorenz_system": [263, 265], "tstart": 264, "tfinish": 264, "twilight": 264, "868": [264, 265], "plot_thomas_attractor": [264, 265], "788": [265, 269, 272], "datasets_od": 265, "file": [265, 272, 286, 304, 308, 312, 313], "74": [267, 300, 317, 328], "cyan": [267, 268, 328], "150": [267, 295, 298, 300, 318, 321, 328, 331, 332], "zorder": [267, 274, 282, 317, 319, 328], "752": [267, 272], "plot_drunkards_walk": [267, 272], "multivariate_norm": 268, "data_sourc": 268, "meshgrid": [268, 269, 270, 275, 276, 280, 281, 282, 285, 303, 315, 317, 319, 321, 322, 326, 327, 332], "rv1": 268, "state_0_mean": 268, "rv2": 268, "state_1_mean": 268, "autoscal": 268, "set_aspect": [268, 281, 296, 303, 315, 316, 317, 327], "576": [268, 272], "83": [268, 300, 328], "plot_ellipsoid": [268, 272], "engin": [269, 312], "init_pos_x": 269, "init_pos_i": 269, "dstack": [269, 270, 275, 276, 280, 281, 282, 285, 315, 317, 319, 321, 326, 332], "400": [269, 300, 302, 331], "plot_pbf": [269, 272], "kde_input": [270, 319, 326, 332], "gaussian_kd": [270, 319, 326, 332], "bw_method": [270, 319, 326, 332], "ax1": [270, 279, 284, 289, 290, 291, 295, 300, 313, 315, 317, 319, 320, 326, 327, 329, 332], "ax2": [270, 279, 284, 289, 290, 291, 295, 313, 315, 317, 319, 320, 326, 327, 332], "set_xlabel": [270, 274, 279, 284, 293, 295, 303, 316, 319, 320, 326, 327, 331, 332], "set_ylabel": [270, 274, 279, 284, 293, 295, 303, 316, 319, 320, 326, 327, 332], "cm": [270, 282, 295, 296, 297, 299, 317, 318, 319, 324, 326, 328, 332], "heatmap": [270, 313, 319, 326, 327, 332], "127": [270, 272, 300], "plot_sqrt_model": [270, 272], "view_init": 271, "elev": 271, "azim": 271, "init_func": 271, "120": [271, 300], "927": [271, 272], "plot_swissroll_model": [271, 272], "171": [272, 300], "datasets_oth": 272, "bd": 274, "set_xtick": [274, 318], "vline": [274, 302, 331], "black": [274, 275, 277, 315, 319, 324, 332], "dash": [274, 298, 303], "hist": [274, 277, 283, 284, 318, 329], "c1": [274, 277, 283, 319, 329], "bbox_to_anchor": 274, "fancybox": 274, "shadow": 274, "361": [274, 286, 300], "plot_birth_death_chain": [274, 286], "harmonic_sphere_energi": 275, "ix": [275, 316, 317, 321, 324], "argwher": [275, 320], "potential_landscap": 275, "cb": [275, 276, 280, 281, 285, 297, 316, 319, 320, 328, 331, 332], "748": [275, 286], "plot_custom_sd": [275, 286], "splprep": [276, 280, 281, 285], "xint": [276, 280, 281, 285], "yint": [276, 280, 281, 285], "splev": [276, 280, 281, 285], "50000": [276, 280, 281, 285, 289, 323], "stack": [276, 280, 281, 282, 285, 315, 317, 325], "830": [276, 286], "plot_double_well_2d": [276, 286], "showcas": [277, 313], "dwd": 277, "60": [277, 300, 316], "suptitl": [277, 313, 331], "ndiscret": 277, "edgecolor": [277, 319], "466": [277, 286, 300], "plot_double_well_discret": [277, 286], "493": [278, 286, 300], "plot_ornstein_uhlenbeck": [278, 286], "547": [279, 286], "plot_prinz": [279, 286], "46": [280, 300], "bwr": [280, 317, 331], "698": [280, 286], "plot_quadruple_wel": [280, 286], "70": [281, 300, 316], "annot": [281, 320, 324], "2f": [281, 317, 319], "xycoord": 281, "xytext": [281, 324], "textcoord": 281, "bbox": [281, 318, 319], "boxstyl": [281, 318, 319], "arrowprop": 281, "arrowstyl": [281, 324, 328], "878": [281, 286], "plot_quadruple_well_asymmetr": [281, 286], "viridi": 282, "vmin": [282, 296, 297, 299, 300, 317, 319, 324, 328], "vmax": [282, 296, 297, 299, 300, 317, 319, 324, 328], "scatter_handl": 282, "set_offset": [282, 317], "tp": 282, "573": [282, 286], "63": [282, 286, 300, 328], "plot_time_quintuple_wel": [282, 286], "820": [283, 286], "plot_tmatrix_1d": [283, 286], "20000": [284, 318], "647": [284, 286], "plot_triple_well_1d": [284, 286], "783": [285, 286], "plot_triple_well_2d": [285, 286], "844": 286, "datasets_sd": 286, "r\u00f6ssler": [287, 304, 310], "mho": [288, 295, 321], "chapman_kolmogorov": 288, "174": [288, 300], "complexwarn": [288, 295], "cktest": 288, "traj2": 288, "dtraj2": 288, "models2": 288, "13": [288, 289, 300, 313, 316, 317, 319, 320, 323, 324, 326, 327, 328, 329, 331, 332], "counts_estim": [288, 323], "test_model2": 288, "836": [288, 304], "gaussianmixtur": [289, 313], "rnd": [289, 313], "gmm": [289, 313], "covariance_typ": [289, 313], "weights_": [289, 313], "means_": [289, 313], "covariances_": [289, 313], "hexbin": [289, 313, 316, 327], "261": [289, 300, 304], "plot_clustering_comparison": [289, 304], "traj_concat": [290, 291, 292], "coarse_st": 290, "860": [290, 304], "ticker": 291, "mappable1": 291, "funcformatt": 291, "3f": [291, 295, 320, 328, 331], "logloc": 291, "mappable2": 291, "0e": [291, 300, 324], "nipy_spectr": 292, "set_label": [292, 316], "847": [292, 304], "plot_energy_surfac": [292, 304], "ITS": 293, "set_yscal": [293, 316], "963": [293, 304], "ev_real": [294, 321], "add_gridspec": [294, 303, 315, 317, 319, 320, 321, 322], "1st": [294, 315, 322], "2nd": [294, 315, 322], "3rd": [294, 315, 322], "4th": [294, 315, 322], "222": [294, 300, 304], "plot_kcca_bicklei": [294, 304], "mambaforg": 295, "env": [295, 321], "lib": [295, 321], "python3": [295, 321], "site": [295, 305, 321], "196": [295, 300], "asanyarrai": 295, "mpl": [295, 296, 297, 299, 324, 328], "1500": 295, "dtraj_test": 295, "obs_test": 295, "est": 295, "n_mismatch": 295, "assignments_perm": 295, "n_mismatch_perm": 295, "ax3": [295, 319, 320, 327], "ax4": [295, 319], "ground": [295, 314, 319, 320, 323, 325], "truth": [295, 314, 319, 320, 323, 325], "plot_scatt": 295, "obs_ref": 295, "green": 295, "scatter1": 295, "get_cmap": [295, 296, 328], "scatter2": 295, "h1": 295, "l1": 295, "legend_el": [295, 319], "h2": 295, "add_artist": [295, 319], "226": [295, 300, 304], "plot_kcca_project": [295, 304], "axes_grid1": [296, 299, 328], "make_axes_locat": [296, 299, 328], "flatten": [296, 297, 300, 316, 318, 320, 328, 329], "planar_layout": 296, "cax": [296, 299, 328], "append_ax": [296, 299, 328], "scalarmapp": [296, 297, 299, 324, 328], "get_yaxi": 296, "set_vis": [296, 318], "delax": [296, 328], "342": [296, 300, 304], "sharex": [297, 318, 328], "imshow": [297, 318, 328, 331], "shrink": [297, 324, 328], "057": [297, 304], "plot_pcca_drunkard": [297, 304], "chaotic": 298, "rossler": 298, "ve": 298, "novel": [298, 325], "practic": [298, 325, 331], "000": 298, "x2": 298, "preprocess": [298, 325], "polynomialfeatur": [298, 325], "t_train": 298, "x0_train": 298, "x_train": 298, "x_dot_train": 298, "firebrick": 298, "zlabel": 298, "t_test": [298, 325], "x0_test": 298, "x_test": [298, 325], "x_sim": 298, "royalblu": 298, "710": [298, 304], "plot_sindy_rossler_attractor": [298, 304], "home_st": [299, 328], "bar_stat": [299, 328], "copper_r": [299, 328], "thresh": [299, 328], "lognorm": [299, 328], "694": [299, 304], "plot_tpt_gross_net_flux": [299, 304], "umbrella": [300, 311, 329], "tutori": [300, 302, 320], "9e": 300, "98it": 300, "84it": 300, "44": [300, 304], "21it": 300, "6e": [300, 319], "49": [300, 305], "94it": 300, "85it": 300, "57": [300, 328], "08it": 300, "03": [300, 327], "7e": 300, "04": [300, 304, 328], "78": 300, "67it": 300, "4e": 300, "98": [300, 328], "09it": 300, "8e": 300, "07": [300, 304], "37": 300, "39": [300, 316, 319, 321, 324, 325, 327, 331], "101": 300, "00it": 300, "43": 300, "47": [300, 317, 328], "33it": 300, "52": 300, "94": 300, "48it": 300, "10it": 300, "86": [300, 317], "39it": 300, "45it": 300, "102": 300, "28it": 300, "81it": 300, "110": 300, "74it": 300, "112": 300, "20it": 300, "58it": 300, "07it": 300, "68it": 300, "109": 300, "37it": 300, "54": 300, "56": 300, "59": [300, 324], "115": 300, "34it": 300, "61": 300, "62": [300, 321, 328], "64": [300, 326, 328], "65": [300, 328], "67": [300, 328], "69": 300, "71": 300, "51it": 300, "76": [300, 317, 329], "81": 300, "84": [300, 328], "25it": 300, "85": [300, 328], "87": 300, "88": [300, 317, 328], "91": [300, 318, 328], "92": [300, 328], "116": 300, "73it": 300, "103": 300, "105": [300, 304], "107": 300, "118": 300, "95it": 300, "117": 300, "119": 300, "121": 300, "122": 300, "124": 300, "125": 300, "126": 300, "132": 300, "133": 300, "135": 300, "24it": 300, "136": 300, "137": [300, 313], "138": 300, "140": [300, 311], "144": 300, "145": 300, "152": 300, "153": 300, "154": 300, "155": 300, "156": 300, "157": 300, "158": 300, "159": 300, "161": 300, "89it": 300, "163": 300, "164": 300, "165": 300, "166": 300, "167": 300, "168": [300, 323], "169": 300, "170": [300, 319], "172": 300, "173": 300, "72it": 300, "175": 300, "176": 300, "177": 300, "178": 300, "180": [300, 317], "182": 300, "183": 300, "184": 300, "185": 300, "186": 300, "187": 300, "188": 300, "189": 300, "191": 300, "192": 300, "193": 300, "194": 300, "195": 300, "197": 300, "198": 300, "199": 300, "201": 300, "202": 300, "203": 300, "204": 300, "206": 300, "207": 300, "208": 300, "209": 300, "210": 300, "211": 300, "212": 300, "29it": 300, "213": 300, "214": 300, "215": 300, "216": 300, "217": 300, "218": 300, "219": 300, "220": 300, "221": 300, "223": 300, "43it": 300, "224": 300, "225": 300, "227": 300, "228": 300, "229": 300, "230": 300, "231": 300, "232": 300, "233": 300, "234": 300, "235": 300, "236": 300, "237": 300, "238": 300, "239": 300, "240": 300, "241": 300, "242": 300, "243": 300, "244": 300, "245": 300, "246": 300, "248": 300, "249": 300, "251": 300, "252": 300, "253": 300, "254": 300, "255": 300, "256": [300, 317, 329], "257": [300, 320], "258": [300, 320], "259": 300, "50it": 300, "260": 300, "262": 300, "263": 300, "264": 300, "266": 300, "267": 300, "268": 300, "269": 300, "270": 300, "46it": 300, "271": 300, "272": 300, "273": 300, "274": 300, "275": 300, "276": 300, "277": 300, "278": 300, "279": 300, "280": 300, "281": 300, "282": [300, 320, 321], "284": 300, "285": 300, "286": [300, 320], "287": 300, "288": 300, "90it": 300, "289": 300, "290": 300, "291": 300, "292": 300, "293": 300, "294": 300, "295": 300, "65it": 300, "296": 300, "297": 300, "299": 300, "301": 300, "44it": 300, "302": 300, "303": 300, "304": 300, "305": 300, "306": 300, "307": 300, "308": 300, "309": 300, "310": 300, "311": 300, "312": 300, "314": 300, "316": 300, "317": 300, "318": 300, "69it": 300, "319": 300, "320": 300, "321": 300, "322": 300, "323": 300, "324": 300, "325": 300, "326": 300, "327": [300, 313], "328": 300, "329": 300, "330": 300, "331": 300, "332": 300, "333": 300, "334": 300, "335": 300, "336": 300, "337": 300, "338": 300, "339": 300, "340": 300, "341": 300, "343": 300, "344": 300, "345": 300, "346": 300, "347": 300, "348": 300, "349": 300, "350": 300, "352": 300, "353": 300, "354": 300, "355": 300, "356": 300, "357": 300, "358": 300, "359": 300, "362": 300, "364": 300, "365": 300, "366": 300, "367": 300, "368": 300, "369": 300, "70it": 300, "370": 300, "372": 300, "373": 300, "374": 300, "376": 300, "377": 300, "378": 300, "379": 300, "380": 300, "381": 300, "382": 300, "96it": 300, "383": 300, "384": 300, "385": 300, "386": 300, "387": 300, "388": 300, "390": 300, "391": 300, "393": 300, "394": 300, "395": 300, "55it": 300, "396": 300, "397": 300, "398": 300, "399": 300, "402": 300, "403": 300, "404": 300, "405": 300, "406": [300, 309], "407": 300, "408": 300, "409": 300, "410": 300, "411": 300, "412": 300, "413": 300, "414": 300, "415": 300, "416": 300, "417": 300, "418": 300, "419": 300, "420": 300, "421": 300, "422": 300, "423": 300, "424": 300, "425": 300, "426": 300, "427": 300, "428": 300, "430": 300, "431": 300, "432": 300, "433": 300, "32it": 300, "434": 300, "435": 300, "436": 300, "437": 300, "438": 300, "439": 300, "440": 300, "441": 300, "442": 300, "443": 300, "444": 300, "445": 300, "446": 300, "42it": 300, "447": 300, "448": 300, "449": 300, "450": 300, "451": 300, "452": 300, "453": 300, "454": 300, "455": 300, "456": 300, "457": 300, "458": 300, "459": 300, "460": 300, "462": 300, "463": 300, "464": 300, "465": 300, "467": 300, "468": 300, "469": 300, "470": 300, "471": 300, "472": 300, "04it": 300, "473": 300, "474": 300, "475": 300, "476": 300, "477": 300, "478": 300, "480": 300, "481": 300, "482": 300, "483": 300, "484": 300, "485": 300, "486": 300, "487": 300, "488": 300, "489": 300, "490": 300, "491": 300, "492": 300, "494": 300, "495": 300, "496": 300, "497": 300, "498": 300, "499": 300, "501": 300, "502": 300, "504": 300, "505": 300, "506": 300, "507": 300, "508": 300, "509": 300, "510": 300, "511": 300, "512": [300, 317, 332], "513": 300, "514": 300, "515": 300, "516": 300, "517": 300, "518": 300, "519": 300, "520": 300, "521": 300, "522": 300, "524": 300, "525": 300, "526": 300, "527": 300, "528": 300, "529": 300, "01it": 300, "bias_cent": [300, 329], "plot_contour_with_colourbar": 300, "im": [300, 329, 331], "get_bias_funct": 300, "bias_funct": [300, 329], "sample_trajectori": 300, "int32": [300, 316, 329, 330], "biased_energi": [300, 329], "__name__": 300, "__main__": 300, "btraj": 300, "hamiltonian": 300, "plot_tram": [300, 304], "noise_vari": 301, "testf": 301, "true_deriv": 301, "df_tv": 301, "df": 301, "dx": 301, "770": [301, 304], "plot_tv_deriv": [301, 304], "pbf_simul": [302, 331], "kde_trajectori": [302, 331], "projection_left": [302, 331], "projection_right": [302, 331], "lw": [302, 315, 328], "markers": [302, 325], "661": [302, 304], "plot_vamp_pbf_project": [302, 304], "plot_dominant_compon": 303, "dxy": [303, 327], "quiver": [303, 327], "vamp_project": 303, "dxy_vamp": 303, "tica_project": 303, "dxy_tica": 303, "pca_project": 303, "dxy_pca": 303, "components_": [303, 327], "constrained_layout": [303, 319, 320, 327], "ax_project": 303, "ax_tica": 303, "ax_vamp": 303, "ax_pca": 303, "984": [303, 304], "plot_vamp_vs_tica_vs_pca": [303, 304], "845": 304, "tdg": 305, "mediendienstestaatsvertrag": 305, "institut": 305, "freie": 305, "universit\u00e4t": 305, "arnimalle": 305, "14195": 305, "prof": 305, "dr": 305, "no\u00e9": [305, 321], "contact": 305, "838": 305, "75354": 305, "disclaim": 305, "content": [305, 311, 331], "webteam": 305, "reserv": [305, 312], "topic": 305, "liabil": [305, 312], "claim": [305, 312], "regard": [305, 318, 321], "damag": [305, 312], "incomplet": 305, "incorrect": 305, "reject": 305, "oblig": 305, "partli": 305, "announc": 305, "referr": 305, "hi": 305, "knowlegd": 305, "illeg": 305, "visitor": 305, "author": [305, 312], "liabl": [305, 312], "who": 305, "publish": [305, 312], "discuss": [305, 311], "board": 305, "guestbook": 305, "mailinglist": 305, "copyright": [305, 312], "materi": [305, 312], "sound": 305, "agreement": [305, 316], "legal": 305, "internet": 305, "section": [305, 312, 331], "uninfluenc": 305, "servic": 305, "www": 305, "techniqu": [307, 309, 322, 327], "aid": 307, "particularli": [307, 311], "aspir": 308, "contributor": 308, "familiar": [308, 313, 314, 315, 320, 323, 325, 326, 327, 331, 332], "plan": 308, "meanmodel": 308, "_mean": 308, "inherit": 308, "meanestim": 308, "super": 308, "_model": 308, "mean_model": 308, "projector": 308, "parent": 308, "your_modul": 308, "del": 308, "hard": [308, 328], "pypi": 308, "conda": 308, "doctest": 308, "toplevel": 308, "test_mean_estim": 308, "pytest": 308, "suffic": [308, 309, 320], "numpydoc": 308, "complic": 308, "footcit": 308, "authorofthecomplicatedalgo1988": 308, "footbibliographi": 308, "meth": 308, "citat": 308, "bibtex": 308, "bib": 308, "websit": 308, "readm": 308, "instruct": 308, "compact": [309, 327], "rare": [309, 316, 327], "suffici": [309, 323], "dual": 309, "transpos": 309, "metastabil": 309, "tcca": [309, 331], "vac": 309, "grow": 309, "quadrat": [309, 329], "suit": 309, "aris": [309, 312], "great": [309, 311], "stream": [309, 313], "toi": [309, 331], "easili": [309, 321], "databas": 309, "tree": 309, "stabil": 309, "yusuk": [309, 327], "naritomi": [309, 327], "sotaro": [309, 327], "fuchigami": [309, 327], "fluctuat": [309, 327], "motion": [309, 327, 331], "02b617": [309, 327], "sebastian": 309, "peitz": 309, "niemann": 309, "physica": 309, "phenomena": 309, "132416": 309, "At": 311, "omit": 311, "crucial": [311, 320], "husic": [311, 321, 331], "chronologi": 311, "understand": 311, "flavor": [311, 326], "analys": [311, 328], "overview": 311, "et": 311, "al": 311, "chapter": 311, "book": 311, "valuabl": 311, "resourc": 311, "cardin": 311, "tessel": 311, "goal": [311, 319, 320], "varieti": 311, "brook": [311, 321, 331], "art": 311, "2386": 311, "2396": 311, "797": 311, "busi": 311, "media": 311, "gnu": 312, "lesser": 312, "june": 312, "2007": 312, "foundat": 312, "fsf": 312, "everyon": 312, "verbatim": 312, "incorpor": 312, "supplement": 312, "permiss": 312, "herein": 312, "gpl": 312, "isol": 312, "program": 312, "convei": 312, "facil": 312, "faith": 312, "header": [312, 317], "accessor": 312, "inlin": 312, "templat": [312, 313], "ten": [312, 314], "promin": 312, "accompani": 312, "debug": 312, "among": 312, "recombin": 312, "relink": 312, "extent": 312, "4d0": 312, "4d1": 312, "uncombin": 312, "revis": 312, "Such": [312, 313], "spirit": 312, "address": 312, "concern": 312, "ever": 312, "proxi": 312, "statement": 312, "perman": 312, "forth": 312, "expressli": 312, "grant": 312, "implic": 312, "estoppel": 312, "accident": 312, "fail": 312, "bring": 312, "issu": 312, "email": 312, "AND": 312, "translat": 312, "pysindi": [312, 325], "dynamicslab": 312, "pyemma": 312, "markovmodel": 312, "mit": 312, "sparsereg": 312, "brian": 312, "silva": 312, "kathleen": 312, "champion": 312, "charg": 312, "person": 312, "merg": 312, "sublicens": 312, "sell": 312, "whom": 312, "furnish": 312, "substanti": 312, "THE": 312, "AS": 312, "warranti": 312, "OF": 312, "OR": 312, "BUT": 312, "NOT": 312, "TO": 312, "merchant": 312, "FOR": 312, "noninfring": 312, "IN": 312, "NO": 312, "holder": 312, "BE": 312, "contract": 312, "tort": 312, "WITH": 312, "classifi": 313, "simplefilt": 313, "visibl": [313, 327], "500000": 313, "i_1": 313, "i_k": 313, "evid": 313, "highli": [313, 314, 324], "disadvantag": 313, "enough": [313, 324, 329], "clustering_new": 313, "loglog": [313, 316, 332], "costli": 313, "coverag": 313, "shortest": 313, "analog": [313, 326], "mostli": 313, "constantli": 313, "fed": 313, "quicker": 313, "finish": 313, "nice": [313, 320, 324, 332], "hyperparamet": 313, "difficult": 313, "assess": 313, "export": 313, "chebyshev": 313, "infti": [313, 325], "_1": 313, "struct": 313, "maximummetr": 313, "typenam": 313, "const": 313, "size_t": 313, "compute_squar": 313, "helper": [313, 328], "maxnormmodul": 313, "maxnorm": 313, "pybind11": 313, "cpp": 313, "setuptool": 313, "custom_metr": 313, "find_packag": 313, "ext_modul": 313, "languag": 313, "include_dir": 313, "get_includ": 313, "extra_compile_arg": 313, "fopenmp": 313, "openmp": 313, "extra_link_arg": 313, "lgomp": 313, "success": [313, 321], "clustering_custom_metr": 313, "stuart": 313, "lloyd": 313, "quantiz": 313, "pcm": 313, "ieee": [313, 320], "scullei": 313, "web": 313, "19th": 313, "confer": 313, "world": 313, "wide": 313, "1177": 313, "1178": 313, "peopl": [314, 315], "behind": [314, 325], "variant": [314, 321], "studi": [314, 316, 318, 328], "z_m": 314, "z_i": 314, "az_k": 314, "arrang": 314, "y_": 314, "yv": 314, "uw": 314, "remark": 314, "notion": [314, 328, 331], "standard_dmd": 314, "exact_dmd": 314, "_xa": 314, "uu": 314, "orthogon": 314, "imag": [314, 328], "especi": 314, "ax_t": 314, "standard_model": 314, "exact_model": 314, "00003048": 314, "00015445": 314, "traj_standard": 314, "traj_exact": 314, "perfectli": 314, "psi_1": [315, 331], "psi_2": 315, "psi_k": [315, 331], "underdetermin": 315, "dagger": 315, "25000": 315, "deg": 315, "edmd_estim": 315, "edmd_model": 315, "four": [315, 322, 328, 331], "peptid": 316, "exhibit": 316, "room": 316, "dihedr": 316, "angl": 316, "kinteic": 316, "atom": 316, "mdshare": 316, "is_avail": [316, 317, 332], "backend": [316, 317, 326, 332], "cudnn": [316, 317, 326, 332], "set_num_thread": [316, 317, 326, 332], "ala_coords_fil": 316, "3x250n": 316, "heavi": 316, "npz": 316, "working_directori": 316, "fh": 316, "arr_": 316, "dihedral_fil": 316, "backbon": 316, "hb": [316, 327], "mincnt": 316, "n_val": [316, 326, 332], "train_data": [316, 326, 332], "val_data": [316, 326, 332], "random_split": [316, 326, 332], "batchnorm1d": [316, 317], "momentum": 316, "affin": 316, "track_running_stat": 316, "loader_train": [316, 317, 319, 326, 332], "loader_v": [316, 317, 326, 332], "maxi": 316, "zip": [316, 318, 328], "8025465225218795e": 316, "6695964336395264": 316, "1106631013244623e": 316, "7277129888534546": 316, "470411451824475e": 316, "8271698355674744": 316, "245184012077516e": 316, "9025066494941711": 316, "952666444703937e": 316, "8756899833679199": 316, "31223042041529e": 316, "9684250354766846": 316, "argmax": 316, "vamp_estim": [316, 331], "flat": [316, 327], "grai": 316, "vamp_model": 316, "major": 316, "bmsm": [316, 323], "draw_initial_posit": 317, "vstack": 317, "forward_transform": 317, "back_transform": [317, 319], "xinit_train": 317, "traj_train": 317, "xinit_test": 317, "15000": 317, "traj_test": 317, "ipython": [317, 321, 331], "to_html5_video": [317, 321, 331], "browser": [317, 321, 331], "video": [317, 321, 331], "tag": [317, 321, 331], "ds_train": 317, "ds_test": 317, "bw": [317, 319], "57863921": 317, "00563756": 317, "kcca": [317, 319, 321], "plot_singular_funct": 317, "col": [317, 321], "n_iter": 317, "cluster_kcca": 317, "memberships_transform_kcca": 317, "traj_test_backward": 317, "coherence_scor": 317, "membership_transform": 317, "did": [317, 329, 331], "mismatch": [317, 319], "return_count": 317, "plot_mismatch": 317, "ref": 317, "ix_good": 317, "setdiff1d": 317, "assume_uniqu": 317, "score_kcca": 317, "mismatches_kcca": 317, "bickleyjet3dtorchd": 317, "ds_train_3d": 317, "ds_test_3d": 317, "batchsampl": 317, "randomsampl": 317, "sequentialsampl": 317, "collate_fn": 317, "train_sampl": 317, "2048": 317, "drop_last": 317, "val_sampl": 317, "ourselv": 317, "checkpoint": 317, "schedul": 317, "pathlib": 317, "checkpointmanag": 317, "lr_schedul": 317, "reducelronplateau": 317, "checkpoints_dir": 317, "output_dir": 317, "opt": 317, "patienc": 317, "8000": 317, "val_scor": 317, "xval": 317, "yval": 317, "semilogx": [317, 318], "ckpt": 317, "vamp_vampnet": [317, 319], "cluster_vampnet": 317, "memberships_transform_vampnet": 317, "score_vampnet": 317, "mismatches_vampnet": 317, "chirnd": 317, "fan_in": 317, "bias_var": 317, "out_dim": 317, "n_basi": 317, "w2": 317, "b2": 317, "cluster_vamp": 317, "memberships_transform_vamp": 317, "score_vamp": 317, "mismatches_vamp": 317, "cluster_kvad": 317, "memberships_transform_kvad": 317, "score_kvad": 317, "mismatches_kvad": 317, "kvadnets_lob": 317, "epoch_train_scor": 317, "batch_0": 317, "batch_t": 317, "epoch_val_scor": 317, "chi_kvadnet": 317, "cluster_kvadnet": 317, "memberships_transform_kvadnet": 317, "score_kvadnet": 317, "mismatches_kvadnet": 317, "vamp2_scor": 317, "tabul": 317, "88749": 317, "0796252": 317, "8802": 317, "8305": 317, "0762447": 317, "8598": 317, "07734": 317, "0749358": 317, "7622": 317, "75647": 317, "0677209": 317, "738": 317, "6162": 317, "0667439": 317, "7298": 317, "prinz_system": 318, "set_ytick": [318, 319], "nontrivi": 318, "n_eigenfunct": 318, "set1": 318, "finest_cl": 318, "finest_msm": 318, "eig_n": 318, "y0_": 318, "y0": [318, 325], "interp": [318, 327], "lbl": 318, "ev": 318, "facecolor": [318, 319], "white": [318, 319, 328], "verticalalign": [318, 319], "horizontalalign": [318, 319], "fontsiz": [318, 319], "spine": 318, "99e2": 318, "va": 318, "homogen": [319, 331], "binari": 319, "777": 319, "squareroot": 319, "brbg": 319, "legend1": 319, "plot_method": 319, "score_std": 319, "feat": [319, 332], "feat_cc": 319, "vmag": 319, "scatter_s": 319, "xxyi": 319, "array_split": 319, "z00": 319, "clip": [319, 321], "height_ratio": 319, "ax_contour": 319, "levels_fin": 319, "tick": [319, 328], "set_yticklabel": [319, 328], "ix_0": 319, "ix_1": 319, "plasma": 319, "pm": [319, 320], "transax": 319, "n_proj": 319, "count_nonzero": 319, "rescaled_proj": 319, "1f": 319, "acc": 319, "vamp_edmd": 319, "lt": [319, 326, 327], "axessubplot": 319, "gt": [319, 326, 327], "vamp_back": 319, "whitened_traj": 319, "kedmd_transf": 319, "vamp_kedmd": 319, "vamp_kcca": 319, "slsqp": [319, 321], "551e": 319, "000e": 319, "kcca_transform": 319, "multilay": [319, 326, 332], "preceptron": [319, 326], "architectur": [319, 326], "relu": [319, 326, 332], "dtr": 319, "evr": 319, "vamp_msm": 319, "wherea": [320, 324, 325], "oppos": 320, "harder": 320, "belief": 320, "ground_truth": 320, "prefer": 320, "hidden_trajectori": 320, "observation_trajectori": 320, "macrost": [320, 324], "i_hidden": 320, "i_ob": 320, "hidden_ix": 320, "subselected_ob": 320, "obs_ix": 320, "matshow": 320, "xaxi": 320, "set_ticks_posit": 320, "bottom": [320, 321], "tight_layout": [320, 328, 331], "hmm_est_real": 320, "034": 320, "init_hmm_random": 320, "hmm_est_random": 320, "1652": 320, "9913478370843": 320, "1660": 320, "3598109385": 320, "easiest": 320, "ml": [320, 323], "10th": 320, "slash": 320, "errorbar": 320, "xerr": 320, "fmt": 320, "lawrenc": 320, "rabin": 320, "speech": 320, "recognit": 320, "illustr": [321, 322, 324], "multidimension": 321, "trick": 321, "popular": 321, "sup_": 321, "substack": 321, "_y": 321, "simplifi": 321, "auxiliari": 321, "x_j": [321, 322], "guid": [321, 322], "bickley_data": 321, "adapt": 321, "nine": 321, "kcca_estim": 321, "kcca_model": 321, "vortic": 321, "sake": [321, 322], "opt_data": 321, "opt_data_lag": 321, "bw_opt": 321, "eps_opt": 321, "miniconda3": 321, "runtimewarn": 321, "kcca_opt": 321, "matt": 321, "mollenhau": 321, "5100267": 321, "gari": 321, "froyland": 321, "naratip": 321, "santitissadeekorn": 321, "monahan": 321, "transport": 321, "interdisciplinari": 321, "043116": 321, "3502450": 321, "hilbert": 322, "highlight": [322, 327], "moreov": 322, "implent": 322, "vice": [322, 327, 328, 331], "versa": [322, 327, 328, 331], "hist2d": 322, "2500": 322, "rand": 322, "kedmd_estim": 322, "kedmd_model": 322, "invari": [322, 324], "s_0": 323, "lambda_0": 323, "priori": 323, "p11": 323, "p22": 323, "p33": 323, "true_msm": 323, "97174192": 323, "02825808": 323, "01436794": 323, "97057023": 323, "01506183": 323, "02829029": 323, "97170971": 323, "24913759": 323, "48999019": 323, "26087221": 323, "know": [323, 328], "msm_statdist": 323, "97150033": 323, "02849967": 323, "01424983": 323, "97116296": 323, "0145872": 323, "0291744": 323, "9708256": 323, "statdist": 323, "anyth": 323, "counts_effect": 323, "bmsm_posterior": 323, "evaluat": 323, "stats_p": 323, "stats_timescal": 323, "stats_c": 323, "attach": [323, 328], "stats_mfpt": 323, "fill_between": 323, "alexand": [323, 328], "fischer": [323, 324], "wilhelm": 323, "huisinga": [323, 324], "deuflhard": [323, 324], "hybrid": 323, "mont": 323, "successor": 324, "crispli": 324, "rainbow": 324, "weaker": 324, "connected": 324, "rigor": 324, "digraph": [324, 328, 330], "add_nod": [324, 328], "add_edg": [324, 328], "get_edge_attribut": [324, 328], "fruchterman_reingold_layout": 324, "draw_networkx_nod": [324, 328], "draw_networkx_label": [324, 328, 330], "get_node_attribut": [324, 328], "draw_networkx_edg": [324, 328], "connectionstyl": [324, 328], "arc3": [324, 328], "rad": [324, 328], "96181851": 324, "03818149": 324, "0283872": 324, "9716128": 324, "disentangl": [324, 326, 332], "42643471": 324, "57356529": 324, "argsort": 324, "xtick": 324, "nearli": 324, "uncoupl": 324, "constitut": 325, "bmatrix": 325, "3x_1x_2": 325, "7x_2": 325, "expans": 325, "ix_2": 325, "vdot": 325, "t_m": 325, "qquad": 325, "theta_": 325, "ell": 325, "theta_i": 325, "theta_3": 325, "x_3": 325, "understood": 325, "xi_1": 325, "xi_2": 325, "xi_n": 325, "xi_i": 325, "2x": 325, "decoupl": 325, "x_0e": 325, "2t": 325, "y_0e": 325, "x_0": 325, "y_0": 325, "tfrac": 325, "workflow": 325, "inspect": 325, "seem": 325, "999": 325, "y_test": 325, "ro": 325, "compress": 326, "life": 326, "downstream": 326, "bit": 326, "thing": [326, 327], "layer": 326, "output_nonlinear": 326, "sigmoid": 326, "initial_batchnorm": 326, "tae_model": 326, "overfit": 326, "semilogi": 326, "proj": 326, "line2d": 326, "0x7f5ad72d93d0": 326, "perceptron": [326, 332], "_sequenti": [326, 332], "_to_mu": 326, "_to_logvar": 326, "tvae_model": 326, "diederik": 326, "kingma": 326, "bay": 326, "6114": 326, "ica": 327, "pracitic": 327, "ask": [327, 328], "gap": [327, 331], "signific": 327, "140108282841360": 327, "0x7f6d35359130": 327, "spent": 327, "supersampl": 327, "intens": [327, 328, 331], "frequent": 327, "brighter": 327, "n_interp": 327, "ftraj_interp": 327, "equilibirum": 327, "tica_model": 327, "cf": 327, "61266834": 327, "28280506": 327, "tic": 327, "01713845": 327, "65760997": 327, "tica_model_kinetic_map": 327, "tica_model_commute_map": 327, "koopman_estim": 327, "reweighting_model": 327, "tica_model_reweight": 327, "lev": 327, "davidovich": 327, "landau": 327, "evgenii": 327, "mikhailovich": 327, "lifshitz": 327, "quantum": 327, "relativist": 327, "elsevi": 327, "answer": 328, "trap": 328, "motiv": 328, "overcom": 328, "freeli": 328, "soft": 328, "enter": 328, "darker": 328, "lighter": 328, "imagin": 328, "hill": 328, "question": 328, "man": 328, "he": 328, "law": 328, "tell": 328, "countabl": 328, "c_n": 328, "sum_n": 328, "But": 328, "rise": [328, 331], "bvp": 328, "gradual": 328, "leav": 328, "detour": 328, "tot": 328, "165e": 328, "pi_iq_i": 328, "264e": 328, "7911": 328, "887": 328, "six": 328, "lump": 328, "systemat": [328, 331, 332], "subdivid": 328, "remainder_upp": 328, "remainder_low": 328, "flux_set": 328, "cycl": 328, "lack": 328, "circular_layout": [328, 330], "1100": 328, "draw_networkx_edge_label": 328, "arrows": 328, "s_k": 328, "choosen": 328, "strongest": 328, "mlmsm": 328, "cube": 328, "berezhkovskii": 328, "gerhard": 328, "hummer": 328, "attila": 328, "szabo": 328, "05b614": 328, "doyl": 328, "lauri": 328, "snell": 328, "electr": 328, "1984": 328, "angelo": 328, "valleriani": 328, "circular": 328, "scientif": 328, "dimensionless": 329, "stead": 329, "k_i": 329, "contruct": 329, "biased_potenti": 329, "82456604": 329, "19136811": 329, "piec": 329, "trajectories_shift": 329, "criteria": 329, "maaik": 329, "phd": 329, "_tram": 329, "convergencewarn": 329, "0005462764459391867": 329, "_biased_conf_energi": 329, "bin_numb": 329, "apidoc": 330, "countain": 330, "histogram_valu": 330, "from_numpy_matrix": 330, "create_us": 330, "draw_circular": 330, "node_color": 330, "90ee90": 330, "font_siz": 330, "submodel_explicit": 330, "trace": 330, "ariat": 331, "pproach": 331, "arkov": 331, "rocess": 331, "1935": 331, "w_i": 331, "chi_i": 331, "whitenend": 331, "subcategori": 331, "extern": 331, "salvag": 331, "deficit": 331, "nonoverlap": 331, "8534787431760964": 331, "clearli": 331, "insight": 331, "background": 331, "consult": 331, "g_1": 331, "trasform": 331, "theorem": 331, "sigma_k": 331, "phi_1": 331, "phi_k": 331, "phi_i": 331, "foward": 331, "rho_1": 331, "foremost": 331, "92383913": 331, "02905651": 331, "39412183": 331, "40228095": 331, "40095045": 331, "40235857": 331, "u_i": 331, "g_i": 331, "awar": 331, "hyothet": 331, "avaiabl": 331, "struck": 331, "9238391327369158": 331, "8534787431760968": 331, "7699596561010507": 331, "scaled_model": 331, "disturb": 331, "oscillatori": 331, "_particl": 331, "5600": 331, "1944": 331, "n_sing": 331, "1600": 331, "sigma_2": 331, "forward_ful": 331, "clearer": 331, "middl": 331, "800": 331, "quit": 331, "splash": 331, "forward_component0": 331, "forward_component1": 331, "forward_component0123": 331, "scherer": 331, "moritz": 331, "hoffmann": 331, "194108": 331, "hardwar": 332, "vamp_model_vnet": 332, "vamp_model_direct": 332, "5f": 332, "78799": 332, "28104": 332, "dtraj_rec": 332, "95227187": 332, "04772813": 332, "05229995": 332, "94770005": 332}, "objects": {"deeptime.base": [[0, 0, 1, "", "Dataset"], [1, 0, 1, "", "Estimator"], [2, 0, 1, "", "Model"], [3, 0, 1, "", "Transformer"]], "deeptime.base.Dataset": [[0, 1, 1, "", "setflags"]], "deeptime.base.Estimator": [[1, 1, 1, "", "fetch_model"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "fit_fetch"], [1, 1, 1, "", "get_params"], [1, 2, 1, "", "has_model"], [1, 2, 1, "", "model"], [1, 1, 1, "", "set_params"]], "deeptime.base.Model": [[2, 1, 1, "", "copy"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "set_params"]], "deeptime.base.Transformer": [[3, 1, 1, "", "__call__"], [3, 1, 1, "", "transform"]], "deeptime": [[245, 3, 0, "-", "basis"], [246, 3, 0, "-", "clustering"], [247, 3, 0, "-", "covariance"], [248, 3, 0, "-", "data"], [249, 3, 0, "-", "decomposition"], [250, 3, 0, "-", "kernels"], [254, 3, 0, "-", "numeric"], [255, 3, 0, "-", "plots"], [256, 3, 0, "-", "sindy"], [257, 3, 0, "-", "util"]], "deeptime.basis": [[4, 0, 1, "", "Concatenation"], [5, 0, 1, "", "Identity"], [6, 0, 1, "", "Monomials"], [7, 0, 1, "", "Observable"]], "deeptime.basis.Concatenation": [[4, 1, 1, "", "__call__"], [4, 1, 1, "", "transform"]], "deeptime.basis.Identity": [[5, 1, 1, "", "__call__"], [5, 1, 1, "", "transform"]], "deeptime.basis.Monomials": [[6, 1, 1, "", "__call__"], [6, 1, 1, "", "get_feature_names"], [6, 1, 1, "", "get_feature_names_out"], [6, 1, 1, "", "transform"]], "deeptime.basis.Observable": [[7, 1, 1, "", "__call__"], [7, 1, 1, "", "transform"]], "deeptime.clustering": [[8, 0, 1, "", "BoxDiscretization"], [9, 0, 1, "", "BoxDiscretizationModel"], [10, 0, 1, "", "ClusterModel"], [11, 0, 1, "", "KMeans"], [12, 0, 1, "", "KMeansModel"], [13, 0, 1, "", "MetricRegistry"], [14, 0, 1, "", "MiniBatchKMeans"], [15, 0, 1, "", "RegularSpace"], [16, 4, 1, "", "kmeans_plusplus"], [17, 5, 1, "", "metrics"]], "deeptime.clustering.BoxDiscretization": [[8, 1, 1, "", "fetch_model"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "fit_fetch"], [8, 1, 1, "", "get_params"], [8, 2, 1, "", "has_model"], [8, 2, 1, "", "model"], [8, 1, 1, "", "set_params"]], "deeptime.clustering.BoxDiscretizationModel": [[9, 1, 1, "", "__call__"], [9, 2, 1, "", "cluster_centers"], [9, 2, 1, "", "converged"], [9, 1, 1, "", "copy"], [9, 1, 1, "", "get_params"], [9, 2, 1, "", "metric"], [9, 2, 1, "", "n_clusters"], [9, 1, 1, "", "set_params"], [9, 1, 1, "", "transform"], [9, 1, 1, "", "transform_onehot"]], "deeptime.clustering.ClusterModel": [[10, 1, 1, "", "__call__"], [10, 2, 1, "", "cluster_centers"], [10, 2, 1, "", "converged"], [10, 1, 1, "", "copy"], [10, 1, 1, "", "get_params"], [10, 2, 1, "", "metric"], [10, 2, 1, "", "n_clusters"], [10, 1, 1, "", "set_params"], [10, 1, 1, "", "transform"]], "deeptime.clustering.KMeans": [[11, 1, 1, "", "__call__"], [11, 1, 1, "", "fetch_model"], [11, 1, 1, "", "fit"], [11, 1, 1, "", "fit_fetch"], [11, 1, 1, "", "fit_transform"], [11, 2, 1, "", "fixed_seed"], [11, 1, 1, "", "get_params"], [11, 2, 1, "", "has_model"], [11, 2, 1, "", "init_strategy"], [11, 2, 1, "", "initial_centers"], [11, 2, 1, "", "max_iter"], [11, 2, 1, "", "metric"], [11, 2, 1, "", "model"], [11, 2, 1, "", "n_clusters"], [11, 2, 1, "", "n_jobs"], [11, 1, 1, "", "set_params"], [11, 2, 1, "", "tolerance"], [11, 1, 1, "", "transform"]], "deeptime.clustering.KMeansModel": [[12, 1, 1, "", "__call__"], [12, 2, 1, "", "cluster_centers"], [12, 2, 1, "", "converged"], [12, 1, 1, "", "copy"], [12, 1, 1, "", "get_params"], [12, 2, 1, "", "inertia"], [12, 2, 1, "", "inertias"], [12, 2, 1, "", "metric"], [12, 2, 1, "", "n_clusters"], [12, 1, 1, "", "score"], [12, 1, 1, "", "set_params"], [12, 2, 1, "", "tolerance"], [12, 1, 1, "", "transform"]], "deeptime.clustering.MetricRegistry": [[13, 2, 1, "", "available"], [13, 1, 1, "", "register"]], "deeptime.clustering.MiniBatchKMeans": [[14, 1, 1, "", "__call__"], [14, 1, 1, "", "fetch_model"], [14, 1, 1, "", "fit"], [14, 1, 1, "", "fit_fetch"], [14, 1, 1, "", "fit_transform"], [14, 2, 1, "", "fixed_seed"], [14, 1, 1, "", "get_params"], [14, 2, 1, "", "has_model"], [14, 2, 1, "", "init_strategy"], [14, 2, 1, "", "initial_centers"], [14, 2, 1, "", "max_iter"], [14, 2, 1, "", "metric"], [14, 2, 1, "", "model"], [14, 2, 1, "", "n_clusters"], [14, 2, 1, "", "n_jobs"], [14, 1, 1, "", "partial_fit"], [14, 1, 1, "", "set_params"], [14, 2, 1, "", "tolerance"], [14, 1, 1, "", "transform"]], "deeptime.clustering.RegularSpace": [[15, 2, 1, "", "dmin"], [15, 1, 1, "", "fetch_model"], [15, 1, 1, "", "fit"], [15, 1, 1, "", "fit_fetch"], [15, 1, 1, "", "get_params"], [15, 2, 1, "", "has_model"], [15, 2, 1, "", "max_centers"], [15, 2, 1, "", "metric"], [15, 2, 1, "", "model"], [15, 2, 1, "", "n_clusters"], [15, 2, 1, "", "n_jobs"], [15, 1, 1, "", "partial_fit"], [15, 1, 1, "", "set_params"]], "deeptime.covariance": [[18, 0, 1, "", "Covariance"], [19, 0, 1, "", "CovarianceModel"], [20, 0, 1, "", "KoopmanWeightingEstimator"], [21, 0, 1, "", "KoopmanWeightingModel"], [229, 0, 1, "", "WhiteningTransform"], [230, 4, 1, "", "covar"], [231, 4, 1, "", "covars"], [232, 4, 1, "", "moments_XX"], [233, 4, 1, "", "moments_XXXY"], [234, 4, 1, "", "moments_block"]], "deeptime.covariance.Covariance": [[18, 2, 1, "", "bessels_correction"], [18, 2, 1, "", "compute_c00"], [18, 2, 1, "", "compute_c0t"], [18, 2, 1, "", "compute_ctt"], [18, 2, 1, "", "diag_only"], [18, 1, 1, "", "fetch_model"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "fit_fetch"], [18, 1, 1, "", "get_params"], [18, 2, 1, "", "has_model"], [18, 2, 1, "", "is_lagged"], [18, 2, 1, "", "lagtime"], [18, 2, 1, "", "model"], [18, 2, 1, "", "ncov"], [18, 1, 1, "", "partial_fit"], [18, 2, 1, "", "remove_data_mean"], [18, 2, 1, "", "reversible"], [18, 1, 1, "", "set_params"], [18, 2, 1, "", "sparse_mode"]], "deeptime.covariance.CovarianceModel": [[19, 2, 1, "", "bessels_correction"], [19, 1, 1, "", "copy"], [19, 2, 1, "", "cov_00"], [19, 2, 1, "", "cov_0t"], [19, 2, 1, "", "cov_tt"], [19, 2, 1, "", "data_mean_removed"], [19, 1, 1, "", "get_params"], [19, 2, 1, "", "lagtime"], [19, 2, 1, "", "mean_0"], [19, 2, 1, "", "mean_t"], [19, 1, 1, "", "set_params"], [19, 2, 1, "", "symmetrized"], [19, 1, 1, "", "whiten"]], "deeptime.covariance.KoopmanWeightingEstimator": [[20, 1, 1, "", "__call__"], [20, 1, 1, "", "fetch_model"], [20, 1, 1, "", "fit"], [20, 1, 1, "", "fit_fetch"], [20, 1, 1, "", "fit_transform"], [20, 1, 1, "", "get_params"], [20, 2, 1, "", "has_model"], [20, 2, 1, "", "lagtime"], [20, 2, 1, "", "model"], [20, 1, 1, "", "partial_fit"], [20, 1, 1, "", "set_params"], [20, 1, 1, "", "transform"]], "deeptime.covariance.KoopmanWeightingModel": [[21, 1, 1, "", "__call__"], [21, 2, 1, "", "const_weight_input"], [21, 1, 1, "", "copy"], [21, 2, 1, "", "covariances"], [21, 1, 1, "", "get_params"], [21, 2, 1, "", "koopman_operator"], [21, 1, 1, "", "set_params"], [21, 1, 1, "", "transform"], [21, 1, 1, "", "weights"], [21, 2, 1, "", "weights_input"], [21, 2, 1, "", "whitening_transformation"]], "deeptime.covariance.WhiteningTransform": [[229, 1, 1, "", "__call__"], [229, 1, 1, "", "transform"]], "deeptime.data": [[235, 0, 1, "", "BickleyJet"], [236, 0, 1, "", "BirthDeathChain"], [237, 0, 1, "", "CustomSystem"], [238, 0, 1, "", "DoubleWellDiscrete"], [239, 0, 1, "", "DrunkardsWalk"], [240, 0, 1, "", "Ellipsoids"], [241, 0, 1, "", "PBFSimulator"], [242, 0, 1, "", "TimeDependentSystem"], [243, 0, 1, "", "TimeIndependentSystem"], [22, 4, 1, "", "abc_flow"], [23, 4, 1, "", "bickley_jet"], [24, 4, 1, "", "birth_death_chain"], [25, 4, 1, "", "custom_ode"], [26, 4, 1, "", "custom_sde"], [27, 4, 1, "", "double_well_2d"], [28, 4, 1, "", "double_well_discrete"], [29, 4, 1, "", "drunkards_walk"], [30, 4, 1, "", "ellipsoids"], [31, 4, 1, "", "lorenz_system"], [32, 4, 1, "", "ornstein_uhlenbeck"], [33, 4, 1, "", "position_based_fluids"], [34, 4, 1, "", "prinz_potential"], [35, 4, 1, "", "quadruple_well"], [36, 4, 1, "", "quadruple_well_asymmetric"], [37, 4, 1, "", "sqrt_model"], [38, 4, 1, "", "swissroll_model"], [39, 4, 1, "", "thomas_attractor"], [40, 4, 1, "", "time_dependent_quintuple_well"], [41, 4, 1, "", "tmatrix_metropolis1d"], [42, 4, 1, "", "triple_well_1d"], [43, 4, 1, "", "triple_well_2d"]], "deeptime.data.BickleyJet": [[235, 2, 1, "", "L0"], [235, 2, 1, "", "U0"], [235, 1, 1, "", "__call__"], [235, 1, 1, "", "apply_periodic_boundary_conditions"], [235, 2, 1, "", "c"], [235, 2, 1, "", "dimension"], [235, 2, 1, "", "eps"], [235, 2, 1, "", "f"], [235, 1, 1, "", "generate"], [235, 2, 1, "", "h"], [235, 2, 1, "", "has_potential_function"], [235, 2, 1, "", "integrator"], [235, 2, 1, "", "k"], [235, 2, 1, "", "n_steps"], [235, 2, 1, "", "periodic_bc"], [235, 1, 1, "", "potential"], [235, 2, 1, "", "r0"], [235, 2, 1, "", "time_dependent"], [235, 1, 1, "", "to_3d"], [235, 1, 1, "", "trajectory"], [235, 2, 1, "", "vectorized_f"]], "deeptime.data.BirthDeathChain": [[236, 1, 1, "", "committor_backward"], [236, 1, 1, "", "committor_forward"], [236, 1, 1, "", "flux"], [236, 2, 1, "", "msm"], [236, 1, 1, "", "netflux"], [236, 1, 1, "", "rate"], [236, 2, 1, "", "stationary_distribution"], [236, 1, 1, "", "totalflux"], [236, 2, 1, "", "transition_matrix"]], "deeptime.data.CustomSystem": [[237, 1, 1, "", "__call__"], [237, 2, 1, "", "dimension"], [237, 2, 1, "", "f"], [237, 2, 1, "", "h"], [237, 2, 1, "", "has_potential_function"], [237, 2, 1, "", "integrator"], [237, 2, 1, "", "n_steps"], [237, 1, 1, "", "potential"], [237, 2, 1, "", "time_dependent"], [237, 1, 1, "", "trajectory"], [237, 2, 1, "", "vectorized_f"]], "deeptime.data.DoubleWellDiscrete": [[238, 2, 1, "", "analytic_msm"], [238, 2, 1, "", "dtraj"], [238, 1, 1, "", "dtraj_n"], [238, 1, 1, "", "dtraj_n2"], [238, 2, 1, "", "dtraj_n2bad"], [238, 2, 1, "", "dtraj_n2good"], [238, 2, 1, "", "dtraj_n6good"], [238, 1, 1, "", "simulate_trajectories"], [238, 1, 1, "", "simulate_trajectory"], [238, 2, 1, "", "transition_matrix"]], "deeptime.data.DrunkardsWalk": [[239, 1, 1, "", "add_barrier"], [239, 1, 1, "", "coordinate_to_state"], [239, 1, 1, "", "is_valid_coordinate"], [239, 2, 1, "", "msm"], [239, 1, 1, "", "plot_2d_map"], [239, 1, 1, "", "plot_network"], [239, 1, 1, "", "plot_path"], [239, 1, 1, "", "state_to_coordinate"], [239, 1, 1, "", "walk"]], "deeptime.data.Ellipsoids": [[240, 2, 1, "", "covariance_matrix"], [240, 1, 1, "", "discrete_trajectory"], [240, 1, 1, "", "map_discrete_to_observations"], [240, 2, 1, "", "msm"], [240, 1, 1, "", "observations"], [240, 2, 1, "", "random_state"], [240, 2, 1, "", "seed"]], "deeptime.data.PBFSimulator": [[241, 2, 1, "", "domain_size"], [241, 1, 1, "", "make_animation"], [241, 2, 1, "", "n_particles"], [241, 1, 1, "", "run"], [241, 1, 1, "", "simulate_oscillatory_force"], [241, 1, 1, "", "transform_to_density"]], "deeptime.data.TimeDependentSystem": [[242, 1, 1, "", "__call__"], [242, 2, 1, "", "dimension"], [242, 2, 1, "", "f"], [242, 2, 1, "", "h"], [242, 2, 1, "", "has_potential_function"], [242, 2, 1, "", "integrator"], [242, 2, 1, "", "n_steps"], [242, 1, 1, "", "potential"], [242, 2, 1, "", "time_dependent"], [242, 1, 1, "", "trajectory"], [242, 2, 1, "", "vectorized_f"]], "deeptime.data.TimeIndependentSystem": [[243, 1, 1, "", "__call__"], [243, 2, 1, "", "dimension"], [243, 2, 1, "", "f"], [243, 2, 1, "", "h"], [243, 2, 1, "", "has_potential_function"], [243, 2, 1, "", "integrator"], [243, 2, 1, "", "n_steps"], [243, 1, 1, "", "potential"], [243, 2, 1, "", "time_dependent"], [243, 1, 1, "", "trajectory"], [243, 2, 1, "", "vectorized_f"]], "deeptime.decomposition": [[44, 0, 1, "", "CovarianceKoopmanModel"], [45, 0, 1, "", "DMD"], [46, 0, 1, "", "DMDModel"], [47, 0, 1, "", "EDMD"], [48, 0, 1, "", "EDMDModel"], [49, 0, 1, "", "KVAD"], [50, 0, 1, "", "KVADModel"], [51, 0, 1, "", "KernelCCA"], [52, 0, 1, "", "KernelCCAModel"], [53, 0, 1, "", "KernelEDMD"], [54, 0, 1, "", "KernelEDMDModel"], [55, 0, 1, "", "TICA"], [56, 0, 1, "", "TransferOperatorModel"], [57, 0, 1, "", "VAMP"], [58, 4, 1, "", "blocksplit_trajs"], [59, 4, 1, "", "cvsplit_trajs"], [73, 4, 1, "", "vamp_score"], [74, 4, 1, "", "vamp_score_cv"], [75, 4, 1, "", "vamp_score_data"]], "deeptime.decomposition.CovarianceKoopmanModel": [[44, 1, 1, "", "__call__"], [44, 1, 1, "", "backward"], [44, 1, 1, "", "ck_test"], [44, 1, 1, "", "copy"], [44, 2, 1, "", "cov"], [44, 2, 1, "", "cov_00"], [44, 2, 1, "", "cov_0t"], [44, 2, 1, "", "cov_tt"], [44, 2, 1, "", "cumulative_kinetic_variance"], [44, 2, 1, "", "dim"], [44, 1, 1, "", "effective_output_dimension"], [44, 2, 1, "", "epsilon"], [44, 1, 1, "", "expectation"], [44, 2, 1, "", "feature_component_correlation"], [44, 1, 1, "", "forward"], [44, 1, 1, "", "get_params"], [44, 2, 1, "", "instantaneous_coefficients"], [44, 2, 1, "", "instantaneous_obs"], [44, 2, 1, "", "koopman_matrix"], [44, 2, 1, "", "lagtime"], [44, 2, 1, "", "mean_0"], [44, 2, 1, "", "mean_t"], [44, 2, 1, "", "operator"], [44, 2, 1, "", "operator_inverse"], [44, 2, 1, "", "output_dimension"], [44, 1, 1, "", "propagate"], [44, 2, 1, "", "scaling"], [44, 1, 1, "", "score"], [44, 1, 1, "", "set_params"], [44, 2, 1, "", "singular_values"], [44, 2, 1, "", "singular_vectors_left"], [44, 2, 1, "", "singular_vectors_right"], [44, 2, 1, "", "timelagged_coefficients"], [44, 2, 1, "", "timelagged_obs"], [44, 1, 1, "", "timescales"], [44, 1, 1, "", "transform"], [44, 2, 1, "", "var_cutoff"], [44, 2, 1, "", "whitening_rank_0"], [44, 2, 1, "", "whitening_rank_t"]], "deeptime.decomposition.DMD": [[45, 1, 1, "", "__call__"], [45, 6, 1, "", "available_drivers"], [45, 6, 1, "", "available_modes"], [45, 1, 1, "", "fetch_model"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_fetch"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_params"], [45, 2, 1, "", "has_model"], [45, 2, 1, "", "model"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "deeptime.decomposition.DMDModel": [[46, 1, 1, "", "__call__"], [46, 1, 1, "", "copy"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "deeptime.decomposition.EDMD": [[47, 1, 1, "", "__call__"], [47, 6, 1, "", "available_operators"], [47, 1, 1, "", "fetch_model"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_fetch"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_params"], [47, 2, 1, "", "has_model"], [47, 2, 1, "", "model"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "deeptime.decomposition.EDMDModel": [[48, 1, 1, "", "__call__"], [48, 1, 1, "", "backward"], [48, 1, 1, "", "copy"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "get_params"], [48, 2, 1, "", "instantaneous_obs"], [48, 2, 1, "", "koopman_matrix"], [48, 2, 1, "", "operator"], [48, 2, 1, "", "operator_inverse"], [48, 2, 1, "", "output_dimension"], [48, 1, 1, "", "set_params"], [48, 2, 1, "", "timelagged_obs"], [48, 1, 1, "", "transform"]], "deeptime.decomposition.KVAD": [[49, 1, 1, "", "__call__"], [49, 2, 1, "", "dim"], [49, 2, 1, "", "epsilon"], [49, 1, 1, "", "fetch_model"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_fetch"], [49, 1, 1, "", "fit_transform"], [49, 1, 1, "", "get_params"], [49, 2, 1, "", "has_model"], [49, 2, 1, "", "model"], [49, 2, 1, "", "observable_transform"], [49, 1, 1, "", "set_params"], [49, 1, 1, "", "transform"]], "deeptime.decomposition.KVADModel": [[50, 1, 1, "", "__call__"], [50, 1, 1, "", "backward"], [50, 1, 1, "", "copy"], [50, 1, 1, "", "forward"], [50, 1, 1, "", "get_params"], [50, 2, 1, "", "instantaneous_obs"], [50, 2, 1, "", "koopman_matrix"], [50, 2, 1, "", "operator"], [50, 2, 1, "", "operator_inverse"], [50, 2, 1, "", "output_dimension"], [50, 1, 1, "", "set_params"], [50, 2, 1, "", "timelagged_obs"], [50, 1, 1, "", "transform"]], "deeptime.decomposition.KernelCCA": [[51, 1, 1, "", "fetch_model"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_fetch"], [51, 1, 1, "", "get_params"], [51, 2, 1, "", "has_model"], [51, 2, 1, "", "model"], [51, 1, 1, "", "set_params"]], "deeptime.decomposition.KernelCCAModel": [[52, 1, 1, "", "__call__"], [52, 1, 1, "", "backward"], [52, 1, 1, "", "copy"], [52, 1, 1, "", "forward"], [52, 1, 1, "", "get_params"], [52, 2, 1, "", "instantaneous_obs"], [52, 2, 1, "", "kernel"], [52, 2, 1, "", "koopman_matrix"], [52, 2, 1, "", "operator"], [52, 2, 1, "", "operator_inverse"], [52, 2, 1, "", "output_dimension"], [52, 1, 1, "", "set_params"], [52, 2, 1, "", "timelagged_obs"], [52, 1, 1, "", "transform"]], "deeptime.decomposition.KernelEDMD": [[53, 1, 1, "", "__call__"], [53, 1, 1, "", "fetch_model"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_fetch"], [53, 1, 1, "", "fit_transform"], [53, 1, 1, "", "get_params"], [53, 2, 1, "", "has_model"], [53, 2, 1, "", "model"], [53, 1, 1, "", "set_params"], [53, 1, 1, "", "transform"]], "deeptime.decomposition.KernelEDMDModel": [[54, 1, 1, "", "__call__"], [54, 1, 1, "", "backward"], [54, 1, 1, "", "copy"], [54, 1, 1, "", "forward"], [54, 1, 1, "", "get_params"], [54, 2, 1, "", "instantaneous_obs"], [54, 2, 1, "", "koopman_matrix"], [54, 2, 1, "", "operator"], [54, 2, 1, "", "operator_inverse"], [54, 2, 1, "", "output_dimension"], [54, 1, 1, "", "set_params"], [54, 2, 1, "", "timelagged_obs"], [54, 1, 1, "", "transform"]], "deeptime.decomposition.TICA": [[55, 1, 1, "", "__call__"], [55, 1, 1, "", "covariance_estimator"], [55, 2, 1, "", "dim"], [55, 2, 1, "", "epsilon"], [55, 1, 1, "", "fetch_model"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_fetch"], [55, 1, 1, "", "fit_from_covariances"], [55, 1, 1, "", "fit_from_timeseries"], [55, 1, 1, "", "fit_transform"], [55, 1, 1, "", "get_params"], [55, 2, 1, "", "has_model"], [55, 2, 1, "", "lagtime"], [55, 2, 1, "", "model"], [55, 1, 1, "", "partial_fit"], [55, 2, 1, "", "scaling"], [55, 1, 1, "", "set_params"], [55, 1, 1, "", "transform"], [55, 2, 1, "", "var_cutoff"]], "deeptime.decomposition.TransferOperatorModel": [[56, 1, 1, "", "__call__"], [56, 1, 1, "", "backward"], [56, 1, 1, "", "copy"], [56, 1, 1, "", "forward"], [56, 1, 1, "", "get_params"], [56, 2, 1, "", "instantaneous_obs"], [56, 2, 1, "", "koopman_matrix"], [56, 2, 1, "", "operator"], [56, 2, 1, "", "operator_inverse"], [56, 2, 1, "", "output_dimension"], [56, 1, 1, "", "set_params"], [56, 2, 1, "", "timelagged_obs"], [56, 1, 1, "", "transform"]], "deeptime.decomposition.VAMP": [[57, 1, 1, "", "__call__"], [57, 1, 1, "", "covariance_estimator"], [57, 2, 1, "", "dim"], [57, 2, 1, "", "epsilon"], [57, 1, 1, "", "fetch_model"], [57, 1, 1, "", "fit"], [57, 1, 1, "", "fit_fetch"], [57, 1, 1, "", "fit_from_covariances"], [57, 1, 1, "", "fit_from_timeseries"], [57, 1, 1, "", "fit_transform"], [57, 1, 1, "", "get_params"], [57, 2, 1, "", "has_model"], [57, 2, 1, "", "lagtime"], [57, 2, 1, "", "model"], [57, 1, 1, "", "partial_fit"], [57, 2, 1, "", "scaling"], [57, 1, 1, "", "set_params"], [57, 1, 1, "", "transform"], [57, 2, 1, "", "var_cutoff"]], "deeptime.decomposition.deep": [[60, 0, 1, "", "TAE"], [61, 0, 1, "", "TAEModel"], [62, 0, 1, "", "TVAE"], [63, 0, 1, "", "TVAEEncoder"], [64, 0, 1, "", "TVAEModel"], [65, 0, 1, "", "VAMPNet"], [66, 0, 1, "", "VAMPNetModel"], [67, 4, 1, "", "covariances"], [68, 4, 1, "", "koopman_matrix"], [69, 4, 1, "", "kvad_score"], [70, 4, 1, "", "sym_inverse"], [71, 4, 1, "", "vamp_score"], [72, 4, 1, "", "vampnet_loss"]], "deeptime.decomposition.deep.TAE": [[60, 1, 1, "", "__call__"], [60, 2, 1, "", "device"], [60, 2, 1, "", "dtype"], [60, 1, 1, "", "evaluate_loss"], [60, 1, 1, "", "fetch_model"], [60, 1, 1, "", "fit"], [60, 1, 1, "", "fit_fetch"], [60, 1, 1, "", "fit_transform"], [60, 1, 1, "", "get_params"], [60, 2, 1, "", "has_model"], [60, 2, 1, "", "learning_rate"], [60, 2, 1, "", "model"], [60, 2, 1, "", "optimizer"], [60, 1, 1, "", "set_params"], [60, 1, 1, "", "setup_optimizer"], [60, 2, 1, "", "train_losses"], [60, 1, 1, "", "transform"], [60, 2, 1, "", "validation_losses"]], "deeptime.decomposition.deep.TAEModel": [[61, 1, 1, "", "__call__"], [61, 1, 1, "", "copy"], [61, 2, 1, "", "decoder"], [61, 2, 1, "", "encoder"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"], [61, 1, 1, "", "transform"]], "deeptime.decomposition.deep.TVAE": [[62, 1, 1, "", "__call__"], [62, 2, 1, "", "device"], [62, 2, 1, "", "dtype"], [62, 1, 1, "", "evaluate_loss"], [62, 1, 1, "", "fetch_model"], [62, 1, 1, "", "fit"], [62, 1, 1, "", "fit_fetch"], [62, 1, 1, "", "fit_transform"], [62, 1, 1, "", "get_params"], [62, 2, 1, "", "has_model"], [62, 2, 1, "", "learning_rate"], [62, 2, 1, "", "model"], [62, 2, 1, "", "optimizer"], [62, 1, 1, "", "set_params"], [62, 1, 1, "", "setup_optimizer"], [62, 2, 1, "", "train_losses"], [62, 1, 1, "", "transform"], [62, 2, 1, "", "validation_losses"]], "deeptime.decomposition.deep.TVAEEncoder": [[63, 1, 1, "", "__call__"], [63, 1, 1, "", "add_module"], [63, 1, 1, "", "apply"], [63, 1, 1, "", "bfloat16"], [63, 1, 1, "", "buffers"], [63, 1, 1, "", "children"], [63, 1, 1, "", "cpu"], [63, 1, 1, "", "cuda"], [63, 1, 1, "", "double"], [63, 1, 1, "", "eval"], [63, 1, 1, "", "extra_repr"], [63, 1, 1, "", "float"], [63, 1, 1, "", "forward"], [63, 1, 1, "", "get_buffer"], [63, 1, 1, "", "get_extra_state"], [63, 1, 1, "", "get_parameter"], [63, 1, 1, "", "get_submodule"], [63, 1, 1, "", "half"], [63, 1, 1, "", "ipu"], [63, 1, 1, "", "load_state_dict"], [63, 1, 1, "", "modules"], [63, 1, 1, "", "named_buffers"], [63, 1, 1, "", "named_children"], [63, 1, 1, "", "named_modules"], [63, 1, 1, "", "named_parameters"], [63, 1, 1, "", "parameters"], [63, 1, 1, "", "register_backward_hook"], [63, 1, 1, "", "register_buffer"], [63, 1, 1, "", "register_forward_hook"], [63, 1, 1, "", "register_forward_pre_hook"], [63, 1, 1, "", "register_full_backward_hook"], [63, 1, 1, "", "register_load_state_dict_post_hook"], [63, 1, 1, "", "register_module"], [63, 1, 1, "", "register_parameter"], [63, 1, 1, "", "requires_grad_"], [63, 1, 1, "", "set_extra_state"], [63, 1, 1, "", "share_memory"], [63, 1, 1, "", "state_dict"], [63, 1, 1, "", "to"], [63, 1, 1, "", "to_empty"], [63, 1, 1, "", "train"], [63, 1, 1, "", "type"], [63, 1, 1, "", "xpu"], [63, 1, 1, "", "zero_grad"]], "deeptime.decomposition.deep.TVAEModel": [[64, 1, 1, "", "__call__"], [64, 1, 1, "", "copy"], [64, 2, 1, "", "decoder"], [64, 2, 1, "", "encoder"], [64, 1, 1, "", "get_params"], [64, 1, 1, "", "set_params"], [64, 1, 1, "", "transform"]], "deeptime.decomposition.deep.VAMPNet": [[65, 1, 1, "", "__call__"], [65, 2, 1, "", "device"], [65, 2, 1, "", "dtype"], [65, 2, 1, "", "epsilon"], [65, 1, 1, "", "fetch_model"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "fit_fetch"], [65, 1, 1, "", "fit_transform"], [65, 1, 1, "", "get_params"], [65, 2, 1, "", "has_model"], [65, 2, 1, "", "learning_rate"], [65, 2, 1, "", "lobe"], [65, 2, 1, "", "lobe_timelagged"], [65, 2, 1, "", "model"], [65, 2, 1, "", "optimizer"], [65, 1, 1, "", "partial_fit"], [65, 2, 1, "", "score_method"], [65, 1, 1, "", "set_params"], [65, 1, 1, "", "setup_optimizer"], [65, 2, 1, "", "train_scores"], [65, 1, 1, "", "transform"], [65, 1, 1, "", "validate"], [65, 2, 1, "", "validation_scores"]], "deeptime.decomposition.deep.VAMPNetModel": [[66, 1, 1, "", "__call__"], [66, 1, 1, "", "copy"], [66, 1, 1, "", "get_params"], [66, 2, 1, "", "lobe"], [66, 2, 1, "", "lobe_timelagged"], [66, 1, 1, "", "set_params"], [66, 1, 1, "", "transform"]], "deeptime.kernels": [[76, 0, 1, "", "GaussianKernel"], [77, 0, 1, "", "GeneralizedGaussianKernel"], [78, 0, 1, "", "Kernel"], [79, 0, 1, "", "LaplacianKernel"], [80, 0, 1, "", "PolynomialKernel"], [81, 0, 1, "", "TorchGaussianKernel"], [82, 4, 1, "", "is_torch_kernel"]], "deeptime.kernels.GaussianKernel": [[76, 1, 1, "", "__call__"], [76, 1, 1, "", "apply"], [76, 1, 1, "", "gram"], [76, 2, 1, "", "sigma"], [76, 6, 1, "", "valid_impls"]], "deeptime.kernels.GeneralizedGaussianKernel": [[77, 1, 1, "", "__call__"], [77, 1, 1, "", "apply"], [77, 1, 1, "", "gram"]], "deeptime.kernels.Kernel": [[78, 1, 1, "", "__call__"], [78, 1, 1, "", "apply"], [78, 1, 1, "", "gram"]], "deeptime.kernels.LaplacianKernel": [[79, 1, 1, "", "__call__"], [79, 1, 1, "", "apply"], [79, 1, 1, "", "gram"]], "deeptime.kernels.PolynomialKernel": [[80, 1, 1, "", "__call__"], [80, 1, 1, "", "apply"], [80, 1, 1, "", "gram"]], "deeptime.kernels.TorchGaussianKernel": [[81, 1, 1, "", "__call__"], [81, 1, 1, "", "apply"], [81, 1, 1, "", "gram"], [81, 2, 1, "", "sigma"], [81, 6, 1, "", "valid_impls"]], "deeptime.markov": [[83, 0, 1, "", "PCCAModel"], [84, 0, 1, "", "ReactiveFlux"], [85, 0, 1, "", "TransitionCountEstimator"], [86, 0, 1, "", "TransitionCountModel"], [87, 4, 1, "", "compute_connected_sets"], [88, 4, 1, "", "compute_dtrajs_effective"], [89, 4, 1, "", "compute_effective_stride"], [90, 4, 1, "", "count_states"], [114, 4, 1, "", "number_of_states"], [115, 4, 1, "", "pcca"], [116, 4, 1, "", "reactive_flux"]], "deeptime.markov.PCCAModel": [[83, 2, 1, "", "assignments"], [83, 2, 1, "", "coarse_grained_stationary_probability"], [83, 2, 1, "", "coarse_grained_transition_matrix"], [83, 1, 1, "", "copy"], [83, 1, 1, "", "get_params"], [83, 2, 1, "", "memberships"], [83, 2, 1, "", "metastable_distributions"], [83, 2, 1, "", "n_metastable"], [83, 1, 1, "", "set_params"], [83, 2, 1, "", "sets"]], "deeptime.markov.ReactiveFlux": [[84, 2, 1, "", "backward_committor"], [84, 1, 1, "", "coarse_grain"], [84, 1, 1, "", "copy"], [84, 2, 1, "", "forward_committor"], [84, 1, 1, "", "get_params"], [84, 2, 1, "", "gross_flux"], [84, 2, 1, "", "intermediate_states"], [84, 1, 1, "", "major_flux"], [84, 2, 1, "", "mfpt"], [84, 2, 1, "", "n_states"], [84, 2, 1, "", "net_flux"], [84, 1, 1, "", "pathways"], [84, 2, 1, "", "rate"], [84, 1, 1, "", "set_params"], [84, 2, 1, "", "source_states"], [84, 2, 1, "", "stationary_distribution"], [84, 2, 1, "", "target_states"], [84, 2, 1, "", "total_flux"]], "deeptime.markov.TransitionCountEstimator": [[85, 1, 1, "", "__call__"], [85, 1, 1, "", "count"], [85, 2, 1, "", "count_mode"], [85, 1, 1, "", "fetch_model"], [85, 1, 1, "", "fit"], [85, 1, 1, "", "fit_fetch"], [85, 1, 1, "", "fit_transform"], [85, 1, 1, "", "get_params"], [85, 2, 1, "", "has_model"], [85, 2, 1, "", "lagtime"], [85, 2, 1, "", "model"], [85, 2, 1, "", "n_states"], [85, 1, 1, "", "set_params"], [85, 2, 1, "", "sparse"], [85, 1, 1, "", "transform"]], "deeptime.markov.TransitionCountModel": [[86, 1, 1, "", "connected_sets"], [86, 1, 1, "", "copy"], [86, 2, 1, "", "count_matrix"], [86, 2, 1, "", "count_matrix_full"], [86, 1, 1, "", "count_matrix_histogram"], [86, 2, 1, "", "counting_mode"], [86, 1, 1, "", "get_params"], [86, 1, 1, "", "is_connected"], [86, 2, 1, "", "is_full_model"], [86, 2, 1, "", "lagtime"], [86, 2, 1, "", "n_states"], [86, 2, 1, "", "n_states_full"], [86, 2, 1, "", "selected_count_fraction"], [86, 2, 1, "", "selected_state_fraction"], [86, 1, 1, "", "set_params"], [86, 2, 1, "", "state_histogram"], [86, 2, 1, "", "state_histogram_full"], [86, 2, 1, "", "state_symbols"], [86, 2, 1, "", "state_symbols_with_blank"], [86, 2, 1, "", "states"], [86, 1, 1, "", "states_to_symbols"], [86, 1, 1, "", "submodel"], [86, 1, 1, "", "submodel_largest"], [86, 1, 1, "", "symbols_to_states"], [86, 2, 1, "", "total_count"], [86, 1, 1, "", "transform_discrete_trajectories_to_submodel"], [86, 2, 1, "", "visited_set"]], "deeptime.markov.hmm": [[91, 0, 1, "", "BayesianHMM"], [92, 0, 1, "", "BayesianHMMPosterior"], [93, 0, 1, "", "DiscreteOutputModel"], [94, 0, 1, "", "GaussianOutputModel"], [95, 0, 1, "", "HiddenMarkovModel"], [96, 0, 1, "", "MaximumLikelihoodHMM"], [97, 0, 1, "", "OutputModel"]], "deeptime.markov.hmm.BayesianHMM": [[91, 1, 1, "", "default"], [91, 1, 1, "", "fetch_model"], [91, 1, 1, "", "fit"], [91, 1, 1, "", "fit_fetch"], [91, 1, 1, "", "get_params"], [91, 2, 1, "", "has_model"], [91, 2, 1, "", "initial_distribution_prior"], [91, 2, 1, "", "initial_hmm"], [91, 2, 1, "", "model"], [91, 2, 1, "", "n_samples"], [91, 2, 1, "", "reversible"], [91, 1, 1, "", "set_params"], [91, 2, 1, "", "stationary"], [91, 2, 1, "", "store_hidden"], [91, 2, 1, "", "transition_matrix_prior"]], "deeptime.markov.hmm.BayesianHMMPosterior": [[92, 1, 1, "", "ck_test"], [92, 1, 1, "", "copy"], [92, 1, 1, "", "evaluate_samples"], [92, 1, 1, "", "gather_stats"], [92, 1, 1, "", "get_params"], [92, 2, 1, "", "hidden_state_trajectories_samples"], [92, 2, 1, "", "lagtime"], [92, 2, 1, "", "prior"], [92, 2, 1, "", "samples"], [92, 1, 1, "", "set_params"], [92, 1, 1, "", "submodel"], [92, 1, 1, "", "submodel_largest"], [92, 1, 1, "", "submodel_populous"], [92, 1, 1, "", "timescales"]], "deeptime.markov.hmm.DiscreteOutputModel": [[93, 1, 1, "", "copy"], [93, 1, 1, "", "fit"], [93, 1, 1, "", "generate_observation_trajectory"], [93, 1, 1, "", "get_params"], [93, 2, 1, "", "ignore_outliers"], [93, 1, 1, "", "map_observations_to_submodel"], [93, 2, 1, "", "n_hidden_states"], [93, 2, 1, "", "n_observable_states"], [93, 1, 1, "", "normalize"], [93, 2, 1, "", "output_probabilities"], [93, 2, 1, "", "prior"], [93, 1, 1, "", "sample"], [93, 1, 1, "", "set_params"], [93, 1, 1, "", "submodel"], [93, 1, 1, "", "to_state_probability_trajectory"]], "deeptime.markov.hmm.GaussianOutputModel": [[94, 1, 1, "", "copy"], [94, 1, 1, "", "fit"], [94, 1, 1, "", "generate_observation_trajectory"], [94, 1, 1, "", "get_params"], [94, 2, 1, "", "ignore_outliers"], [94, 2, 1, "", "means"], [94, 2, 1, "", "n_hidden_states"], [94, 2, 1, "", "n_observable_states"], [94, 1, 1, "", "sample"], [94, 1, 1, "", "set_params"], [94, 2, 1, "", "sigmas"], [94, 1, 1, "", "submodel"], [94, 1, 1, "", "to_state_probability_trajectory"]], "deeptime.markov.hmm.HiddenMarkovModel": [[95, 1, 1, "", "ck_test"], [95, 1, 1, "", "collect_observations_in_state"], [95, 1, 1, "", "compute_observation_likelihood"], [95, 1, 1, "", "compute_viterbi_paths"], [95, 1, 1, "", "copy"], [95, 1, 1, "", "correlation_obs"], [95, 2, 1, "", "count_model"], [95, 2, 1, "", "eigenvectors_left_obs"], [95, 2, 1, "", "eigenvectors_right_obs"], [95, 1, 1, "", "expectation_obs"], [95, 1, 1, "", "fingerprint_correlation_obs"], [95, 1, 1, "", "fingerprint_relaxation_obs"], [95, 1, 1, "", "get_params"], [95, 2, 1, "", "hidden_state_trajectories"], [95, 2, 1, "", "initial_count"], [95, 2, 1, "", "initial_distribution"], [95, 2, 1, "", "lagtime"], [95, 2, 1, "", "lifetimes"], [95, 2, 1, "", "likelihood"], [95, 2, 1, "", "likelihoods"], [95, 2, 1, "", "metastable_assignments"], [95, 2, 1, "", "metastable_distributions"], [95, 2, 1, "", "metastable_memberships"], [95, 2, 1, "", "metastable_sets"], [95, 2, 1, "", "n_hidden_states"], [95, 2, 1, "", "n_observation_states"], [95, 1, 1, "", "nonempty_obs"], [95, 2, 1, "", "observation_symbols"], [95, 2, 1, "", "observation_symbols_full"], [95, 2, 1, "", "output_model"], [95, 2, 1, "", "output_probabilities"], [95, 1, 1, "", "propagate"], [95, 1, 1, "", "relaxation_obs"], [95, 1, 1, "", "sample_by_observation_probabilities"], [95, 1, 1, "", "set_params"], [95, 1, 1, "", "simulate"], [95, 2, 1, "", "state_probabilities"], [95, 1, 1, "", "states_largest"], [95, 1, 1, "", "states_populous"], [95, 2, 1, "", "stationary_distribution_obs"], [95, 2, 1, "", "stride"], [95, 1, 1, "", "submodel"], [95, 1, 1, "", "submodel_disconnect"], [95, 1, 1, "", "submodel_largest"], [95, 1, 1, "", "submodel_populous"], [95, 1, 1, "", "timescales"], [95, 1, 1, "", "transform_discrete_trajectories_to_observed_symbols"], [95, 2, 1, "", "transition_counts"], [95, 1, 1, "", "transition_matrix_obs"], [95, 2, 1, "", "transition_model"]], "deeptime.markov.hmm.MaximumLikelihoodHMM": [[96, 2, 1, "", "accuracy"], [96, 1, 1, "", "fetch_model"], [96, 1, 1, "", "fit"], [96, 1, 1, "", "fit_fetch"], [96, 2, 1, "", "fixed_initial_distribution"], [96, 2, 1, "", "fixed_stationary_distribution"], [96, 1, 1, "", "get_params"], [96, 2, 1, "", "has_model"], [96, 2, 1, "", "initial_model"], [96, 2, 1, "", "lagtime"], [96, 2, 1, "", "maxit"], [96, 2, 1, "", "maxit_reversible"], [96, 2, 1, "", "model"], [96, 2, 1, "", "n_hidden_states"], [96, 2, 1, "", "reversible"], [96, 1, 1, "", "set_params"], [96, 2, 1, "", "stationary"], [96, 2, 1, "", "stride"]], "deeptime.markov.hmm.OutputModel": [[97, 1, 1, "", "copy"], [97, 1, 1, "", "fit"], [97, 1, 1, "", "generate_observation_trajectory"], [97, 1, 1, "", "get_params"], [97, 2, 1, "", "ignore_outliers"], [97, 2, 1, "", "n_hidden_states"], [97, 2, 1, "", "n_observable_states"], [97, 1, 1, "", "sample"], [97, 1, 1, "", "set_params"], [97, 1, 1, "", "submodel"], [97, 1, 1, "", "to_state_probability_trajectory"]], "deeptime.markov.hmm.init.discrete": [[98, 4, 1, "", "metastable_from_data"], [99, 4, 1, "", "metastable_from_msm"], [100, 4, 1, "", "random_guess"]], "deeptime.markov.hmm.init.gaussian": [[101, 4, 1, "", "from_data"]], "deeptime.markov.msm": [[102, 0, 1, "", "AugmentedMSM"], [103, 0, 1, "", "AugmentedMSMEstimator"], [104, 0, 1, "", "BayesianMSM"], [105, 0, 1, "", "BayesianMSMPosterior"], [106, 0, 1, "", "KoopmanReweightedMSM"], [107, 0, 1, "", "MarkovStateModel"], [108, 0, 1, "", "MarkovStateModelCollection"], [109, 0, 1, "", "MaximumLikelihoodMSM"], [110, 0, 1, "", "OOMReweightedMSM"], [111, 0, 1, "", "TRAM"], [112, 0, 1, "", "TRAMDataset"], [113, 0, 1, "", "TRAMModel"]], "deeptime.markov.msm.AugmentedMSM": [[102, 1, 1, "", "ck_test"], [102, 1, 1, "", "committor_backward"], [102, 1, 1, "", "committor_forward"], [102, 1, 1, "", "compute_state_indices"], [102, 1, 1, "", "compute_trajectory_weights"], [102, 1, 1, "", "copy"], [102, 1, 1, "", "correlation"], [102, 2, 1, "", "count_model"], [102, 1, 1, "", "eigenvalues"], [102, 1, 1, "", "eigenvectors_left"], [102, 1, 1, "", "eigenvectors_right"], [102, 2, 1, "", "empirical_koopman_model"], [102, 1, 1, "", "expectation"], [102, 1, 1, "", "fingerprint_correlation"], [102, 1, 1, "", "fingerprint_relaxation"], [102, 1, 1, "", "get_params"], [102, 2, 1, "", "has_count_model"], [102, 1, 1, "", "hmm"], [102, 2, 1, "", "is_real"], [102, 2, 1, "", "koopman_model"], [102, 2, 1, "", "lagtime"], [102, 1, 1, "", "mfpt"], [102, 2, 1, "", "n_eigenvalues"], [102, 2, 1, "", "n_states"], [102, 2, 1, "", "ncv"], [102, 2, 1, "", "optimizer_state"], [102, 1, 1, "", "pcca"], [102, 1, 1, "", "propagate"], [102, 1, 1, "", "reactive_flux"], [102, 1, 1, "", "relaxation"], [102, 2, 1, "", "reversible"], [102, 1, 1, "", "score"], [102, 1, 1, "", "set_params"], [102, 1, 1, "", "simulate"], [102, 2, 1, "", "sparse"], [102, 2, 1, "", "stationary"], [102, 2, 1, "", "stationary_distribution"], [102, 1, 1, "", "submodel"], [102, 1, 1, "", "timescales"], [102, 1, 1, "", "to_koopman_model"], [102, 2, 1, "", "transition_matrix"], [102, 2, 1, "", "transition_matrix_tolerance"], [102, 1, 1, "", "update_stationary_distribution"], [102, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.AugmentedMSMEstimator": [[103, 2, 1, "", "convergence_criterion_lagrange"], [103, 1, 1, "", "estimator_from_feature_trajectories"], [103, 2, 1, "", "expectations_by_state"], [103, 2, 1, "", "experimental_measurement_weights"], [103, 2, 1, "", "experimental_measurements"], [103, 1, 1, "", "fetch_model"], [103, 1, 1, "", "fit"], [103, 1, 1, "", "fit_fetch"], [103, 1, 1, "", "get_params"], [103, 2, 1, "", "has_model"], [103, 2, 1, "", "max_cache"], [103, 2, 1, "", "maxiter"], [103, 2, 1, "", "model"], [103, 2, 1, "", "reversible"], [103, 1, 1, "", "set_params"], [103, 2, 1, "", "sparse"], [103, 2, 1, "", "support_confidence"], [103, 2, 1, "", "uncertainties"]], "deeptime.markov.msm.BayesianMSM": [[104, 1, 1, "", "fetch_model"], [104, 1, 1, "", "fit"], [104, 1, 1, "", "fit_fetch"], [104, 1, 1, "", "fit_from_counts"], [104, 1, 1, "", "fit_from_discrete_timeseries"], [104, 1, 1, "", "fit_from_msm"], [104, 1, 1, "", "get_params"], [104, 2, 1, "", "has_model"], [104, 2, 1, "", "model"], [104, 2, 1, "", "reversible"], [104, 1, 1, "", "sample"], [104, 1, 1, "", "set_params"], [104, 2, 1, "", "sparse"], [104, 2, 1, "", "stationary_distribution_constraint"]], "deeptime.markov.msm.BayesianMSMPosterior": [[105, 1, 1, "", "ck_test"], [105, 1, 1, "", "copy"], [105, 1, 1, "", "evaluate_samples"], [105, 1, 1, "", "gather_stats"], [105, 1, 1, "", "get_params"], [105, 2, 1, "", "lagtime"], [105, 2, 1, "", "prior"], [105, 2, 1, "", "samples"], [105, 1, 1, "", "set_params"], [105, 1, 1, "", "submodel"], [105, 1, 1, "", "timescales"]], "deeptime.markov.msm.KoopmanReweightedMSM": [[106, 1, 1, "", "ck_test"], [106, 1, 1, "", "committor_backward"], [106, 1, 1, "", "committor_forward"], [106, 1, 1, "", "compute_state_indices"], [106, 1, 1, "", "compute_trajectory_weights"], [106, 1, 1, "", "copy"], [106, 1, 1, "", "correlation"], [106, 2, 1, "", "count_model"], [106, 1, 1, "", "eigenvalues"], [106, 1, 1, "", "eigenvectors_left"], [106, 1, 1, "", "eigenvectors_right"], [106, 2, 1, "", "empirical_koopman_model"], [106, 1, 1, "", "expectation"], [106, 1, 1, "", "fingerprint_correlation"], [106, 1, 1, "", "fingerprint_relaxation"], [106, 1, 1, "", "get_params"], [106, 2, 1, "", "has_count_model"], [106, 1, 1, "", "hmm"], [106, 2, 1, "", "is_real"], [106, 2, 1, "", "koopman_model"], [106, 2, 1, "", "lagtime"], [106, 1, 1, "", "mfpt"], [106, 2, 1, "", "n_eigenvalues"], [106, 2, 1, "", "n_states"], [106, 2, 1, "", "ncv"], [106, 2, 1, "", "oom_components"], [106, 2, 1, "", "oom_eigenvalues"], [106, 2, 1, "", "oom_evaluator"], [106, 2, 1, "", "oom_information_state_vector"], [106, 2, 1, "", "oom_rank"], [106, 2, 1, "", "oom_timescales"], [106, 1, 1, "", "pcca"], [106, 1, 1, "", "propagate"], [106, 1, 1, "", "reactive_flux"], [106, 1, 1, "", "relaxation"], [106, 2, 1, "", "reversible"], [106, 1, 1, "", "score"], [106, 1, 1, "", "set_params"], [106, 1, 1, "", "simulate"], [106, 2, 1, "", "sparse"], [106, 2, 1, "", "stationary"], [106, 2, 1, "", "stationary_distribution"], [106, 1, 1, "", "submodel"], [106, 1, 1, "", "timescales"], [106, 1, 1, "", "to_koopman_model"], [106, 2, 1, "", "transition_matrix"], [106, 2, 1, "", "transition_matrix_tolerance"], [106, 2, 1, "", "twostep_count_matrices"], [106, 1, 1, "", "update_stationary_distribution"], [106, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.MarkovStateModel": [[107, 1, 1, "", "ck_test"], [107, 1, 1, "", "committor_backward"], [107, 1, 1, "", "committor_forward"], [107, 1, 1, "", "compute_state_indices"], [107, 1, 1, "", "compute_trajectory_weights"], [107, 1, 1, "", "copy"], [107, 1, 1, "", "correlation"], [107, 2, 1, "", "count_model"], [107, 1, 1, "", "eigenvalues"], [107, 1, 1, "", "eigenvectors_left"], [107, 1, 1, "", "eigenvectors_right"], [107, 2, 1, "", "empirical_koopman_model"], [107, 1, 1, "", "expectation"], [107, 1, 1, "", "fingerprint_correlation"], [107, 1, 1, "", "fingerprint_relaxation"], [107, 1, 1, "", "get_params"], [107, 2, 1, "", "has_count_model"], [107, 1, 1, "", "hmm"], [107, 2, 1, "", "is_real"], [107, 2, 1, "", "koopman_model"], [107, 2, 1, "", "lagtime"], [107, 1, 1, "", "mfpt"], [107, 2, 1, "", "n_eigenvalues"], [107, 2, 1, "", "n_states"], [107, 2, 1, "", "ncv"], [107, 1, 1, "", "pcca"], [107, 1, 1, "", "propagate"], [107, 1, 1, "", "reactive_flux"], [107, 1, 1, "", "relaxation"], [107, 2, 1, "", "reversible"], [107, 1, 1, "", "score"], [107, 1, 1, "", "set_params"], [107, 1, 1, "", "simulate"], [107, 2, 1, "", "sparse"], [107, 2, 1, "", "stationary"], [107, 2, 1, "", "stationary_distribution"], [107, 1, 1, "", "submodel"], [107, 1, 1, "", "timescales"], [107, 1, 1, "", "to_koopman_model"], [107, 2, 1, "", "transition_matrix"], [107, 2, 1, "", "transition_matrix_tolerance"], [107, 1, 1, "", "update_stationary_distribution"], [107, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.MarkovStateModelCollection": [[108, 1, 1, "", "ck_test"], [108, 1, 1, "", "committor_backward"], [108, 1, 1, "", "committor_forward"], [108, 1, 1, "", "compute_state_indices"], [108, 1, 1, "", "compute_trajectory_weights"], [108, 1, 1, "", "copy"], [108, 1, 1, "", "correlation"], [108, 2, 1, "", "count_fraction"], [108, 2, 1, "", "count_fractions"], [108, 2, 1, "", "count_model"], [108, 2, 1, "", "current_model"], [108, 1, 1, "", "eigenvalues"], [108, 1, 1, "", "eigenvectors_left"], [108, 1, 1, "", "eigenvectors_right"], [108, 2, 1, "", "empirical_koopman_model"], [108, 1, 1, "", "expectation"], [108, 1, 1, "", "fingerprint_correlation"], [108, 1, 1, "", "fingerprint_relaxation"], [108, 1, 1, "", "get_params"], [108, 2, 1, "", "has_count_model"], [108, 1, 1, "", "hmm"], [108, 2, 1, "", "is_real"], [108, 2, 1, "", "koopman_model"], [108, 2, 1, "", "lagtime"], [108, 1, 1, "", "mfpt"], [108, 2, 1, "", "n_connected_msms"], [108, 2, 1, "", "n_eigenvalues"], [108, 2, 1, "", "n_states"], [108, 2, 1, "", "ncv"], [108, 1, 1, "", "pcca"], [108, 1, 1, "", "propagate"], [108, 1, 1, "", "reactive_flux"], [108, 1, 1, "", "relaxation"], [108, 2, 1, "", "reversible"], [108, 1, 1, "", "score"], [108, 1, 1, "", "select"], [108, 1, 1, "", "set_params"], [108, 1, 1, "", "simulate"], [108, 2, 1, "", "sparse"], [108, 2, 1, "", "state_fraction"], [108, 2, 1, "", "state_fractions"], [108, 1, 1, "", "state_symbols"], [108, 2, 1, "", "stationary"], [108, 2, 1, "", "stationary_distribution"], [108, 1, 1, "", "submodel"], [108, 1, 1, "", "timescales"], [108, 1, 1, "", "to_koopman_model"], [108, 2, 1, "", "transition_matrix"], [108, 2, 1, "", "transition_matrix_tolerance"], [108, 1, 1, "", "update_stationary_distribution"], [108, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.MaximumLikelihoodMSM": [[109, 2, 1, "", "allow_disconnected"], [109, 1, 1, "", "fetch_model"], [109, 1, 1, "", "fit"], [109, 1, 1, "", "fit_fetch"], [109, 1, 1, "", "fit_from_counts"], [109, 1, 1, "", "fit_from_discrete_timeseries"], [109, 1, 1, "", "get_params"], [109, 2, 1, "", "has_model"], [109, 2, 1, "", "model"], [109, 2, 1, "", "reversible"], [109, 1, 1, "", "set_params"], [109, 2, 1, "", "sparse"], [109, 2, 1, "", "stationary_distribution_constraint"]], "deeptime.markov.msm.OOMReweightedMSM": [[110, 1, 1, "", "fetch_model"], [110, 1, 1, "", "fit"], [110, 1, 1, "", "fit_fetch"], [110, 1, 1, "", "get_params"], [110, 2, 1, "", "has_model"], [110, 2, 1, "", "model"], [110, 2, 1, "", "reversible"], [110, 1, 1, "", "set_params"], [110, 2, 1, "", "sparse"]], "deeptime.markov.msm.TRAM": [[111, 1, 1, "", "fetch_model"], [111, 1, 1, "", "fit"], [111, 1, 1, "", "fit_fetch"], [111, 1, 1, "", "get_params"], [111, 2, 1, "", "has_model"], [111, 2, 1, "", "model"], [111, 2, 1, "", "reversible"], [111, 1, 1, "", "set_params"], [111, 2, 1, "", "sparse"]], "deeptime.markov.msm.TRAMDataset": [[112, 1, 1, "", "check_against_model"], [112, 6, 1, "", "connectivity_options"], [112, 2, 1, "", "n_markov_states"], [112, 2, 1, "", "n_therm_states"], [112, 1, 1, "", "restrict_to_largest_connected_set"], [112, 1, 1, "", "restrict_to_submodel"], [112, 1, 1, "", "setflags"], [112, 2, 1, "", "state_counts"], [112, 2, 1, "", "tram_input"], [112, 2, 1, "", "transition_counts"]], "deeptime.markov.msm.TRAMModel": [[113, 2, 1, "", "biased_conf_energies"], [113, 1, 1, "", "compute_PMF"], [113, 1, 1, "", "compute_log_likelihood"], [113, 1, 1, "", "compute_observable"], [113, 1, 1, "", "compute_sample_weights_log"], [113, 1, 1, "", "copy"], [113, 1, 1, "", "get_params"], [113, 2, 1, "", "lagrangian_mult_log"], [113, 2, 1, "", "markov_state_energies"], [113, 2, 1, "", "modified_state_counts_log"], [113, 2, 1, "", "msm_collection"], [113, 1, 1, "", "set_params"], [113, 2, 1, "", "therm_state_energies"]], "deeptime.markov.sample": [[117, 4, 1, "", "compute_index_states"], [118, 4, 1, "", "indices_by_distribution"], [119, 4, 1, "", "indices_by_sequence"], [120, 4, 1, "", "indices_by_state"]], "deeptime.markov.tools": [[253, 3, 0, "-", "analysis"], [253, 3, 0, "-", "estimation"], [253, 3, 0, "-", "flux"]], "deeptime.markov.tools.analysis": [[121, 4, 1, "", "committor"], [122, 4, 1, "", "committor_sensitivity"], [123, 4, 1, "", "correlation"], [124, 4, 1, "", "eigenvalue_sensitivity"], [125, 4, 1, "", "eigenvalues"], [126, 4, 1, "", "eigenvector_sensitivity"], [127, 4, 1, "", "eigenvectors"], [128, 4, 1, "", "expectation"], [129, 4, 1, "", "expectation_sensitivity"], [130, 4, 1, "", "expected_counts"], [131, 4, 1, "", "expected_counts_stationary"], [132, 4, 1, "", "fingerprint_correlation"], [133, 4, 1, "", "fingerprint_relaxation"], [134, 4, 1, "", "hitting_probability"], [135, 4, 1, "", "is_connected"], [136, 4, 1, "", "is_rate_matrix"], [137, 4, 1, "", "is_reversible"], [138, 4, 1, "", "is_transition_matrix"], [139, 4, 1, "", "mfpt"], [140, 4, 1, "", "mfpt_sensitivity"], [141, 4, 1, "", "pcca_memberships"], [142, 4, 1, "", "rdl_decomposition"], [143, 4, 1, "", "relaxation"], [144, 4, 1, "", "stationary_distribution"], [145, 4, 1, "", "stationary_distribution_sensitivity"], [146, 4, 1, "", "timescale_sensitivity"], [147, 4, 1, "", "timescales"]], "deeptime.markov.tools.estimation": [[148, 4, 1, "", "bootstrap_counts"], [149, 4, 1, "", "bootstrap_trajectories"], [150, 4, 1, "", "connected_sets"], [151, 4, 1, "", "count_matrix"], [152, 4, 1, "", "error_perturbation"], [153, 4, 1, "", "is_connected"], [154, 4, 1, "", "largest_connected_set"], [155, 4, 1, "", "largest_connected_submatrix"], [156, 4, 1, "", "log_likelihood"], [157, 4, 1, "", "prior_const"], [158, 4, 1, "", "prior_neighbor"], [159, 4, 1, "", "prior_rev"], [160, 4, 1, "", "rate_matrix"], [161, 4, 1, "", "tmatrix_cov"], [162, 4, 1, "", "tmatrix_sampler"], [163, 4, 1, "", "transition_matrix"]], "deeptime.markov.tools.flux": [[164, 4, 1, "", "coarsegrain"], [165, 4, 1, "", "flux_consumers"], [166, 4, 1, "", "flux_matrix"], [167, 4, 1, "", "flux_producers"], [168, 4, 1, "", "flux_production"], [169, 4, 1, "", "mfpt"], [170, 4, 1, "", "pathways"], [171, 4, 1, "", "rate"], [172, 4, 1, "", "to_netflux"], [173, 4, 1, "", "total_flux"]], "deeptime.numeric": [[174, 7, 1, "", "ZeroRankError"], [175, 4, 1, "", "drop_nan_rows"], [176, 4, 1, "", "eig_corr"], [177, 4, 1, "", "eigs"], [178, 4, 1, "", "is_diagonal_matrix"], [179, 4, 1, "", "is_square_matrix"], [180, 4, 1, "", "schatten_norm"], [181, 4, 1, "", "sort_eigs"], [182, 4, 1, "", "spd_eig"], [183, 4, 1, "", "spd_inv"], [184, 4, 1, "", "spd_inv_split"], [185, 4, 1, "", "spd_inv_sqrt"], [186, 4, 1, "", "spd_truncated_svd"]], "deeptime.numeric.ZeroRankError": [[174, 1, 1, "", "with_traceback"]], "deeptime.plots": [[187, 0, 1, "", "Energy2dPlot"], [188, 0, 1, "", "Network"], [189, 4, 1, "", "plot_adjacency"], [190, 4, 1, "", "plot_ck_test"], [191, 4, 1, "", "plot_contour2d_from_xyz"], [192, 4, 1, "", "plot_density"], [193, 4, 1, "", "plot_energy2d"], [194, 4, 1, "", "plot_flux"], [195, 4, 1, "", "plot_implied_timescales"], [196, 4, 1, "", "plot_markov_model"]], "deeptime.plots.Network": [[188, 2, 1, "", "adjacency_matrix"], [188, 2, 1, "", "bounds"], [188, 2, 1, "", "cmap"], [188, 2, 1, "", "d_x"], [188, 2, 1, "", "d_y"], [188, 2, 1, "", "edge_base_scale"], [188, 1, 1, "", "edge_label"], [188, 2, 1, "", "edge_labels"], [188, 2, 1, "", "n_nodes"], [188, 2, 1, "", "node_sizes"], [188, 1, 1, "", "plot"], [188, 2, 1, "", "pos"], [188, 2, 1, "", "state_colors"], [188, 2, 1, "", "state_labels"], [188, 2, 1, "", "state_sizes"]], "deeptime.sindy": [[197, 0, 1, "", "SINDy"], [198, 0, 1, "", "SINDyModel"], [199, 0, 1, "", "STLSQ"]], "deeptime.sindy.SINDy": [[197, 1, 1, "", "fetch_model"], [197, 1, 1, "", "fit"], [197, 1, 1, "", "fit_fetch"], [197, 1, 1, "", "get_params"], [197, 2, 1, "", "has_model"], [197, 2, 1, "", "model"], [197, 1, 1, "", "set_params"]], "deeptime.sindy.SINDyModel": [[198, 2, 1, "", "coefficients"], [198, 1, 1, "", "copy"], [198, 1, 1, "", "equations"], [198, 1, 1, "", "get_params"], [198, 2, 1, "", "intercept"], [198, 1, 1, "", "predict"], [198, 1, 1, "", "print"], [198, 1, 1, "", "score"], [198, 1, 1, "", "set_params"], [198, 1, 1, "", "simulate"], [198, 1, 1, "", "transform"]], "deeptime.sindy.STLSQ": [[199, 1, 1, "", "fit"], [199, 1, 1, "", "get_params"], [199, 1, 1, "", "predict"], [199, 1, 1, "", "score"], [199, 1, 1, "", "set_params"]], "deeptime.util": [[200, 0, 1, "", "EnergyLandscape2d"], [201, 0, 1, "", "QuantityStatistics"], [204, 4, 1, "", "confidence_interval"], [218, 4, 1, "", "energy2d"]], "deeptime.util.EnergyLandscape2d": [[200, 1, 1, "", "plot"]], "deeptime.util.QuantityStatistics": [[201, 2, 1, "", "L"], [201, 2, 1, "", "R"], [201, 1, 1, "", "gather"], [201, 2, 1, "", "mean"], [201, 2, 1, "", "std"]], "deeptime.util.callbacks": [[202, 0, 1, "", "ProgressCallback"], [203, 4, 1, "", "supports_progress_interface"]], "deeptime.util.callbacks.ProgressCallback": [[202, 1, 1, "", "__call__"]], "deeptime.util.data": [[205, 0, 1, "", "ConcatDataset"], [206, 0, 1, "", "TimeLaggedConcatDataset"], [207, 0, 1, "", "TimeLaggedDataset"], [208, 0, 1, "", "TrajectoriesDataset"], [209, 0, 1, "", "TrajectoryDataset"], [210, 4, 1, "", "sliding_window"], [211, 4, 1, "", "timeshifted_split"]], "deeptime.util.data.ConcatDataset": [[205, 1, 1, "", "setflags"], [205, 2, 1, "", "subsets"]], "deeptime.util.data.TimeLaggedConcatDataset": [[206, 1, 1, "", "setflags"], [206, 2, 1, "", "subsets"]], "deeptime.util.data.TimeLaggedDataset": [[207, 1, 1, "", "astype"], [207, 2, 1, "", "data"], [207, 2, 1, "", "data_lagged"], [207, 1, 1, "", "setflags"]], "deeptime.util.data.TrajectoriesDataset": [[208, 1, 1, "", "from_numpy"], [208, 2, 1, "", "lagtime"], [208, 1, 1, "", "setflags"], [208, 2, 1, "", "subsets"], [208, 2, 1, "", "trajectories"]], "deeptime.util.data.TrajectoryDataset": [[209, 1, 1, "", "astype"], [209, 2, 1, "", "data"], [209, 2, 1, "", "data_lagged"], [209, 1, 1, "", "from_trajectories"], [209, 1, 1, "", "setflags"]], "deeptime.util.decorators": [[212, 0, 1, "", "cached_property"], [213, 4, 1, "", "deprecated_argument"], [214, 4, 1, "", "plotting_function"]], "deeptime.util.decorators.cached_property": [[212, 1, 1, "", "deleter"], [212, 1, 1, "", "getter"], [212, 1, 1, "", "setter"]], "deeptime.util.diff": [[215, 4, 1, "", "finite_difference_coefficients"], [216, 4, 1, "", "finite_difference_operator_midpoints"], [217, 4, 1, "", "tv_derivative"]], "deeptime.util.parallel": [[219, 4, 1, "", "handle_n_jobs"]], "deeptime.util.platform": [[220, 4, 1, "", "handle_progress_bar"], [221, 4, 1, "", "module_available"]], "deeptime.util.types": [[222, 4, 1, "", "atleast_nd"], [223, 4, 1, "", "is_timelagged_dataset"], [224, 4, 1, "", "to_dataset"]], "deeptime.util.validation": [[225, 0, 1, "", "ChapmanKolmogorovTest"], [226, 0, 1, "", "ImpliedTimescales"], [227, 4, 1, "", "ck_test"], [228, 4, 1, "", "implied_timescales"]], "deeptime.util.validation.ChapmanKolmogorovTest": [[225, 2, 1, "", "err_est"], [225, 2, 1, "", "estimates"], [225, 2, 1, "", "estimates_samples"], [225, 2, 1, "", "has_errors"], [225, 2, 1, "", "lagtimes"], [225, 1, 1, "", "plot"], [225, 2, 1, "", "predictions"], [225, 2, 1, "", "predictions_samples"]], "deeptime.util.validation.ImpliedTimescales": [[226, 2, 1, "", "has_samples"], [226, 2, 1, "", "lagtimes"], [226, 2, 1, "", "max_n_processes"], [226, 2, 1, "", "max_n_samples"], [226, 2, 1, "", "n_lagtimes"], [226, 1, 1, "", "n_samples"], [226, 1, 1, "", "plot"], [226, 1, 1, "", "samples_for_process"], [226, 1, 1, "", "timescales_for_process"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:function", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 187, 188, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 212, 225, 226, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243], "dataset": [0, 248, 268, 306, 319], "estim": [1, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 246, 247, 249, 251, 252, 253, 256, 308, 320, 331], "model": [2, 246, 247, 249, 251, 252, 256, 257, 270, 271, 274, 295, 311, 319, 320], "transform": [3, 295, 308], "concaten": 4, "ident": 5, "monomi": 6, "observ": 7, "boxdiscret": 8, "boxdiscretizationmodel": 9, "clustermodel": 10, "kmean": 11, "kmeansmodel": 12, "metricregistri": 13, "minibatchkmean": 14, "regularspac": 15, "function": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 58, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 87, 88, 89, 90, 98, 99, 100, 101, 114, 115, 116, 117, 118, 119, 120, 125, 127, 135, 136, 137, 138, 142, 144, 147, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 203, 204, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 246], "kmeans_plusplu": 16, "data": [17, 248, 257, 295], "metric": [17, 246, 313], "covari": [18, 67, 247], "covariancemodel": 19, "koopmanweightingestim": 20, "koopmanweightingmodel": 21, "abc_flow": 22, "bickley_jet": 23, "birth_death_chain": 24, "custom_od": 25, "custom_sd": 26, "double_well_2d": 27, "double_well_discret": 28, "drunkards_walk": 29, "ellipsoid": [30, 240, 268], "lorenz_system": 31, "ornstein_uhlenbeck": 32, "position_based_fluid": 33, "prinz_potenti": 34, "quadruple_wel": 35, "quadruple_well_asymmetr": 36, "sqrt_model": 37, "swissroll_model": 38, "thomas_attractor": 39, "time_dependent_quintuple_wel": 40, "tmatrix_metropolis1d": 41, "triple_well_1d": 42, "triple_well_2d": 43, "covariancekoopmanmodel": 44, "dmd": [45, 314], "dmdmodel": 46, "edmd": [47, 315, 319, 322], "edmdmodel": 48, "kvad": [49, 317], "kvadmodel": 50, "kernelcca": 51, "kernelccamodel": 52, "kerneledmd": 53, "kerneledmdmodel": 54, "tica": [55, 303, 319, 327], "transferoperatormodel": 56, "vamp": [57, 302, 303, 317, 319, 321, 331], "blocksplit_traj": 58, "cvsplit_traj": 59, "tae": 60, "taemodel": 61, "tvae": 62, "tvaeencod": 63, "tvaemodel": 64, "vampnet": [65, 316, 317, 319, 332], "vampnetmodel": 66, "koopman_matrix": 68, "kvad_scor": 69, "sym_invers": 70, "vamp_scor": [71, 73], "vampnet_loss": 72, "vamp_score_cv": 74, "vamp_score_data": 75, "gaussiankernel": 76, "generalizedgaussiankernel": 77, "kernel": [78, 250, 294, 295, 317, 319, 321, 322], "laplaciankernel": 79, "polynomialkernel": 80, "torchgaussiankernel": 81, "is_torch_kernel": 82, "pccamodel": 83, "reactiveflux": 84, "transitioncountestim": 85, "transitioncountmodel": 86, "compute_connected_set": 87, "compute_dtrajs_effect": 88, "compute_effective_strid": 89, "count_stat": 90, "bayesianhmm": 91, "bayesianhmmposterior": 92, "discreteoutputmodel": 93, "gaussianoutputmodel": 94, "hiddenmarkovmodel": 95, "maximumlikelihoodhmm": 96, "outputmodel": 97, "metastable_from_data": 98, "metastable_from_msm": 99, "random_guess": 100, "from_data": 101, "augmentedmsm": 102, "augmentedmsmestim": 103, "bayesianmsm": 104, "bayesianmsmposterior": 105, "koopmanreweightedmsm": 106, "markovstatemodel": 107, "markovstatemodelcollect": 108, "maximumlikelihoodmsm": 109, "oomreweightedmsm": 110, "tram": [111, 300, 329], "tramdataset": 112, "trammodel": 113, "number_of_st": 114, "pcca": [115, 253, 297, 324], "reactive_flux": 116, "compute_index_st": 117, "indices_by_distribut": 118, "indices_by_sequ": 119, "indices_by_st": 120, "deeptim": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 325], "markov": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 251, 252, 253, 311, 319, 320], "tool": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 251, 253, 254], "analysi": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 251, 253], "committor": [121, 253, 328], "committor_sensit": 122, "correl": 123, "eigenvalue_sensit": 124, "eigenvalu": [125, 254], "eigenvector_sensit": 126, "eigenvector": [127, 327], "expect": [128, 253], "expectation_sensit": 129, "expected_count": 130, "expected_counts_stationari": 131, "fingerprint_correl": 132, "fingerprint_relax": 133, "hitting_prob": 134, "is_connect": [135, 153], "is_rate_matrix": 136, "is_revers": 137, "is_transition_matrix": 138, "mfpt": [139, 169], "mfpt_sensit": 140, "pcca_membership": 141, "rdl_decomposit": 142, "relax": 143, "stationary_distribut": 144, "stationary_distribution_sensit": 145, "timescale_sensit": 146, "timescal": [147, 293], "bootstrap_count": 148, "bootstrap_trajectori": 149, "connected_set": 150, "count_matrix": 151, "error_perturb": 152, "largest_connected_set": 154, "largest_connected_submatrix": 155, "log_likelihood": 156, "prior_const": 157, "prior_neighbor": 158, "prior_rev": 159, "rate_matrix": 160, "tmatrix_cov": 161, "tmatrix_sampl": 162, "transition_matrix": 163, "flux": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 253, 299, 328], "coarsegrain": 164, "flux_consum": 165, "flux_matrix": 166, "flux_produc": 167, "flux_product": 168, "pathwai": [170, 253, 328], "rate": [171, 253], "to_netflux": 172, "total_flux": 173, "except": 174, "zerorankerror": 174, "drop_nan_row": 175, "eig_corr": 176, "eig": 177, "is_diagonal_matrix": 178, "is_square_matrix": 179, "schatten_norm": 180, "sort_eig": 181, "spd_eig": 182, "spd_inv": 183, "spd_inv_split": 184, "spd_inv_sqrt": 185, "spd_truncated_svd": 186, "energy2dplot": 187, "network": [188, 296], "plot_adjac": 189, "plot_ck_test": 190, "plot_contour2d_from_xyz": 191, "plot_dens": 192, "plot_energy2d": 193, "plot_flux": 194, "plot_implied_timescal": 195, "plot_markov_model": 196, "sindi": [197, 256, 298, 325], "sindymodel": 198, "stlsq": 199, "energylandscape2d": 200, "quantitystatist": 201, "progresscallback": 202, "supports_progress_interfac": 203, "confidence_interv": 204, "concatdataset": 205, "timelaggedconcatdataset": 206, "timelaggeddataset": 207, "trajectoriesdataset": 208, "trajectorydataset": 209, "sliding_window": 210, "timeshifted_split": 211, "cached_properti": 212, "deprecated_argu": 213, "plotting_funct": 214, "finite_difference_coeffici": 215, "finite_difference_operator_midpoint": 216, "tv_deriv": 217, "energy2d": 218, "handle_n_job": 219, "handle_progress_bar": 220, "module_avail": 221, "atleast_nd": 222, "is_timelagged_dataset": 223, "to_dataset": 224, "chapmankolmogorovtest": 225, "impliedtimescal": 226, "ck_test": 227, "implied_timescal": 228, "whiteningtransform": 229, "covar": [230, 231], "moments_xx": 232, "moments_xxxi": 233, "moments_block": 234, "bickleyjet": 235, "birthdeathchain": 236, "customsystem": 237, "doublewelldiscret": 238, "drunkardswalk": 239, "pbfsimul": 241, "timedependentsystem": 242, "timeindependentsystem": 243, "base": [244, 269, 302, 331], "basi": 245, "cluster": [246, 289, 313], "ad": [246, 308], "new": 246, "util": [247, 249, 251, 257], "determinist": 248, "stochast": 248, "custom": [248, 262, 275, 308, 313], "system": [248, 263, 298], "implement": 248, "decomposit": [249, 253, 328], "deep": [249, 307], "altern": 251, "transit": [251, 253, 328, 330], "count": [251, 253, 330], "special": 251, "msm": [251, 253, 318, 323], "hmm": 252, "output": 252, "initi": [252, 313], "guess": 252, "countmatrix": 253, "connect": 253, "sampl": [253, 320, 323], "bootstrap": 253, "prior": 253, "valid": [253, 257], "passag": 253, "time": [253, 265, 272, 282, 286, 304, 326, 331], "fingerprint": 253, "sensit": 253, "path": [253, 328], "theori": [253, 328], "reactiv": [253, 328], "reaction": 253, "numer": 254, "gener": [254, 287, 310], "problem": [254, 325], "plot": [255, 296], "solver": 256, "statist": 257, "type": 257, "differenti": 257, "other": [257, 258, 266, 306], "tabl": 258, "Of": 258, "content": 258, "document": [258, 308], "api": [258, 331], "doc": 258, "od": [259, 262, 306], "arnold": 260, "beltrami": 260, "childress": 260, "flow": 260, "bicklei": [261, 294, 317], "jet": [261, 294, 317], "lorenz": 263, "thoma": 264, "attractor": 264, "comput": [265, 272, 286, 304], "drunkard": [267, 297, 299], "": [267, 297, 299], "walk": [267, 297, 299], "posit": [269, 302, 331], "fluid": [269, 302, 331], "sqrt": [270, 295], "swissrol": 271, "sde": [273, 275, 306], "birth": 274, "death": 274, "chain": [274, 283], "doubl": [276, 277, 300, 319, 329], "well": [276, 277, 280, 281, 282, 284, 285, 300, 329], "2d": [276, 285, 290, 291], "discret": [277, 313], "One": [278, 279], "dimension": [278, 279], "ornstein": 278, "uhlenbeck": 278, "process": 278, "prinz": [279, 318], "potenti": [279, 318], "quadrupl": [280, 281], "asymmetr": 281, "depend": [282, 308], "quintupl": 282, "metropoli": 283, "1d": [283, 284, 300], "energi": [283, 292], "landscap": 283, "tripl": [284, 285], "exampl": [287, 310, 325, 328, 331], "chapman": 288, "kolmogorov": 288, "test": [288, 308], "method": 289, "comparison": [289, 317, 327], "contour": 290, "from": [290, 291, 328], "xyz": 290, "densiti": 291, "xy": 291, "surfac": 292, "impli": 293, "coher": [294, 317], "set": [294, 317], "cca": [294, 295, 317, 319, 321, 331], "identif": 298, "r\u00f6ssler": 298, "gross": 299, "net": 299, "tv": 301, "deriv": 301, "v": [303, 327], "pca": [303, 327], "imprint": 305, "dim": 307, "reduct": [307, 309, 319], "For": 308, "develop": 308, "write": 308, "capabl": 308, "pytorch": 308, "your": 308, "code": 308, "dimens": [309, 319], "notebook": 310, "state": [311, 319], "softwar": 312, "licens": 312, "third": 312, "parti": 312, "notic": 312, "k": 313, "mean": 313, "uniform": 313, "mini": 313, "batch": 313, "regular": 313, "space": 313, "box": 313, "defin": 313, "advanc": 313, "alanin": 316, "dipeptid": 316, "kvadnet": 317, "score": [317, 331], "wedg": 319, "backtransform": 319, "hidden": 320, "bayesian": [320, 323], "maximum": 323, "likelihood": 323, "coars": [324, 328], "grain": [324, 328], "main": 325, "idea": 325, "approxim": 325, "object": 325, "lag": [326, 331], "autoencod": 326, "variat": 326, "scale": [327, 331], "koopman": 327, "reweight": 327, "The": 328, "probabl": 328, "trajectori": 328, "introduct": 329, "applic": 329, "recov": 329, "pmf": 329, "select": 330, "submodel": 330, "short": 331, "demonstr": 331, "A": 331, "more": 331, "detail": 331, "look": 331, "singular": 331, "vector": 331}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"class Dataset": [[0, "class-dataset"]], "class Estimator": [[1, "class-estimator"]], "class Model": [[2, "class-model"]], "class Transformer": [[3, "class-transformer"]], "class Concatenation": [[4, "class-concatenation"]], "class Identity": [[5, "class-identity"]], "class Monomials": [[6, "class-monomials"]], "class Observable": [[7, "class-observable"]], "class BoxDiscretization": [[8, "class-boxdiscretization"]], "class BoxDiscretizationModel": [[9, "class-boxdiscretizationmodel"]], "class ClusterModel": [[10, "class-clustermodel"]], "class KMeans": [[11, "class-kmeans"]], "class KMeansModel": [[12, "class-kmeansmodel"]], "class MetricRegistry": [[13, "class-metricregistry"]], "class MiniBatchKMeans": [[14, "class-minibatchkmeans"]], "class RegularSpace": [[15, "class-regularspace"]], "function kmeans_plusplus": [[16, "function-kmeans-plusplus"]], "data metrics": [[17, "data-metrics"]], "class Covariance": [[18, "class-covariance"]], "class CovarianceModel": [[19, "class-covariancemodel"]], "class KoopmanWeightingEstimator": [[20, "class-koopmanweightingestimator"]], "class KoopmanWeightingModel": [[21, "class-koopmanweightingmodel"]], "function abc_flow": [[22, "function-abc-flow"]], "function bickley_jet": [[23, "function-bickley-jet"]], "function birth_death_chain": [[24, "function-birth-death-chain"]], "function custom_ode": [[25, "function-custom-ode"]], "function custom_sde": [[26, "function-custom-sde"]], "function double_well_2d": [[27, "function-double-well-2d"]], "function double_well_discrete": [[28, "function-double-well-discrete"]], "function drunkards_walk": [[29, "function-drunkards-walk"]], "function ellipsoids": [[30, "function-ellipsoids"]], "function lorenz_system": [[31, "function-lorenz-system"]], "function ornstein_uhlenbeck": [[32, "function-ornstein-uhlenbeck"]], "function position_based_fluids": [[33, "function-position-based-fluids"]], "function prinz_potential": [[34, "function-prinz-potential"]], "function quadruple_well": [[35, "function-quadruple-well"]], "function quadruple_well_asymmetric": [[36, "function-quadruple-well-asymmetric"]], "function sqrt_model": [[37, "function-sqrt-model"]], "function swissroll_model": [[38, "function-swissroll-model"]], "function thomas_attractor": [[39, "function-thomas-attractor"]], "function time_dependent_quintuple_well": [[40, "function-time-dependent-quintuple-well"]], "function tmatrix_metropolis1d": [[41, "function-tmatrix-metropolis1d"]], "function triple_well_1d": [[42, "function-triple-well-1d"]], "function triple_well_2d": [[43, "function-triple-well-2d"]], "class CovarianceKoopmanModel": [[44, "class-covariancekoopmanmodel"]], "class DMD": [[45, "class-dmd"]], "class DMDModel": [[46, "class-dmdmodel"]], "class EDMD": [[47, "class-edmd"]], "class EDMDModel": [[48, "class-edmdmodel"]], "class KVAD": [[49, "class-kvad"]], "class KVADModel": [[50, "class-kvadmodel"]], "class KernelCCA": [[51, "class-kernelcca"]], "class KernelCCAModel": [[52, "class-kernelccamodel"]], "class KernelEDMD": [[53, "class-kerneledmd"]], "class KernelEDMDModel": [[54, "class-kerneledmdmodel"]], "class TICA": [[55, "class-tica"]], "class TransferOperatorModel": [[56, "class-transferoperatormodel"]], "class VAMP": [[57, "class-vamp"]], "function blocksplit_trajs": [[58, "function-blocksplit-trajs"]], "function cvsplit_trajs": [[59, "function-cvsplit-trajs"]], "class TAE": [[60, "class-tae"]], "class TAEModel": [[61, "class-taemodel"]], "class TVAE": [[62, "class-tvae"]], "class TVAEEncoder": [[63, "class-tvaeencoder"]], "class TVAEModel": [[64, "class-tvaemodel"]], "class VAMPNet": [[65, "class-vampnet"]], "class VAMPNetModel": [[66, "class-vampnetmodel"]], "function covariances": [[67, "function-covariances"]], "function koopman_matrix": [[68, "function-koopman-matrix"]], "function kvad_score": [[69, "function-kvad-score"]], "function sym_inverse": [[70, "function-sym-inverse"]], "function vamp_score": [[71, "function-vamp-score"], [73, "function-vamp-score"]], "function vampnet_loss": [[72, "function-vampnet-loss"]], "function vamp_score_cv": [[74, "function-vamp-score-cv"]], "function vamp_score_data": [[75, "function-vamp-score-data"]], "class GaussianKernel": [[76, "class-gaussiankernel"]], "class GeneralizedGaussianKernel": [[77, "class-generalizedgaussiankernel"]], "class Kernel": [[78, "class-kernel"]], "class LaplacianKernel": [[79, "class-laplaciankernel"]], "class PolynomialKernel": [[80, "class-polynomialkernel"]], "class TorchGaussianKernel": [[81, "class-torchgaussiankernel"]], "function is_torch_kernel": [[82, "function-is-torch-kernel"]], "class PCCAModel": [[83, "class-pccamodel"]], "class ReactiveFlux": [[84, "class-reactiveflux"]], "class TransitionCountEstimator": [[85, "class-transitioncountestimator"]], "class TransitionCountModel": [[86, "class-transitioncountmodel"]], "function compute_connected_sets": [[87, "function-compute-connected-sets"]], "function compute_dtrajs_effective": [[88, "function-compute-dtrajs-effective"]], "function compute_effective_stride": [[89, "function-compute-effective-stride"]], "function count_states": [[90, "function-count-states"]], "class BayesianHMM": [[91, "class-bayesianhmm"]], "class BayesianHMMPosterior": [[92, "class-bayesianhmmposterior"]], "class DiscreteOutputModel": [[93, "class-discreteoutputmodel"]], "class GaussianOutputModel": [[94, "class-gaussianoutputmodel"]], "class HiddenMarkovModel": [[95, "class-hiddenmarkovmodel"]], "class MaximumLikelihoodHMM": [[96, "class-maximumlikelihoodhmm"]], "class OutputModel": [[97, "class-outputmodel"]], "function metastable_from_data": [[98, "function-metastable-from-data"]], "function metastable_from_msm": [[99, "function-metastable-from-msm"]], "function random_guess": [[100, "function-random-guess"]], "function from_data": [[101, "function-from-data"]], "class AugmentedMSM": [[102, "class-augmentedmsm"]], "class AugmentedMSMEstimator": [[103, "class-augmentedmsmestimator"]], "class BayesianMSM": [[104, "class-bayesianmsm"]], "class BayesianMSMPosterior": [[105, "class-bayesianmsmposterior"]], "class KoopmanReweightedMSM": [[106, "class-koopmanreweightedmsm"]], "class MarkovStateModel": [[107, "class-markovstatemodel"]], "class MarkovStateModelCollection": [[108, "class-markovstatemodelcollection"]], "class MaximumLikelihoodMSM": [[109, "class-maximumlikelihoodmsm"]], "class OOMReweightedMSM": [[110, "class-oomreweightedmsm"]], "class TRAM": [[111, "class-tram"]], "class TRAMDataset": [[112, "class-tramdataset"]], "class TRAMModel": [[113, "class-trammodel"]], "function number_of_states": [[114, "function-number-of-states"]], "function pcca": [[115, "function-pcca"]], "function reactive_flux": [[116, "function-reactive-flux"]], "function compute_index_states": [[117, "function-compute-index-states"]], "function indices_by_distribution": [[118, "function-indices-by-distribution"]], "function indices_by_sequence": [[119, "function-indices-by-sequence"]], "function indices_by_state": [[120, "function-indices-by-state"]], "deeptime.markov.tools.analysis.committor": [[121, "deeptime-markov-tools-analysis-committor"]], "deeptime.markov.tools.analysis.committor_sensitivity": [[122, "deeptime-markov-tools-analysis-committor-sensitivity"]], "deeptime.markov.tools.analysis.correlation": [[123, "deeptime-markov-tools-analysis-correlation"]], "deeptime.markov.tools.analysis.eigenvalue_sensitivity": [[124, "deeptime-markov-tools-analysis-eigenvalue-sensitivity"]], "function eigenvalues": [[125, "function-eigenvalues"]], "deeptime.markov.tools.analysis.eigenvector_sensitivity": [[126, "deeptime-markov-tools-analysis-eigenvector-sensitivity"]], "function eigenvectors": [[127, "function-eigenvectors"]], "deeptime.markov.tools.analysis.expectation": [[128, "deeptime-markov-tools-analysis-expectation"]], "deeptime.markov.tools.analysis.expectation_sensitivity": [[129, "deeptime-markov-tools-analysis-expectation-sensitivity"]], "deeptime.markov.tools.analysis.expected_counts": [[130, "deeptime-markov-tools-analysis-expected-counts"]], "deeptime.markov.tools.analysis.expected_counts_stationary": [[131, "deeptime-markov-tools-analysis-expected-counts-stationary"]], "deeptime.markov.tools.analysis.fingerprint_correlation": [[132, "deeptime-markov-tools-analysis-fingerprint-correlation"]], "deeptime.markov.tools.analysis.fingerprint_relaxation": [[133, "deeptime-markov-tools-analysis-fingerprint-relaxation"]], "deeptime.markov.tools.analysis.hitting_probability": [[134, "deeptime-markov-tools-analysis-hitting-probability"]], "function is_connected": [[135, "function-is-connected"]], "function is_rate_matrix": [[136, "function-is-rate-matrix"]], "function is_reversible": [[137, "function-is-reversible"]], "function is_transition_matrix": [[138, "function-is-transition-matrix"]], "deeptime.markov.tools.analysis.mfpt": [[139, "deeptime-markov-tools-analysis-mfpt"]], "deeptime.markov.tools.analysis.mfpt_sensitivity": [[140, "deeptime-markov-tools-analysis-mfpt-sensitivity"]], "deeptime.markov.tools.analysis.pcca_memberships": [[141, "deeptime-markov-tools-analysis-pcca-memberships"]], "function rdl_decomposition": [[142, "function-rdl-decomposition"]], "deeptime.markov.tools.analysis.relaxation": [[143, "deeptime-markov-tools-analysis-relaxation"]], "function stationary_distribution": [[144, "function-stationary-distribution"]], "deeptime.markov.tools.analysis.stationary_distribution_sensitivity": [[145, "deeptime-markov-tools-analysis-stationary-distribution-sensitivity"]], "deeptime.markov.tools.analysis.timescale_sensitivity": [[146, "deeptime-markov-tools-analysis-timescale-sensitivity"]], "function timescales": [[147, "function-timescales"]], "deeptime.markov.tools.estimation.bootstrap_counts": [[148, "deeptime-markov-tools-estimation-bootstrap-counts"]], "deeptime.markov.tools.estimation.bootstrap_trajectories": [[149, "deeptime-markov-tools-estimation-bootstrap-trajectories"]], "deeptime.markov.tools.estimation.connected_sets": [[150, "deeptime-markov-tools-estimation-connected-sets"]], "deeptime.markov.tools.estimation.count_matrix": [[151, "deeptime-markov-tools-estimation-count-matrix"]], "deeptime.markov.tools.estimation.error_perturbation": [[152, "deeptime-markov-tools-estimation-error-perturbation"]], "deeptime.markov.tools.estimation.is_connected": [[153, "deeptime-markov-tools-estimation-is-connected"]], "deeptime.markov.tools.estimation.largest_connected_set": [[154, "deeptime-markov-tools-estimation-largest-connected-set"]], "deeptime.markov.tools.estimation.largest_connected_submatrix": [[155, "deeptime-markov-tools-estimation-largest-connected-submatrix"]], "deeptime.markov.tools.estimation.log_likelihood": [[156, "deeptime-markov-tools-estimation-log-likelihood"]], "deeptime.markov.tools.estimation.prior_const": [[157, "deeptime-markov-tools-estimation-prior-const"]], "deeptime.markov.tools.estimation.prior_neighbor": [[158, "deeptime-markov-tools-estimation-prior-neighbor"]], "deeptime.markov.tools.estimation.prior_rev": [[159, "deeptime-markov-tools-estimation-prior-rev"]], "deeptime.markov.tools.estimation.rate_matrix": [[160, "deeptime-markov-tools-estimation-rate-matrix"]], "deeptime.markov.tools.estimation.tmatrix_cov": [[161, "deeptime-markov-tools-estimation-tmatrix-cov"]], "deeptime.markov.tools.estimation.tmatrix_sampler": [[162, "deeptime-markov-tools-estimation-tmatrix-sampler"]], "deeptime.markov.tools.estimation.transition_matrix": [[163, "deeptime-markov-tools-estimation-transition-matrix"]], "deeptime.markov.tools.flux.coarsegrain": [[164, "deeptime-markov-tools-flux-coarsegrain"]], "deeptime.markov.tools.flux.flux_consumers": [[165, "deeptime-markov-tools-flux-flux-consumers"]], "deeptime.markov.tools.flux.flux_matrix": [[166, "deeptime-markov-tools-flux-flux-matrix"]], "deeptime.markov.tools.flux.flux_producers": [[167, "deeptime-markov-tools-flux-flux-producers"]], "deeptime.markov.tools.flux.flux_production": [[168, "deeptime-markov-tools-flux-flux-production"]], "deeptime.markov.tools.flux.mfpt": [[169, "deeptime-markov-tools-flux-mfpt"]], "deeptime.markov.tools.flux.pathways": [[170, "deeptime-markov-tools-flux-pathways"]], "deeptime.markov.tools.flux.rate": [[171, "deeptime-markov-tools-flux-rate"]], "deeptime.markov.tools.flux.to_netflux": [[172, "deeptime-markov-tools-flux-to-netflux"]], "deeptime.markov.tools.flux.total_flux": [[173, "deeptime-markov-tools-flux-total-flux"]], "exception ZeroRankError": [[174, "exception-zerorankerror"]], "function drop_nan_rows": [[175, "function-drop-nan-rows"]], "function eig_corr": [[176, "function-eig-corr"]], "function eigs": [[177, "function-eigs"]], "function is_diagonal_matrix": [[178, "function-is-diagonal-matrix"]], "function is_square_matrix": [[179, "function-is-square-matrix"]], "function schatten_norm": [[180, "function-schatten-norm"]], "function sort_eigs": [[181, "function-sort-eigs"]], "function spd_eig": [[182, "function-spd-eig"]], "function spd_inv": [[183, "function-spd-inv"]], "function spd_inv_split": [[184, "function-spd-inv-split"]], "function spd_inv_sqrt": [[185, "function-spd-inv-sqrt"]], "function spd_truncated_svd": [[186, "function-spd-truncated-svd"]], "class Energy2dPlot": [[187, "class-energy2dplot"]], "class Network": [[188, "class-network"]], "function plot_adjacency": [[189, "function-plot-adjacency"]], "function plot_ck_test": [[190, "function-plot-ck-test"]], "function plot_contour2d_from_xyz": [[191, "function-plot-contour2d-from-xyz"]], "function plot_density": [[192, "function-plot-density"]], "function plot_energy2d": [[193, "function-plot-energy2d"]], "function plot_flux": [[194, "function-plot-flux"]], "function plot_implied_timescales": [[195, "function-plot-implied-timescales"]], "function plot_markov_model": [[196, "function-plot-markov-model"]], "class SINDy": [[197, "class-sindy"]], "class SINDyModel": [[198, "class-sindymodel"]], "class STLSQ": [[199, "class-stlsq"]], "class EnergyLandscape2d": [[200, "class-energylandscape2d"]], "class QuantityStatistics": [[201, "class-quantitystatistics"]], "class ProgressCallback": [[202, "class-progresscallback"]], "function supports_progress_interface": [[203, "function-supports-progress-interface"]], "function confidence_interval": [[204, "function-confidence-interval"]], "class ConcatDataset": [[205, "class-concatdataset"]], "class TimeLaggedConcatDataset": [[206, "class-timelaggedconcatdataset"]], "class TimeLaggedDataset": [[207, "class-timelaggeddataset"]], "class TrajectoriesDataset": [[208, "class-trajectoriesdataset"]], "class TrajectoryDataset": [[209, "class-trajectorydataset"]], "function sliding_window": [[210, "function-sliding-window"]], "function timeshifted_split": [[211, "function-timeshifted-split"]], "class cached_property": [[212, "class-cached-property"]], "function deprecated_argument": [[213, "function-deprecated-argument"]], "function plotting_function": [[214, "function-plotting-function"]], "function finite_difference_coefficients": [[215, "function-finite-difference-coefficients"]], "function finite_difference_operator_midpoints": [[216, "function-finite-difference-operator-midpoints"]], "function tv_derivative": [[217, "function-tv-derivative"]], "function energy2d": [[218, "function-energy2d"]], "function handle_n_jobs": [[219, "function-handle-n-jobs"]], "function handle_progress_bar": [[220, "function-handle-progress-bar"]], "function module_available": [[221, "function-module-available"]], "function atleast_nd": [[222, "function-atleast-nd"]], "function is_timelagged_dataset": [[223, "function-is-timelagged-dataset"]], "function to_dataset": [[224, "function-to-dataset"]], "class ChapmanKolmogorovTest": [[225, "class-chapmankolmogorovtest"]], "class ImpliedTimescales": [[226, "class-impliedtimescales"]], "function ck_test": [[227, "function-ck-test"]], "function implied_timescales": [[228, "function-implied-timescales"]], "class WhiteningTransform": [[229, "class-whiteningtransform"]], "function covar": [[230, "function-covar"]], "function covars": [[231, "function-covars"]], "function moments_XX": [[232, "function-moments-xx"]], "function moments_XXXY": [[233, "function-moments-xxxy"]], "function moments_block": [[234, "function-moments-block"]], "class BickleyJet": [[235, "class-bickleyjet"]], "class BirthDeathChain": [[236, "class-birthdeathchain"]], "class CustomSystem": [[237, "class-customsystem"]], "class DoubleWellDiscrete": [[238, "class-doublewelldiscrete"]], "class DrunkardsWalk": [[239, "class-drunkardswalk"]], "class Ellipsoids": [[240, "class-ellipsoids"]], "class PBFSimulator": [[241, "class-pbfsimulator"]], "class TimeDependentSystem": [[242, "class-timedependentsystem"]], "class TimeIndependentSystem": [[243, "class-timeindependentsystem"]], "deeptime.base": [[244, "deeptime-base"]], "deeptime.basis": [[245, "deeptime-basis"]], "deeptime.clustering": [[246, "deeptime-clustering"]], "Estimators": [[246, "estimators"], [247, "estimators"], [249, "estimators"], [251, "estimators"], [252, "estimators"], [256, "estimators"]], "Models": [[246, "models"], [247, "models"], [249, "models"], [251, "models"], [252, "models"], [256, "models"]], "Functions": [[246, "functions"]], "Adding a new metric": [[246, "adding-a-new-metric"]], "deeptime.covariance": [[247, "deeptime-covariance"]], "Utilities": [[247, "utilities"]], "deeptime.data": [[248, "deeptime-data"]], "Deterministic datasets": [[248, "deterministic-datasets"]], "Stochastic datasets": [[248, "stochastic-datasets"]], "Custom systems": [[248, "custom-systems"]], "Implementations": [[248, "implementations"]], "deeptime.decomposition": [[249, "deeptime-decomposition"]], "Deep estimators": [[249, "deep-estimators"]], "Utils": [[249, "utils"]], "deeptime.kernels": [[250, "deeptime-kernels"]], "deeptime.markov": [[251, "deeptime-markov"]], "Analysis tools": [[251, "analysis-tools"]], "Utilities and alternatives": [[251, "utilities-and-alternatives"]], "Transition counting": [[251, "transition-counting"], [330, "Transition-counting"]], "Special MSM estimators and models": [[251, "special-msm-estimators-and-models"]], "deeptime.markov.hmm": [[252, "deeptime-markov-hmm"]], "Output models": [[252, "output-models"]], "Initial guess": [[252, "initial-guess"]], "deeptime.markov.tools": [[253, "deeptime-markov-tools"]], "MSM estimation": [[253, "msm-estimation"]], "Countmatrix": [[253, "countmatrix"]], "Connectivity": [[253, "connectivity"]], "Estimation": [[253, "estimation"], [320, "Estimation"]], "Sampling": [[253, "sampling"]], "Bootstrap": [[253, "bootstrap"]], "Priors": [[253, "priors"]], "MSM analysis": [[253, "msm-analysis"]], "Validation": [[253, "validation"]], "Decomposition": [[253, "decomposition"]], "Expected counts": [[253, "expected-counts"]], "Passage times": [[253, "passage-times"]], "Committors and PCCA": [[253, "committors-and-pcca"]], "Fingerprints": [[253, "fingerprints"]], "Sensitivity analysis": [[253, "sensitivity-analysis"]], "Transition path theory tools": [[253, "transition-path-theory-tools"]], "Reactive flux": [[253, "reactive-flux"]], "Reaction rates and fluxes": [[253, "reaction-rates-and-fluxes"]], "Pathway decomposition": [[253, "pathway-decomposition"], [328, "Pathway-decomposition"]], "deeptime.numeric": [[254, "deeptime-numeric"]], "General numerical tools": [[254, "general-numerical-tools"]], "Numerical tools for eigenvalue problems": [[254, "numerical-tools-for-eigenvalue-problems"]], "deeptime.plots": [[255, "deeptime-plots"]], "deeptime.sindy": [[256, "deeptime-sindy"]], "Solvers": [[256, "solvers"]], "deeptime.util": [[257, "deeptime-util"]], "Model validation utils": [[257, "model-validation-utils"]], "Data utilities": [[257, "data-utilities"]], "Statistics utilities": [[257, "statistics-utilities"]], "Type utilities": [[257, "type-utilities"]], "Differentiation utilities": [[257, "differentiation-utilities"]], "Other utilities": [[257, "other-utilities"]], "Table Of Contents": [[258, "table-of-contents"]], "Documentation": [[258, null]], "API docs": [[258, null]], "Other": [[258, null], [266, "other"], [306, "other"]], "ODEs": [[259, "odes"], [306, "odes"]], "Arnold-Beltrami-Childress flow": [[260, "arnold-beltrami-childress-flow"]], "Bickley Jet": [[261, "bickley-jet"]], "Custom ODEs": [[262, "custom-odes"]], "Lorenz system": [[263, "lorenz-system"]], "Thomas attractor": [[264, "thomas-attractor"]], "Computation times": [[265, "computation-times"], [272, "computation-times"], [286, "computation-times"], [304, "computation-times"]], "Drunkard\u2019s walk": [[267, "drunkard-s-walk"]], "Ellipsoids dataset": [[268, "ellipsoids-dataset"]], "Position-based fluids": [[269, "position-based-fluids"]], "Sqrt model": [[270, "sqrt-model"]], "Swissroll model": [[271, "swissroll-model"]], "SDEs": [[273, "sdes"], [306, "sdes"]], "Birth-death chain model": [[274, "birth-death-chain-model"]], "Custom SDEs": [[275, "custom-sdes"]], "Double-well 2D": [[276, "double-well-2d"]], "Double-well discrete": [[277, "double-well-discrete"]], "One-dimensional Ornstein-Uhlenbeck process": [[278, "one-dimensional-ornstein-uhlenbeck-process"]], "One-dimensional Prinz potential": [[279, "one-dimensional-prinz-potential"]], "Quadruple-well": [[280, "quadruple-well"]], "Asymmetric Quadruple-well": [[281, "asymmetric-quadruple-well"]], "Time-dependent quintuple well": [[282, "time-dependent-quintuple-well"]], "Metropolis chain in 1D energy landscape": [[283, "metropolis-chain-in-1d-energy-landscape"]], "Triple-well 1D": [[284, "triple-well-1d"]], "Triple-well 2D": [[285, "triple-well-2d"]], "General examples": [[287, "general-examples"], [310, "general-examples"]], "Chapman-Kolmogorov test": [[288, "chapman-kolmogorov-test"]], "Clustering methods comparison": [[289, "clustering-methods-comparison"]], "2D contours from xyz": [[290, "d-contours-from-xyz"]], "2D densities from xy": [[291, "d-densities-from-xy"]], "Energy surface": [[292, "energy-surface"]], "Implied timescales": [[293, "implied-timescales"]], "Coherent sets: Kernel CCA on the Bickley jet": [[294, "coherent-sets-kernel-cca-on-the-bickley-jet"]], "Kernel CCA on the sqrt-Model to transform data": [[295, "kernel-cca-on-the-sqrt-model-to-transform-data"]], "Network plots": [[296, "network-plots"]], "PCCA+ on the Drunkard\u2019s walk": [[297, "pcca-on-the-drunkard-s-walk"]], "SINDy: Identification of the R\u00f6ssler system": [[298, "sindy-identification-of-the-rossler-system"]], "Gross and net flux on the Drunkard\u2019s walk": [[299, "gross-and-net-flux-on-the-drunkard-s-walk"]], "TRAM on a 1D double well": [[300, "tram-on-a-1d-double-well"]], "TV Derivative": [[301, "tv-derivative"]], "VAMP on Position Based Fluids": [[302, "vamp-on-position-based-fluids"]], "VAMP vs. TICA vs. PCA": [[303, "vamp-vs-tica-vs-pca"]], "Imprint": [[305, "imprint"]], "Datasets": [[306, "datasets"]], "Deep dim reduction": [[307, "deep-dim-reduction"]], "For developers": [[308, "for-developers"]], "Writing a custom estimator": [[308, "writing-a-custom-estimator"]], "Adding transformer capabilities": [[308, "adding-transformer-capabilities"]], "Depending on PyTorch": [[308, "depending-on-pytorch"]], "Testing your code": [[308, "testing-your-code"]], "Documenting the code": [[308, "documenting-the-code"]], "Dimension reduction": [[309, "dimension-reduction"]], "Examples": [[310, "examples"]], "Notebook examples": [[310, "notebook-examples"]], "Markov state models": [[311, "markov-state-models"], [319, "Markov-state-models"]], "Software License": [[312, "software-license"]], "Third party notices": [[312, "third-party-notices"]], "Clustering": [[313, "Clustering"]], "K-means": [[313, "K-means"]], "uniform initialization": [[313, "uniform-initialization"]], "k-means++ initialization": [[313, "k-means++-initialization"]], "Mini-batch k-means": [[313, "Mini-batch-k-means"]], "Regular space clustering": [[313, "Regular-space-clustering"]], "Box discretization": [[313, "Box-discretization"]], "Defining a custom metric (advanced)": [[313, "Defining-a-custom-metric-(advanced)"]], "DMD": [[314, "DMD"]], "EDMD": [[315, "EDMD"], [319, "EDMD"]], "VAMPNets on Alanine Dipeptide": [[316, "VAMPNets-on-Alanine-Dipeptide"]], "Coherent set comparison on Bickley jet": [[317, "Coherent-set-comparison-on-Bickley-jet"]], "Kernel CCA": [[317, "Kernel-CCA"], [319, "Kernel-CCA"]], "VAMPNets": [[317, "VAMPNets"], [319, "VAMPNets"], [332, "VAMPNets"]], "VAMP": [[317, "VAMP"]], "KVAD": [[317, "KVAD"]], "KVADNets": [[317, "KVADNets"]], "Comparison of scores": [[317, "Comparison-of-scores"]], "MSM on Prinz potential": [[318, "MSM-on-Prinz-potential"]], "Dimension reduction of double-wedge dataset": [[319, "Dimension-reduction-of-double-wedge-dataset"]], "TICA": [[319, "TICA"], [327, "TICA"]], "VAMP with backtransform": [[319, "VAMP-with-backtransform"]], "Kernel EDMD": [[319, "Kernel-EDMD"], [322, "Kernel-EDMD"]], "Hidden Markov Models": [[320, "Hidden-Markov-Models"]], "Bayesian sampling": [[320, "Bayesian-sampling"], [323, "Bayesian-sampling"]], "Kernel VAMP / kernel CCA": [[321, "Kernel-VAMP-/-kernel-CCA"]], "Maximum-likelihood MSMs": [[323, "Maximum-likelihood-MSMs"]], "Coarse-graining with PCCA+": [[324, "Coarse-graining-with-PCCA+"]], "SINDy": [[325, "SINDy"]], "Main ideas": [[325, "Main-ideas"]], "Approximation problem": [[325, "Approximation-problem"]], "Deeptime SINDy objects": [[325, "Deeptime-SINDy-objects"]], "Example": [[325, "Example"]], "Time-lagged autoencoders": [[326, "Time-lagged-autoencoders"]], "Autoencoders": [[326, "Autoencoders"]], "Variational autoencoders": [[326, "Variational-autoencoders"]], "Comparison vs.\u00a0PCA": [[327, "Comparison-vs.\u00a0PCA"]], "Eigenvector scaling": [[327, "Eigenvector-scaling"]], "Koopman reweighting": [[327, "Koopman-reweighting"]], "Transition path theory": [[328, "Transition-path-theory"]], "The committor": [[328, "The-committor"]], "Reactive probability flux": [[328, "Reactive-probability-flux"]], "Coarse-graining of fluxes": [[328, "Coarse-graining-of-fluxes"]], "Example from trajectories": [[328, "Example-from-trajectories"]], "TRAM": [[329, "TRAM"]], "Introduction": [[329, "Introduction"]], "Application to a double well": [[329, "Application-to-a-double-well"]], "Recovering the PMF": [[329, "Recovering-the-PMF"]], "Selecting a submodel": [[330, "Selecting-a-submodel"]], "VAMP / time-lagged CCA": [[331, "VAMP-/-time-lagged-CCA"]], "Short API demonstration": [[331, "Short-API-demonstration"]], "A more detailed look on the estimator": [[331, "A-more-detailed-look-on-the-estimator"]], "Scoring": [[331, "Scoring"]], "Singular vector scaling": [[331, "Singular-vector-scaling"]], "Example with position based fluids": [[331, "Example-with-position-based-fluids"]]}, "indexentries": {"dataset (class in deeptime.base)": [[0, "deeptime.base.Dataset"]], "setflags() (deeptime.base.dataset method)": [[0, "deeptime.base.Dataset.setflags"]], "estimator (class in deeptime.base)": [[1, "deeptime.base.Estimator"]], "fetch_model() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.fetch_model"]], "fit() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.fit"]], "fit_fetch() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.fit_fetch"]], "get_params() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.get_params"]], "has_model (deeptime.base.estimator property)": [[1, "deeptime.base.Estimator.has_model"]], "model (deeptime.base.estimator property)": [[1, "deeptime.base.Estimator.model"]], "set_params() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.set_params"]], "model (class in deeptime.base)": [[2, "deeptime.base.Model"]], "copy() (deeptime.base.model method)": [[2, "deeptime.base.Model.copy"]], "get_params() (deeptime.base.model method)": [[2, "deeptime.base.Model.get_params"]], "set_params() (deeptime.base.model method)": [[2, "deeptime.base.Model.set_params"]], "transformer (class in deeptime.base)": [[3, "deeptime.base.Transformer"]], "__call__() (deeptime.base.transformer method)": [[3, "deeptime.base.Transformer.__call__"]], "transform() (deeptime.base.transformer method)": [[3, "deeptime.base.Transformer.transform"]], "concatenation (class in deeptime.basis)": [[4, "deeptime.basis.Concatenation"]], "__call__() (deeptime.basis.concatenation method)": [[4, "deeptime.basis.Concatenation.__call__"]], "transform() (deeptime.basis.concatenation method)": [[4, "deeptime.basis.Concatenation.transform"]], "identity (class in deeptime.basis)": [[5, "deeptime.basis.Identity"]], "__call__() (deeptime.basis.identity method)": [[5, "deeptime.basis.Identity.__call__"]], "transform() (deeptime.basis.identity method)": [[5, "deeptime.basis.Identity.transform"]], "monomials (class in deeptime.basis)": [[6, "deeptime.basis.Monomials"]], "__call__() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.__call__"]], "get_feature_names() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.get_feature_names"]], "get_feature_names_out() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.get_feature_names_out"]], "transform() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.transform"]], "observable (class in deeptime.basis)": [[7, "deeptime.basis.Observable"]], "__call__() (deeptime.basis.observable method)": [[7, "deeptime.basis.Observable.__call__"]], "transform() (deeptime.basis.observable method)": [[7, "deeptime.basis.Observable.transform"]], "boxdiscretization (class in deeptime.clustering)": [[8, "deeptime.clustering.BoxDiscretization"]], "fetch_model() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.fetch_model"]], "fit() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.fit"]], "fit_fetch() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.fit_fetch"]], "get_params() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.get_params"]], "has_model (deeptime.clustering.boxdiscretization property)": [[8, "deeptime.clustering.BoxDiscretization.has_model"]], "model (deeptime.clustering.boxdiscretization property)": [[8, "deeptime.clustering.BoxDiscretization.model"]], "set_params() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.set_params"]], "boxdiscretizationmodel (class in deeptime.clustering)": [[9, "deeptime.clustering.BoxDiscretizationModel"]], "__call__() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.__call__"]], "cluster_centers (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.cluster_centers"]], "converged (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.converged"]], "copy() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.copy"]], "get_params() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.get_params"]], "metric (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.metric"]], "n_clusters (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.n_clusters"]], "set_params() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.set_params"]], "transform() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.transform"]], "transform_onehot() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.transform_onehot"]], "clustermodel (class in deeptime.clustering)": [[10, "deeptime.clustering.ClusterModel"]], "__call__() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.__call__"]], "cluster_centers (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.cluster_centers"]], "converged (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.converged"]], "copy() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.copy"]], "get_params() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.get_params"]], "metric (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.metric"]], "n_clusters (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.n_clusters"]], "set_params() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.set_params"]], "transform() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.transform"]], "kmeans (class in deeptime.clustering)": [[11, "deeptime.clustering.KMeans"]], "__call__() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.__call__"]], "fetch_model() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fetch_model"]], "fit() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fit"]], "fit_fetch() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fit_fetch"]], "fit_transform() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fit_transform"]], "fixed_seed (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.fixed_seed"]], "get_params() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.get_params"]], "has_model (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.has_model"]], "init_strategy (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.init_strategy"]], "initial_centers (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.initial_centers"]], "max_iter (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.max_iter"]], "metric (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.metric"]], "model (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.model"]], "n_clusters (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.n_clusters"]], "n_jobs (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.n_jobs"]], "set_params() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.set_params"]], "tolerance (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.tolerance"]], "transform() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.transform"]], "kmeansmodel (class in deeptime.clustering)": [[12, "deeptime.clustering.KMeansModel"]], "__call__() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.__call__"]], "cluster_centers (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.cluster_centers"]], "converged (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.converged"]], "copy() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.copy"]], "get_params() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.get_params"]], "inertia (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.inertia"]], "inertias (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.inertias"]], "metric (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.metric"]], "n_clusters (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.n_clusters"]], "score() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.score"]], "set_params() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.set_params"]], "tolerance (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.tolerance"]], "transform() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.transform"]], "metricregistry (class in deeptime.clustering)": [[13, "deeptime.clustering.MetricRegistry"]], "available (deeptime.clustering.metricregistry property)": [[13, "deeptime.clustering.MetricRegistry.available"]], "register() (deeptime.clustering.metricregistry method)": [[13, "deeptime.clustering.MetricRegistry.register"]], "minibatchkmeans (class in deeptime.clustering)": [[14, "deeptime.clustering.MiniBatchKMeans"]], "__call__() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.__call__"]], "fetch_model() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fetch_model"]], "fit() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fit"]], "fit_fetch() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fit_fetch"]], "fit_transform() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fit_transform"]], "fixed_seed (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.fixed_seed"]], "get_params() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.get_params"]], "has_model (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.has_model"]], "init_strategy (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.init_strategy"]], "initial_centers (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.initial_centers"]], "max_iter (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.max_iter"]], "metric (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.metric"]], "model (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.model"]], "n_clusters (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.n_clusters"]], "n_jobs (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.n_jobs"]], "partial_fit() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.partial_fit"]], "set_params() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.set_params"]], "tolerance (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.tolerance"]], "transform() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.transform"]], "regularspace (class in deeptime.clustering)": [[15, "deeptime.clustering.RegularSpace"]], "dmin (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.dmin"]], "fetch_model() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.fetch_model"]], "fit() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.fit"]], "fit_fetch() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.fit_fetch"]], "get_params() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.get_params"]], "has_model (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.has_model"]], "max_centers (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.max_centers"]], "metric (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.metric"]], "model (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.model"]], "n_clusters (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.n_clusters"]], "n_jobs (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.n_jobs"]], "partial_fit() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.partial_fit"]], "set_params() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.set_params"]], "kmeans_plusplus() (in module deeptime.clustering)": [[16, "deeptime.clustering.kmeans_plusplus"]], "metrics (in module deeptime.clustering)": [[17, "deeptime.clustering.metrics"]], "covariance (class in deeptime.covariance)": [[18, "deeptime.covariance.Covariance"]], "bessels_correction (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.bessels_correction"]], "compute_c00 (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.compute_c00"]], "compute_c0t (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.compute_c0t"]], "compute_ctt (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.compute_ctt"]], "diag_only (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.diag_only"]], "fetch_model() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.fetch_model"]], "fit() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.fit"]], "fit_fetch() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.fit_fetch"]], "get_params() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.get_params"]], "has_model (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.has_model"]], "is_lagged (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.is_lagged"]], "lagtime (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.lagtime"]], "model (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.model"]], "ncov (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.ncov"]], "partial_fit() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.partial_fit"]], "remove_data_mean (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.remove_data_mean"]], "reversible (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.reversible"]], "set_params() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.set_params"]], "sparse_mode (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.sparse_mode"]], "covariancemodel (class in deeptime.covariance)": [[19, "deeptime.covariance.CovarianceModel"]], "bessels_correction (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.bessels_correction"]], "copy() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.copy"]], "cov_00 (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.cov_00"]], "cov_0t (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.cov_0t"]], "cov_tt (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.cov_tt"]], "data_mean_removed (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.data_mean_removed"]], "get_params() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.get_params"]], "lagtime (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.lagtime"]], "mean_0 (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.mean_0"]], "mean_t (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.mean_t"]], "set_params() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.set_params"]], "symmetrized (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.symmetrized"]], "whiten() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.whiten"]], "koopmanweightingestimator (class in deeptime.covariance)": [[20, "deeptime.covariance.KoopmanWeightingEstimator"]], "__call__() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.__call__"]], "fetch_model() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fetch_model"]], "fit() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fit"]], "fit_fetch() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fit_fetch"]], "fit_transform() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fit_transform"]], "get_params() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.get_params"]], "has_model (deeptime.covariance.koopmanweightingestimator property)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.has_model"]], "lagtime (deeptime.covariance.koopmanweightingestimator property)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.lagtime"]], "model (deeptime.covariance.koopmanweightingestimator property)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.model"]], "partial_fit() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.partial_fit"]], "set_params() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.set_params"]], "transform() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.transform"]], "koopmanweightingmodel (class in deeptime.covariance)": [[21, "deeptime.covariance.KoopmanWeightingModel"]], "__call__() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.__call__"]], "const_weight_input (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.const_weight_input"]], "copy() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.copy"]], "covariances (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.covariances"]], "get_params() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.get_params"]], "koopman_operator (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.koopman_operator"]], "set_params() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.set_params"]], "transform() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.transform"]], "weights() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.weights"]], "weights_input (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.weights_input"]], "whitening_transformation (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.whitening_transformation"]], "abc_flow() (in module deeptime.data)": [[22, "deeptime.data.abc_flow"]], "bickley_jet() (in module deeptime.data)": [[23, "deeptime.data.bickley_jet"]], "birth_death_chain() (in module deeptime.data)": [[24, "deeptime.data.birth_death_chain"]], "custom_ode() (in module deeptime.data)": [[25, "deeptime.data.custom_ode"]], "custom_sde() (in module deeptime.data)": [[26, "deeptime.data.custom_sde"]], "double_well_2d() (in module deeptime.data)": [[27, "deeptime.data.double_well_2d"]], "double_well_discrete() (in module deeptime.data)": [[28, "deeptime.data.double_well_discrete"]], "drunkards_walk() (in module deeptime.data)": [[29, "deeptime.data.drunkards_walk"]], "ellipsoids() (in module deeptime.data)": [[30, "deeptime.data.ellipsoids"]], "lorenz_system() (in module deeptime.data)": [[31, "deeptime.data.lorenz_system"]], "ornstein_uhlenbeck() (in module deeptime.data)": [[32, "deeptime.data.ornstein_uhlenbeck"]], "position_based_fluids() (in module deeptime.data)": [[33, "deeptime.data.position_based_fluids"]], "prinz_potential() (in module deeptime.data)": [[34, "deeptime.data.prinz_potential"]], "quadruple_well() (in module deeptime.data)": [[35, "deeptime.data.quadruple_well"]], "quadruple_well_asymmetric() (in module deeptime.data)": [[36, "deeptime.data.quadruple_well_asymmetric"]], "sqrt_model() (in module deeptime.data)": [[37, "deeptime.data.sqrt_model"]], "swissroll_model() (in module deeptime.data)": [[38, "deeptime.data.swissroll_model"]], "thomas_attractor() (in module deeptime.data)": [[39, "deeptime.data.thomas_attractor"]], "time_dependent_quintuple_well() (in module deeptime.data)": [[40, "deeptime.data.time_dependent_quintuple_well"]], "tmatrix_metropolis1d() (in module deeptime.data)": [[41, "deeptime.data.tmatrix_metropolis1d"]], "triple_well_1d() (in module deeptime.data)": [[42, "deeptime.data.triple_well_1d"]], "triple_well_2d() (in module deeptime.data)": [[43, "deeptime.data.triple_well_2d"]], "covariancekoopmanmodel (class in deeptime.decomposition)": [[44, "deeptime.decomposition.CovarianceKoopmanModel"]], "__call__() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.__call__"]], "backward() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.backward"]], "ck_test() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.ck_test"]], "copy() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.copy"]], "cov (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov"]], "cov_00 (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov_00"]], "cov_0t (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov_0t"]], "cov_tt (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov_tt"]], "cumulative_kinetic_variance (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cumulative_kinetic_variance"]], "dim (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.dim"]], "effective_output_dimension() (deeptime.decomposition.covariancekoopmanmodel static method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.effective_output_dimension"]], "epsilon (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.epsilon"]], "expectation() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.expectation"]], "feature_component_correlation (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.feature_component_correlation"]], "forward() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.forward"]], "get_params() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.get_params"]], "instantaneous_coefficients (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.instantaneous_coefficients"]], "instantaneous_obs (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.instantaneous_obs"]], "koopman_matrix (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.koopman_matrix"]], "lagtime (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.lagtime"]], "mean_0 (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.mean_0"]], "mean_t (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.mean_t"]], "operator (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.operator"]], "operator_inverse (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.operator_inverse"]], "output_dimension (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.output_dimension"]], "propagate() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.propagate"]], "scaling (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.scaling"]], "score() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.score"]], "set_params() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.set_params"]], "singular_values (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.singular_values"]], "singular_vectors_left (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.singular_vectors_left"]], "singular_vectors_right (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.singular_vectors_right"]], "timelagged_coefficients (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.timelagged_coefficients"]], "timelagged_obs (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.timelagged_obs"]], "timescales() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.timescales"]], "transform() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.transform"]], "var_cutoff (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.var_cutoff"]], "whitening_rank_0 (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.whitening_rank_0"]], "whitening_rank_t (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.whitening_rank_t"]], "dmd (class in deeptime.decomposition)": [[45, "deeptime.decomposition.DMD"]], "__call__() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.__call__"]], "available_drivers (deeptime.decomposition.dmd attribute)": [[45, "deeptime.decomposition.DMD.available_drivers"]], "available_modes (deeptime.decomposition.dmd attribute)": [[45, "deeptime.decomposition.DMD.available_modes"]], "fetch_model() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fetch_model"]], "fit() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fit"]], "fit_fetch() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fit_fetch"]], "fit_transform() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fit_transform"]], "get_params() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.get_params"]], "has_model (deeptime.decomposition.dmd property)": [[45, "deeptime.decomposition.DMD.has_model"]], "model (deeptime.decomposition.dmd property)": [[45, "deeptime.decomposition.DMD.model"]], "set_params() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.set_params"]], "transform() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.transform"]], "dmdmodel (class in deeptime.decomposition)": [[46, "deeptime.decomposition.DMDModel"]], "__call__() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.__call__"]], "copy() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.copy"]], "get_params() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.get_params"]], "set_params() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.set_params"]], "transform() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.transform"]], "edmd (class in deeptime.decomposition)": [[47, "deeptime.decomposition.EDMD"]], "__call__() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.__call__"]], "available_operators (deeptime.decomposition.edmd attribute)": [[47, "deeptime.decomposition.EDMD.available_operators"]], "fetch_model() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fetch_model"]], "fit() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fit"]], "fit_fetch() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fit_fetch"]], "fit_transform() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fit_transform"]], "get_params() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.get_params"]], "has_model (deeptime.decomposition.edmd property)": [[47, "deeptime.decomposition.EDMD.has_model"]], "model (deeptime.decomposition.edmd property)": [[47, "deeptime.decomposition.EDMD.model"]], "set_params() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.set_params"]], "transform() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.transform"]], "edmdmodel (class in deeptime.decomposition)": [[48, "deeptime.decomposition.EDMDModel"]], "__call__() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.__call__"]], "backward() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.backward"]], "copy() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.copy"]], "forward() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.forward"]], "get_params() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.get_params"]], "instantaneous_obs (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.instantaneous_obs"]], "koopman_matrix (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.koopman_matrix"]], "operator (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.operator"]], "operator_inverse (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.operator_inverse"]], "output_dimension (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.output_dimension"]], "set_params() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.set_params"]], "timelagged_obs (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.timelagged_obs"]], "transform() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.transform"]], "kvad (class in deeptime.decomposition)": [[49, "deeptime.decomposition.KVAD"]], "__call__() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.__call__"]], "dim (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.dim"]], "epsilon (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.epsilon"]], "fetch_model() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fetch_model"]], "fit() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fit"]], "fit_fetch() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fit_fetch"]], "fit_transform() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fit_transform"]], "get_params() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.get_params"]], "has_model (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.has_model"]], "model (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.model"]], "observable_transform (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.observable_transform"]], "set_params() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.set_params"]], "transform() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.transform"]], "kvadmodel (class in deeptime.decomposition)": [[50, "deeptime.decomposition.KVADModel"]], "__call__() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.__call__"]], "backward() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.backward"]], "copy() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.copy"]], "forward() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.forward"]], "get_params() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.get_params"]], "instantaneous_obs (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.instantaneous_obs"]], "koopman_matrix (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.koopman_matrix"]], "operator (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.operator"]], "operator_inverse (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.operator_inverse"]], "output_dimension (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.output_dimension"]], "set_params() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.set_params"]], "timelagged_obs (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.timelagged_obs"]], "transform() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.transform"]], "kernelcca (class in deeptime.decomposition)": [[51, "deeptime.decomposition.KernelCCA"]], "fetch_model() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.fetch_model"]], "fit() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.fit"]], "fit_fetch() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.fit_fetch"]], "get_params() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.get_params"]], "has_model (deeptime.decomposition.kernelcca property)": [[51, "deeptime.decomposition.KernelCCA.has_model"]], "model (deeptime.decomposition.kernelcca property)": [[51, "deeptime.decomposition.KernelCCA.model"]], "set_params() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.set_params"]], "kernelccamodel (class in deeptime.decomposition)": [[52, "deeptime.decomposition.KernelCCAModel"]], "__call__() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.__call__"]], "backward() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.backward"]], "copy() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.copy"]], "forward() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.forward"]], "get_params() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.get_params"]], "instantaneous_obs (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.instantaneous_obs"]], "kernel (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.kernel"]], "koopman_matrix (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.koopman_matrix"]], "operator (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.operator"]], "operator_inverse (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.operator_inverse"]], "output_dimension (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.output_dimension"]], "set_params() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.set_params"]], "timelagged_obs (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.timelagged_obs"]], "transform() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.transform"]], "kerneledmd (class in deeptime.decomposition)": [[53, "deeptime.decomposition.KernelEDMD"]], "__call__() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.__call__"]], "fetch_model() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fetch_model"]], "fit() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fit"]], "fit_fetch() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fit_fetch"]], "fit_transform() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fit_transform"]], "get_params() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.get_params"]], "has_model (deeptime.decomposition.kerneledmd property)": [[53, "deeptime.decomposition.KernelEDMD.has_model"]], "model (deeptime.decomposition.kerneledmd property)": [[53, "deeptime.decomposition.KernelEDMD.model"]], "set_params() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.set_params"]], "transform() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.transform"]], "kerneledmdmodel (class in deeptime.decomposition)": [[54, "deeptime.decomposition.KernelEDMDModel"]], "__call__() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.__call__"]], "backward() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.backward"]], "copy() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.copy"]], "forward() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.forward"]], "get_params() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.get_params"]], "instantaneous_obs (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.instantaneous_obs"]], "koopman_matrix (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.koopman_matrix"]], "operator (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.operator"]], "operator_inverse (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.operator_inverse"]], "output_dimension (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.output_dimension"]], "set_params() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.set_params"]], "timelagged_obs (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.timelagged_obs"]], "transform() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.transform"]], "tica (class in deeptime.decomposition)": [[55, "deeptime.decomposition.TICA"]], "__call__() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.__call__"]], "covariance_estimator() (deeptime.decomposition.tica class method)": [[55, "deeptime.decomposition.TICA.covariance_estimator"]], "dim (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.dim"]], "epsilon (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.epsilon"]], "fetch_model() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fetch_model"]], "fit() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit"]], "fit_fetch() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_fetch"]], "fit_from_covariances() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_from_covariances"]], "fit_from_timeseries() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_from_timeseries"]], "fit_transform() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_transform"]], "get_params() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.get_params"]], "has_model (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.has_model"]], "lagtime (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.lagtime"]], "model (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.model"]], "partial_fit() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.partial_fit"]], "scaling (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.scaling"]], "set_params() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.set_params"]], "transform() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.transform"]], "var_cutoff (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.var_cutoff"]], "transferoperatormodel (class in deeptime.decomposition)": [[56, "deeptime.decomposition.TransferOperatorModel"]], "__call__() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.__call__"]], "backward() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.backward"]], "copy() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.copy"]], "forward() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.forward"]], "get_params() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.get_params"]], "instantaneous_obs (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.instantaneous_obs"]], "koopman_matrix (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.koopman_matrix"]], "operator (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.operator"]], "operator_inverse (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.operator_inverse"]], "output_dimension (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.output_dimension"]], "set_params() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.set_params"]], "timelagged_obs (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.timelagged_obs"]], "transform() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.transform"]], "vamp (class in deeptime.decomposition)": [[57, "deeptime.decomposition.VAMP"]], "__call__() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.__call__"]], "covariance_estimator() (deeptime.decomposition.vamp class method)": [[57, "deeptime.decomposition.VAMP.covariance_estimator"]], "dim (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.dim"]], "epsilon (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.epsilon"]], "fetch_model() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fetch_model"]], "fit() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit"]], "fit_fetch() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_fetch"]], "fit_from_covariances() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_from_covariances"]], "fit_from_timeseries() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_from_timeseries"]], "fit_transform() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_transform"]], "get_params() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.get_params"]], "has_model (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.has_model"]], "lagtime (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.lagtime"]], "model (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.model"]], "partial_fit() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.partial_fit"]], "scaling (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.scaling"]], "set_params() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.set_params"]], "transform() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.transform"]], "var_cutoff (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.var_cutoff"]], "blocksplit_trajs() (in module deeptime.decomposition)": [[58, "deeptime.decomposition.blocksplit_trajs"]], "cvsplit_trajs() (in module deeptime.decomposition)": [[59, "deeptime.decomposition.cvsplit_trajs"]], "tae (class in deeptime.decomposition.deep)": [[60, "deeptime.decomposition.deep.TAE"]], "__call__() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.__call__"]], "device (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.device"]], "dtype (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.dtype"]], "evaluate_loss() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.evaluate_loss"]], "fetch_model() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fetch_model"]], "fit() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fit"]], "fit_fetch() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fit_fetch"]], "fit_transform() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fit_transform"]], "get_params() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.get_params"]], "has_model (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.has_model"]], "learning_rate (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.learning_rate"]], "model (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.model"]], "optimizer (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.optimizer"]], "set_params() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.set_params"]], "setup_optimizer() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.setup_optimizer"]], "train_losses (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.train_losses"]], "transform() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.transform"]], "validation_losses (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.validation_losses"]], "taemodel (class in deeptime.decomposition.deep)": [[61, "deeptime.decomposition.deep.TAEModel"]], "__call__() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.__call__"]], "copy() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.copy"]], "decoder (deeptime.decomposition.deep.taemodel property)": [[61, "deeptime.decomposition.deep.TAEModel.decoder"]], "encoder (deeptime.decomposition.deep.taemodel property)": [[61, "deeptime.decomposition.deep.TAEModel.encoder"]], "get_params() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.get_params"]], "set_params() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.set_params"]], "transform() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.transform"]], "tvae (class in deeptime.decomposition.deep)": [[62, "deeptime.decomposition.deep.TVAE"]], "__call__() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.__call__"]], "device (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.device"]], "dtype (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.dtype"]], "evaluate_loss() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.evaluate_loss"]], "fetch_model() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fetch_model"]], "fit() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fit"]], "fit_fetch() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fit_fetch"]], "fit_transform() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fit_transform"]], "get_params() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.get_params"]], "has_model (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.has_model"]], "learning_rate (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.learning_rate"]], "model (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.model"]], "optimizer (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.optimizer"]], "set_params() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.set_params"]], "setup_optimizer() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.setup_optimizer"]], "train_losses (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.train_losses"]], "transform() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.transform"]], "validation_losses (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.validation_losses"]], "tvaeencoder (class in deeptime.decomposition.deep)": [[63, "deeptime.decomposition.deep.TVAEEncoder"]], "__call__() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.__call__"]], "add_module() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.add_module"]], "apply() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.apply"]], "bfloat16() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.bfloat16"]], "buffers() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.buffers"]], "children() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.children"]], "cpu() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.cpu"]], "cuda() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.cuda"]], "double() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.double"]], "eval() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.eval"]], "extra_repr() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.extra_repr"]], "float() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.float"]], "forward() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.forward"]], "get_buffer() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_buffer"]], "get_extra_state() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_extra_state"]], "get_parameter() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_parameter"]], "get_submodule() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_submodule"]], "half() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.half"]], "ipu() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.ipu"]], "load_state_dict() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.load_state_dict"]], "modules() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.modules"]], "named_buffers() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_buffers"]], "named_children() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_children"]], "named_modules() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_modules"]], "named_parameters() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_parameters"]], "parameters() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.parameters"]], "register_backward_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_backward_hook"]], "register_buffer() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_buffer"]], "register_forward_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_forward_hook"]], "register_forward_pre_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_forward_pre_hook"]], "register_full_backward_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_full_backward_hook"]], "register_load_state_dict_post_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_load_state_dict_post_hook"]], "register_module() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_module"]], "register_parameter() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_parameter"]], "requires_grad_() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.requires_grad_"]], "set_extra_state() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.set_extra_state"]], "share_memory() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.share_memory"]], "state_dict() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.state_dict"]], "to() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.to"]], "to_empty() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.to_empty"]], "train() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.train"]], "type() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.type"]], "xpu() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.xpu"]], "zero_grad() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.zero_grad"]], "tvaemodel (class in deeptime.decomposition.deep)": [[64, "deeptime.decomposition.deep.TVAEModel"]], "__call__() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.__call__"]], "copy() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.copy"]], "decoder (deeptime.decomposition.deep.tvaemodel property)": [[64, "deeptime.decomposition.deep.TVAEModel.decoder"]], "encoder (deeptime.decomposition.deep.tvaemodel property)": [[64, "deeptime.decomposition.deep.TVAEModel.encoder"]], "get_params() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.get_params"]], "set_params() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.set_params"]], "transform() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.transform"]], "vampnet (class in deeptime.decomposition.deep)": [[65, "deeptime.decomposition.deep.VAMPNet"]], "__call__() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.__call__"]], "device (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.device"]], "dtype (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.dtype"]], "epsilon (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.epsilon"]], "fetch_model() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fetch_model"]], "fit() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fit"]], "fit_fetch() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fit_fetch"]], "fit_transform() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fit_transform"]], "get_params() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.get_params"]], "has_model (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.has_model"]], "learning_rate (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.learning_rate"]], "lobe (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.lobe"]], "lobe_timelagged (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.lobe_timelagged"]], "model (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.model"]], "optimizer (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.optimizer"]], "partial_fit() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.partial_fit"]], "score_method (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.score_method"]], "set_params() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.set_params"]], "setup_optimizer() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.setup_optimizer"]], "train_scores (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.train_scores"]], "transform() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.transform"]], "validate() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.validate"]], "validation_scores (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.validation_scores"]], "vampnetmodel (class in deeptime.decomposition.deep)": [[66, "deeptime.decomposition.deep.VAMPNetModel"]], "__call__() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.__call__"]], "copy() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.copy"]], "get_params() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.get_params"]], "lobe (deeptime.decomposition.deep.vampnetmodel property)": [[66, "deeptime.decomposition.deep.VAMPNetModel.lobe"]], "lobe_timelagged (deeptime.decomposition.deep.vampnetmodel property)": [[66, "deeptime.decomposition.deep.VAMPNetModel.lobe_timelagged"]], "set_params() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.set_params"]], "transform() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.transform"]], "covariances() (in module deeptime.decomposition.deep)": [[67, "deeptime.decomposition.deep.covariances"]], "koopman_matrix() (in module deeptime.decomposition.deep)": [[68, "deeptime.decomposition.deep.koopman_matrix"]], "kvad_score() (in module deeptime.decomposition.deep)": [[69, "deeptime.decomposition.deep.kvad_score"]], "sym_inverse() (in module deeptime.decomposition.deep)": [[70, "deeptime.decomposition.deep.sym_inverse"]], "vamp_score() (in module deeptime.decomposition.deep)": [[71, "deeptime.decomposition.deep.vamp_score"]], "vampnet_loss() (in module deeptime.decomposition.deep)": [[72, "deeptime.decomposition.deep.vampnet_loss"]], "vamp_score() (in module deeptime.decomposition)": [[73, "deeptime.decomposition.vamp_score"]], "vamp_score_cv() (in module deeptime.decomposition)": [[74, "deeptime.decomposition.vamp_score_cv"]], "vamp_score_data() (in module deeptime.decomposition)": [[75, "deeptime.decomposition.vamp_score_data"]], "gaussiankernel (class in deeptime.kernels)": [[76, "deeptime.kernels.GaussianKernel"]], "__call__() (deeptime.kernels.gaussiankernel method)": [[76, "deeptime.kernels.GaussianKernel.__call__"]], "apply() (deeptime.kernels.gaussiankernel method)": [[76, "deeptime.kernels.GaussianKernel.apply"]], "gram() (deeptime.kernels.gaussiankernel method)": [[76, "deeptime.kernels.GaussianKernel.gram"]], "sigma (deeptime.kernels.gaussiankernel property)": [[76, "deeptime.kernels.GaussianKernel.sigma"]], "valid_impls (deeptime.kernels.gaussiankernel attribute)": [[76, "deeptime.kernels.GaussianKernel.valid_impls"]], "generalizedgaussiankernel (class in deeptime.kernels)": [[77, "deeptime.kernels.GeneralizedGaussianKernel"]], "__call__() (deeptime.kernels.generalizedgaussiankernel method)": [[77, "deeptime.kernels.GeneralizedGaussianKernel.__call__"]], "apply() (deeptime.kernels.generalizedgaussiankernel method)": [[77, "deeptime.kernels.GeneralizedGaussianKernel.apply"]], "gram() (deeptime.kernels.generalizedgaussiankernel method)": [[77, "deeptime.kernels.GeneralizedGaussianKernel.gram"]], "kernel (class in deeptime.kernels)": [[78, "deeptime.kernels.Kernel"]], "__call__() (deeptime.kernels.kernel method)": [[78, "deeptime.kernels.Kernel.__call__"]], "apply() (deeptime.kernels.kernel method)": [[78, "deeptime.kernels.Kernel.apply"]], "gram() (deeptime.kernels.kernel method)": [[78, "deeptime.kernels.Kernel.gram"]], "laplaciankernel (class in deeptime.kernels)": [[79, "deeptime.kernels.LaplacianKernel"]], "__call__() (deeptime.kernels.laplaciankernel method)": [[79, "deeptime.kernels.LaplacianKernel.__call__"]], "apply() (deeptime.kernels.laplaciankernel method)": [[79, "deeptime.kernels.LaplacianKernel.apply"]], "gram() (deeptime.kernels.laplaciankernel method)": [[79, "deeptime.kernels.LaplacianKernel.gram"]], "polynomialkernel (class in deeptime.kernels)": [[80, "deeptime.kernels.PolynomialKernel"]], "__call__() (deeptime.kernels.polynomialkernel method)": [[80, "deeptime.kernels.PolynomialKernel.__call__"]], "apply() (deeptime.kernels.polynomialkernel method)": [[80, "deeptime.kernels.PolynomialKernel.apply"]], "gram() (deeptime.kernels.polynomialkernel method)": [[80, "deeptime.kernels.PolynomialKernel.gram"]], "torchgaussiankernel (class in deeptime.kernels)": [[81, "deeptime.kernels.TorchGaussianKernel"]], "__call__() (deeptime.kernels.torchgaussiankernel method)": [[81, "deeptime.kernels.TorchGaussianKernel.__call__"]], "apply() (deeptime.kernels.torchgaussiankernel method)": [[81, "deeptime.kernels.TorchGaussianKernel.apply"]], "gram() (deeptime.kernels.torchgaussiankernel method)": [[81, "deeptime.kernels.TorchGaussianKernel.gram"]], "sigma (deeptime.kernels.torchgaussiankernel property)": [[81, "deeptime.kernels.TorchGaussianKernel.sigma"]], "valid_impls (deeptime.kernels.torchgaussiankernel attribute)": [[81, "deeptime.kernels.TorchGaussianKernel.valid_impls"]], "is_torch_kernel() (in module deeptime.kernels)": [[82, "deeptime.kernels.is_torch_kernel"]], "pccamodel (class in deeptime.markov)": [[83, "deeptime.markov.PCCAModel"]], "assignments (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.assignments"]], "coarse_grained_stationary_probability (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.coarse_grained_stationary_probability"]], "coarse_grained_transition_matrix (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.coarse_grained_transition_matrix"]], "copy() (deeptime.markov.pccamodel method)": [[83, "deeptime.markov.PCCAModel.copy"]], "get_params() (deeptime.markov.pccamodel method)": [[83, "deeptime.markov.PCCAModel.get_params"]], "memberships (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.memberships"]], "metastable_distributions (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.metastable_distributions"]], "n_metastable (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.n_metastable"]], "set_params() (deeptime.markov.pccamodel method)": [[83, "deeptime.markov.PCCAModel.set_params"]], "sets (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.sets"]], "reactiveflux (class in deeptime.markov)": [[84, "deeptime.markov.ReactiveFlux"]], "backward_committor (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.backward_committor"]], "coarse_grain() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.coarse_grain"]], "copy() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.copy"]], "forward_committor (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.forward_committor"]], "get_params() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.get_params"]], "gross_flux (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.gross_flux"]], "intermediate_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.intermediate_states"]], "major_flux() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.major_flux"]], "mfpt (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.mfpt"]], "n_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.n_states"]], "net_flux (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.net_flux"]], "pathways() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.pathways"]], "rate (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.rate"]], "set_params() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.set_params"]], "source_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.source_states"]], "stationary_distribution (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.stationary_distribution"]], "target_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.target_states"]], "total_flux (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.total_flux"]], "transitioncountestimator (class in deeptime.markov)": [[85, "deeptime.markov.TransitionCountEstimator"]], "__call__() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.__call__"]], "count() (deeptime.markov.transitioncountestimator static method)": [[85, "deeptime.markov.TransitionCountEstimator.count"]], "count_mode (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.count_mode"]], "fetch_model() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fetch_model"]], "fit() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fit"]], "fit_fetch() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fit_fetch"]], "fit_transform() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fit_transform"]], "get_params() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.get_params"]], "has_model (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.has_model"]], "lagtime (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.lagtime"]], "model (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.model"]], "n_states (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.n_states"]], "set_params() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.set_params"]], "sparse (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.sparse"]], "transform() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.transform"]], "transitioncountmodel (class in deeptime.markov)": [[86, "deeptime.markov.TransitionCountModel"]], "connected_sets() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.connected_sets"]], "copy() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.copy"]], "count_matrix (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.count_matrix"]], "count_matrix_full (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.count_matrix_full"]], "count_matrix_histogram() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.count_matrix_histogram"]], "counting_mode (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.counting_mode"]], "get_params() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.get_params"]], "is_connected() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.is_connected"]], "is_full_model (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.is_full_model"]], "lagtime (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.lagtime"]], "n_states (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.n_states"]], "n_states_full (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.n_states_full"]], "selected_count_fraction (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.selected_count_fraction"]], "selected_state_fraction (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.selected_state_fraction"]], "set_params() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.set_params"]], "state_histogram (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_histogram"]], "state_histogram_full (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_histogram_full"]], "state_symbols (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_symbols"]], "state_symbols_with_blank (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_symbols_with_blank"]], "states (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.states"]], "states_to_symbols() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.states_to_symbols"]], "submodel() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.submodel"]], "submodel_largest() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.submodel_largest"]], "symbols_to_states() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.symbols_to_states"]], "total_count (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.total_count"]], "transform_discrete_trajectories_to_submodel() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.transform_discrete_trajectories_to_submodel"]], "visited_set (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.visited_set"]], "compute_connected_sets() (in module deeptime.markov)": [[87, "deeptime.markov.compute_connected_sets"]], "compute_dtrajs_effective() (in module deeptime.markov)": [[88, "deeptime.markov.compute_dtrajs_effective"]], "compute_effective_stride() (in module deeptime.markov)": [[89, "deeptime.markov.compute_effective_stride"]], "count_states() (in module deeptime.markov)": [[90, "deeptime.markov.count_states"]], "bayesianhmm (class in deeptime.markov.hmm)": [[91, "deeptime.markov.hmm.BayesianHMM"]], "default() (deeptime.markov.hmm.bayesianhmm static method)": [[91, "deeptime.markov.hmm.BayesianHMM.default"]], "fetch_model() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.fetch_model"]], "fit() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.fit"]], "fit_fetch() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.fit_fetch"]], "get_params() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.get_params"]], "has_model (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.has_model"]], "initial_distribution_prior (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.initial_distribution_prior"]], "initial_hmm (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.initial_hmm"]], "model (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.model"]], "n_samples (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.n_samples"]], "reversible (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.reversible"]], "set_params() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.set_params"]], "stationary (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.stationary"]], "store_hidden (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.store_hidden"]], "transition_matrix_prior (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.transition_matrix_prior"]], "bayesianhmmposterior (class in deeptime.markov.hmm)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior"]], "ck_test() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.ck_test"]], "copy() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.copy"]], "evaluate_samples() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.evaluate_samples"]], "gather_stats() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.gather_stats"]], "get_params() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.get_params"]], "hidden_state_trajectories_samples (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.hidden_state_trajectories_samples"]], "lagtime (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.lagtime"]], "prior (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.prior"]], "samples (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.samples"]], "set_params() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.set_params"]], "submodel() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.submodel"]], "submodel_largest() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.submodel_largest"]], "submodel_populous() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.submodel_populous"]], "timescales() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.timescales"]], "discreteoutputmodel (class in deeptime.markov.hmm)": [[93, "deeptime.markov.hmm.DiscreteOutputModel"]], "copy() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.copy"]], "fit() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.fit"]], "generate_observation_trajectory() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.generate_observation_trajectory"]], "get_params() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.get_params"]], "ignore_outliers (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.ignore_outliers"]], "map_observations_to_submodel() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.map_observations_to_submodel"]], "n_hidden_states (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.n_hidden_states"]], "n_observable_states (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.n_observable_states"]], "normalize() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.normalize"]], "output_probabilities (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.output_probabilities"]], "prior (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.prior"]], "sample() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.sample"]], "set_params() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.set_params"]], "submodel() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.submodel"]], "to_state_probability_trajectory() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.to_state_probability_trajectory"]], "gaussianoutputmodel (class in deeptime.markov.hmm)": [[94, "deeptime.markov.hmm.GaussianOutputModel"]], "copy() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.copy"]], "fit() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.fit"]], "generate_observation_trajectory() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.generate_observation_trajectory"]], "get_params() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.get_params"]], "ignore_outliers (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.ignore_outliers"]], "means (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.means"]], "n_hidden_states (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.n_hidden_states"]], "n_observable_states (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.n_observable_states"]], "sample() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.sample"]], "set_params() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.set_params"]], "sigmas (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.sigmas"]], "submodel() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.submodel"]], "to_state_probability_trajectory() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.to_state_probability_trajectory"]], "hiddenmarkovmodel (class in deeptime.markov.hmm)": [[95, "deeptime.markov.hmm.HiddenMarkovModel"]], "ck_test() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.ck_test"]], "collect_observations_in_state() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.collect_observations_in_state"]], "compute_observation_likelihood() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.compute_observation_likelihood"]], "compute_viterbi_paths() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.compute_viterbi_paths"]], "copy() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.copy"]], "correlation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.correlation_obs"]], "count_model (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.count_model"]], "eigenvectors_left_obs (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.eigenvectors_left_obs"]], "eigenvectors_right_obs (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.eigenvectors_right_obs"]], "expectation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.expectation_obs"]], "fingerprint_correlation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.fingerprint_correlation_obs"]], "fingerprint_relaxation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.fingerprint_relaxation_obs"]], "get_params() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.get_params"]], "hidden_state_trajectories (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.hidden_state_trajectories"]], "initial_count (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.initial_count"]], "initial_distribution (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.initial_distribution"]], "lagtime (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.lagtime"]], "lifetimes (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.lifetimes"]], "likelihood (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.likelihood"]], "likelihoods (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.likelihoods"]], "metastable_assignments (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_assignments"]], "metastable_distributions (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_distributions"]], "metastable_memberships (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_memberships"]], "metastable_sets (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_sets"]], "n_hidden_states (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.n_hidden_states"]], "n_observation_states (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.n_observation_states"]], "nonempty_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.nonempty_obs"]], "observation_symbols (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.observation_symbols"]], "observation_symbols_full (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.observation_symbols_full"]], "output_model (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.output_model"]], "output_probabilities (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.output_probabilities"]], "propagate() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.propagate"]], "relaxation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.relaxation_obs"]], "sample_by_observation_probabilities() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.sample_by_observation_probabilities"]], "set_params() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.set_params"]], "simulate() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.simulate"]], "state_probabilities (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.state_probabilities"]], "states_largest() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.states_largest"]], "states_populous() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.states_populous"]], "stationary_distribution_obs (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.stationary_distribution_obs"]], "stride (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.stride"]], "submodel() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel"]], "submodel_disconnect() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel_disconnect"]], "submodel_largest() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel_largest"]], "submodel_populous() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel_populous"]], "timescales() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.timescales"]], "transform_discrete_trajectories_to_observed_symbols() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transform_discrete_trajectories_to_observed_symbols"]], "transition_counts (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transition_counts"]], "transition_matrix_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transition_matrix_obs"]], "transition_model (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transition_model"]], "maximumlikelihoodhmm (class in deeptime.markov.hmm)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM"]], "accuracy (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.accuracy"]], "fetch_model() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fetch_model"]], "fit() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fit"]], "fit_fetch() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fit_fetch"]], "fixed_initial_distribution (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fixed_initial_distribution"]], "fixed_stationary_distribution (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fixed_stationary_distribution"]], "get_params() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.get_params"]], "has_model (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.has_model"]], "initial_model (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.initial_model"]], "lagtime (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.lagtime"]], "maxit (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.maxit"]], "maxit_reversible (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.maxit_reversible"]], "model (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.model"]], "n_hidden_states (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.n_hidden_states"]], "reversible (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.reversible"]], "set_params() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.set_params"]], "stationary (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.stationary"]], "stride (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.stride"]], "outputmodel (class in deeptime.markov.hmm)": [[97, "deeptime.markov.hmm.OutputModel"]], "copy() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.copy"]], "fit() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.fit"]], "generate_observation_trajectory() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.generate_observation_trajectory"]], "get_params() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.get_params"]], "ignore_outliers (deeptime.markov.hmm.outputmodel property)": [[97, "deeptime.markov.hmm.OutputModel.ignore_outliers"]], "n_hidden_states (deeptime.markov.hmm.outputmodel property)": [[97, "deeptime.markov.hmm.OutputModel.n_hidden_states"]], "n_observable_states (deeptime.markov.hmm.outputmodel property)": [[97, "deeptime.markov.hmm.OutputModel.n_observable_states"]], "sample() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.sample"]], "set_params() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.set_params"]], "submodel() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.submodel"]], "to_state_probability_trajectory() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.to_state_probability_trajectory"]], "metastable_from_data() (in module deeptime.markov.hmm.init.discrete)": [[98, "deeptime.markov.hmm.init.discrete.metastable_from_data"]], "metastable_from_msm() (in module deeptime.markov.hmm.init.discrete)": [[99, "deeptime.markov.hmm.init.discrete.metastable_from_msm"]], "random_guess() (in module deeptime.markov.hmm.init.discrete)": [[100, "deeptime.markov.hmm.init.discrete.random_guess"]], "from_data() (in module deeptime.markov.hmm.init.gaussian)": [[101, "deeptime.markov.hmm.init.gaussian.from_data"]], "augmentedmsm (class in deeptime.markov.msm)": [[102, "deeptime.markov.msm.AugmentedMSM"]], "ck_test() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.ck_test"]], "committor_backward() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.committor_backward"]], "committor_forward() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.committor_forward"]], "compute_state_indices() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.compute_state_indices"]], "compute_trajectory_weights() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.compute_trajectory_weights"]], "copy() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.copy"]], "correlation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.correlation"]], "count_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.count_model"]], "eigenvalues() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.eigenvalues"]], "eigenvectors_left() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.eigenvectors_left"]], "eigenvectors_right() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.eigenvectors_right"]], "empirical_koopman_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.empirical_koopman_model"]], "expectation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.expectation"]], "fingerprint_correlation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.fingerprint_correlation"]], "fingerprint_relaxation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.fingerprint_relaxation"]], "get_params() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.get_params"]], "has_count_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.has_count_model"]], "hmm() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.hmm"]], "is_real (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.is_real"]], "koopman_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.koopman_model"]], "lagtime (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.lagtime"]], "mfpt() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.mfpt"]], "n_eigenvalues (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.n_eigenvalues"]], "n_states (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.n_states"]], "ncv (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.ncv"]], "optimizer_state (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.optimizer_state"]], "pcca() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.pcca"]], "propagate() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.propagate"]], "reactive_flux() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.reactive_flux"]], "relaxation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.relaxation"]], "reversible (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.reversible"]], "score() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.score"]], "set_params() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.set_params"]], "simulate() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.simulate"]], "sparse (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.sparse"]], "stationary (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.stationary"]], "stationary_distribution (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.stationary_distribution"]], "submodel() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.submodel"]], "timescales() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.timescales"]], "to_koopman_model() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.to_koopman_model"]], "transition_matrix (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.transition_matrix"]], "transition_matrix_tolerance (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.transition_matrix_tolerance"]], "update_stationary_distribution() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.update_stationary_distribution"]], "update_transition_matrix() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.update_transition_matrix"]], "augmentedmsmestimator (class in deeptime.markov.msm)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator"]], "convergence_criterion_lagrange (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.convergence_criterion_lagrange"]], "estimator_from_feature_trajectories() (deeptime.markov.msm.augmentedmsmestimator static method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.estimator_from_feature_trajectories"]], "expectations_by_state (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.expectations_by_state"]], "experimental_measurement_weights (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.experimental_measurement_weights"]], "experimental_measurements (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.experimental_measurements"]], "fetch_model() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.fetch_model"]], "fit() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.fit"]], "fit_fetch() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.fit_fetch"]], "get_params() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.get_params"]], "has_model (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.has_model"]], "max_cache (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.max_cache"]], "maxiter (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.maxiter"]], "model (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.model"]], "reversible (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.reversible"]], "set_params() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.set_params"]], "sparse (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.sparse"]], "support_confidence (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.support_confidence"]], "uncertainties (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.uncertainties"]], "bayesianmsm (class in deeptime.markov.msm)": [[104, "deeptime.markov.msm.BayesianMSM"]], "fetch_model() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fetch_model"]], "fit() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit"]], "fit_fetch() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_fetch"]], "fit_from_counts() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_from_counts"]], "fit_from_discrete_timeseries() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_from_discrete_timeseries"]], "fit_from_msm() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_from_msm"]], "get_params() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.get_params"]], "has_model (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.has_model"]], "model (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.model"]], "reversible (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.reversible"]], "sample() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.sample"]], "set_params() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.set_params"]], "sparse (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.sparse"]], "stationary_distribution_constraint (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.stationary_distribution_constraint"]], "bayesianmsmposterior (class in deeptime.markov.msm)": [[105, "deeptime.markov.msm.BayesianMSMPosterior"]], "ck_test() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.ck_test"]], "copy() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.copy"]], "evaluate_samples() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.evaluate_samples"]], "gather_stats() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.gather_stats"]], "get_params() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.get_params"]], "lagtime (deeptime.markov.msm.bayesianmsmposterior property)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.lagtime"]], "prior (deeptime.markov.msm.bayesianmsmposterior property)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.prior"]], "samples (deeptime.markov.msm.bayesianmsmposterior property)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.samples"]], "set_params() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.set_params"]], "submodel() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.submodel"]], "timescales() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.timescales"]], "koopmanreweightedmsm (class in deeptime.markov.msm)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM"]], "ck_test() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.ck_test"]], "committor_backward() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.committor_backward"]], "committor_forward() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.committor_forward"]], "compute_state_indices() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.compute_state_indices"]], "compute_trajectory_weights() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.compute_trajectory_weights"]], "copy() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.copy"]], "correlation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.correlation"]], "count_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.count_model"]], "eigenvalues() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.eigenvalues"]], "eigenvectors_left() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.eigenvectors_left"]], "eigenvectors_right() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.eigenvectors_right"]], "empirical_koopman_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.empirical_koopman_model"]], "expectation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.expectation"]], "fingerprint_correlation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.fingerprint_correlation"]], "fingerprint_relaxation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.fingerprint_relaxation"]], "get_params() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.get_params"]], "has_count_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.has_count_model"]], "hmm() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.hmm"]], "is_real (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.is_real"]], "koopman_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.koopman_model"]], "lagtime (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.lagtime"]], "mfpt() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.mfpt"]], "n_eigenvalues (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.n_eigenvalues"]], "n_states (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.n_states"]], "ncv (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.ncv"]], "oom_components (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_components"]], "oom_eigenvalues (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_eigenvalues"]], "oom_evaluator (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_evaluator"]], "oom_information_state_vector (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_information_state_vector"]], "oom_rank (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_rank"]], "oom_timescales (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_timescales"]], "pcca() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.pcca"]], "propagate() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.propagate"]], "reactive_flux() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.reactive_flux"]], "relaxation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.relaxation"]], "reversible (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.reversible"]], "score() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.score"]], "set_params() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.set_params"]], "simulate() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.simulate"]], "sparse (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.sparse"]], "stationary (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.stationary"]], "stationary_distribution (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.stationary_distribution"]], "submodel() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.submodel"]], "timescales() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.timescales"]], "to_koopman_model() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.to_koopman_model"]], "transition_matrix (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.transition_matrix"]], "transition_matrix_tolerance (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.transition_matrix_tolerance"]], "twostep_count_matrices (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.twostep_count_matrices"]], "update_stationary_distribution() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.update_stationary_distribution"]], "update_transition_matrix() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.update_transition_matrix"]], "markovstatemodel (class in deeptime.markov.msm)": [[107, "deeptime.markov.msm.MarkovStateModel"]], "ck_test() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.ck_test"]], "committor_backward() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.committor_backward"]], "committor_forward() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.committor_forward"]], "compute_state_indices() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.compute_state_indices"]], "compute_trajectory_weights() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.compute_trajectory_weights"]], "copy() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.copy"]], "correlation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.correlation"]], "count_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.count_model"]], "eigenvalues() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.eigenvalues"]], "eigenvectors_left() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.eigenvectors_left"]], "eigenvectors_right() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.eigenvectors_right"]], "empirical_koopman_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.empirical_koopman_model"]], "expectation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.expectation"]], "fingerprint_correlation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.fingerprint_correlation"]], "fingerprint_relaxation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.fingerprint_relaxation"]], "get_params() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.get_params"]], "has_count_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.has_count_model"]], "hmm() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.hmm"]], "is_real (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.is_real"]], "koopman_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.koopman_model"]], "lagtime (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.lagtime"]], "mfpt() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.mfpt"]], "n_eigenvalues (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.n_eigenvalues"]], "n_states (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.n_states"]], "ncv (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.ncv"]], "pcca() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.pcca"]], "propagate() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.propagate"]], "reactive_flux() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.reactive_flux"]], "relaxation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.relaxation"]], "reversible (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.reversible"]], "score() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.score"]], "set_params() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.set_params"]], "simulate() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.simulate"]], "sparse (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.sparse"]], "stationary (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.stationary"]], "stationary_distribution (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.stationary_distribution"]], "submodel() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.submodel"]], "timescales() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.timescales"]], "to_koopman_model() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.to_koopman_model"]], "transition_matrix (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.transition_matrix"]], "transition_matrix_tolerance (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.transition_matrix_tolerance"]], "update_stationary_distribution() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.update_stationary_distribution"]], "update_transition_matrix() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.update_transition_matrix"]], "markovstatemodelcollection (class in deeptime.markov.msm)": [[108, "deeptime.markov.msm.MarkovStateModelCollection"]], "ck_test() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.ck_test"]], "committor_backward() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.committor_backward"]], "committor_forward() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.committor_forward"]], "compute_state_indices() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.compute_state_indices"]], "compute_trajectory_weights() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.compute_trajectory_weights"]], "copy() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.copy"]], "correlation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.correlation"]], "count_fraction (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.count_fraction"]], "count_fractions (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.count_fractions"]], "count_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.count_model"]], "current_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.current_model"]], "eigenvalues() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.eigenvalues"]], "eigenvectors_left() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.eigenvectors_left"]], "eigenvectors_right() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.eigenvectors_right"]], "empirical_koopman_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.empirical_koopman_model"]], "expectation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.expectation"]], "fingerprint_correlation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.fingerprint_correlation"]], "fingerprint_relaxation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.fingerprint_relaxation"]], "get_params() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.get_params"]], "has_count_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.has_count_model"]], "hmm() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.hmm"]], "is_real (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.is_real"]], "koopman_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.koopman_model"]], "lagtime (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.lagtime"]], "mfpt() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.mfpt"]], "n_connected_msms (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.n_connected_msms"]], "n_eigenvalues (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.n_eigenvalues"]], "n_states (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.n_states"]], "ncv (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.ncv"]], "pcca() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.pcca"]], "propagate() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.propagate"]], "reactive_flux() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.reactive_flux"]], "relaxation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.relaxation"]], "reversible (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.reversible"]], "score() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.score"]], "select() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.select"]], "set_params() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.set_params"]], "simulate() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.simulate"]], "sparse (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.sparse"]], "state_fraction (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.state_fraction"]], "state_fractions (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.state_fractions"]], "state_symbols() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.state_symbols"]], "stationary (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.stationary"]], "stationary_distribution (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.stationary_distribution"]], "submodel() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.submodel"]], "timescales() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.timescales"]], "to_koopman_model() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.to_koopman_model"]], "transition_matrix (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.transition_matrix"]], "transition_matrix_tolerance (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.transition_matrix_tolerance"]], "update_stationary_distribution() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.update_stationary_distribution"]], "update_transition_matrix() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.update_transition_matrix"]], "maximumlikelihoodmsm (class in deeptime.markov.msm)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM"]], "allow_disconnected (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.allow_disconnected"]], "fetch_model() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fetch_model"]], "fit() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit"]], "fit_fetch() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit_fetch"]], "fit_from_counts() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit_from_counts"]], "fit_from_discrete_timeseries() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit_from_discrete_timeseries"]], "get_params() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.get_params"]], "has_model (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.has_model"]], "model (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.model"]], "reversible (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.reversible"]], "set_params() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.set_params"]], "sparse (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.sparse"]], "stationary_distribution_constraint (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.stationary_distribution_constraint"]], "oomreweightedmsm (class in deeptime.markov.msm)": [[110, "deeptime.markov.msm.OOMReweightedMSM"]], "fetch_model() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.fetch_model"]], "fit() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.fit"]], "fit_fetch() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.fit_fetch"]], "get_params() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.get_params"]], "has_model (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.has_model"]], "model (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.model"]], "reversible (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.reversible"]], "set_params() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.set_params"]], "sparse (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.sparse"]], "tram (class in deeptime.markov.msm)": [[111, "deeptime.markov.msm.TRAM"]], "fetch_model() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.fetch_model"]], "fit() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.fit"]], "fit_fetch() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.fit_fetch"]], "get_params() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.get_params"]], "has_model (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.has_model"]], "model (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.model"]], "reversible (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.reversible"]], "set_params() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.set_params"]], "sparse (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.sparse"]], "tramdataset (class in deeptime.markov.msm)": [[112, "deeptime.markov.msm.TRAMDataset"]], "check_against_model() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.check_against_model"]], "connectivity_options (deeptime.markov.msm.tramdataset attribute)": [[112, "deeptime.markov.msm.TRAMDataset.connectivity_options"]], "n_markov_states (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.n_markov_states"]], "n_therm_states (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.n_therm_states"]], "restrict_to_largest_connected_set() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.restrict_to_largest_connected_set"]], "restrict_to_submodel() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.restrict_to_submodel"]], "setflags() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.setflags"]], "state_counts (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.state_counts"]], "tram_input (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.tram_input"]], "transition_counts (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.transition_counts"]], "trammodel (class in deeptime.markov.msm)": [[113, "deeptime.markov.msm.TRAMModel"]], "biased_conf_energies (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.biased_conf_energies"]], "compute_pmf() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_PMF"]], "compute_log_likelihood() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_log_likelihood"]], "compute_observable() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_observable"]], "compute_sample_weights_log() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_sample_weights_log"]], "copy() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.copy"]], "get_params() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.get_params"]], "lagrangian_mult_log (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.lagrangian_mult_log"]], "markov_state_energies (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.markov_state_energies"]], "modified_state_counts_log (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.modified_state_counts_log"]], "msm_collection (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.msm_collection"]], "set_params() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.set_params"]], "therm_state_energies (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.therm_state_energies"]], "number_of_states() (in module deeptime.markov)": [[114, "deeptime.markov.number_of_states"]], "pcca() (in module deeptime.markov)": [[115, "deeptime.markov.pcca"]], "reactive_flux() (in module deeptime.markov)": [[116, "deeptime.markov.reactive_flux"]], "compute_index_states() (in module deeptime.markov.sample)": [[117, "deeptime.markov.sample.compute_index_states"]], "indices_by_distribution() (in module deeptime.markov.sample)": [[118, "deeptime.markov.sample.indices_by_distribution"]], "indices_by_sequence() (in module deeptime.markov.sample)": [[119, "deeptime.markov.sample.indices_by_sequence"]], "indices_by_state() (in module deeptime.markov.sample)": [[120, "deeptime.markov.sample.indices_by_state"]], "committor() (in module deeptime.markov.tools.analysis)": [[121, "deeptime.markov.tools.analysis.committor"]], "committor_sensitivity() (in module deeptime.markov.tools.analysis)": [[122, "deeptime.markov.tools.analysis.committor_sensitivity"]], "correlation() (in module deeptime.markov.tools.analysis)": [[123, "deeptime.markov.tools.analysis.correlation"]], "eigenvalue_sensitivity() (in module deeptime.markov.tools.analysis)": [[124, "deeptime.markov.tools.analysis.eigenvalue_sensitivity"]], "eigenvalues() (in module deeptime.markov.tools.analysis)": [[125, "deeptime.markov.tools.analysis.eigenvalues"]], "eigenvector_sensitivity() (in module deeptime.markov.tools.analysis)": [[126, "deeptime.markov.tools.analysis.eigenvector_sensitivity"]], "eigenvectors() (in module deeptime.markov.tools.analysis)": [[127, "deeptime.markov.tools.analysis.eigenvectors"]], "expectation() (in module deeptime.markov.tools.analysis)": [[128, "deeptime.markov.tools.analysis.expectation"]], "expectation_sensitivity() (in module deeptime.markov.tools.analysis)": [[129, "deeptime.markov.tools.analysis.expectation_sensitivity"]], "expected_counts() (in module deeptime.markov.tools.analysis)": [[130, "deeptime.markov.tools.analysis.expected_counts"]], "expected_counts_stationary() (in module deeptime.markov.tools.analysis)": [[131, "deeptime.markov.tools.analysis.expected_counts_stationary"]], "fingerprint_correlation() (in module deeptime.markov.tools.analysis)": [[132, "deeptime.markov.tools.analysis.fingerprint_correlation"]], "fingerprint_relaxation() (in module deeptime.markov.tools.analysis)": [[133, "deeptime.markov.tools.analysis.fingerprint_relaxation"]], "hitting_probability() (in module deeptime.markov.tools.analysis)": [[134, "deeptime.markov.tools.analysis.hitting_probability"]], "is_connected() (in module deeptime.markov.tools.analysis)": [[135, "deeptime.markov.tools.analysis.is_connected"]], "is_rate_matrix() (in module deeptime.markov.tools.analysis)": [[136, "deeptime.markov.tools.analysis.is_rate_matrix"]], "is_reversible() (in module deeptime.markov.tools.analysis)": [[137, "deeptime.markov.tools.analysis.is_reversible"]], "is_transition_matrix() (in module deeptime.markov.tools.analysis)": [[138, "deeptime.markov.tools.analysis.is_transition_matrix"]], "mfpt() (in module deeptime.markov.tools.analysis)": [[139, "deeptime.markov.tools.analysis.mfpt"]], "mfpt_sensitivity() (in module deeptime.markov.tools.analysis)": [[140, "deeptime.markov.tools.analysis.mfpt_sensitivity"]], "pcca_memberships() (in module deeptime.markov.tools.analysis)": [[141, "deeptime.markov.tools.analysis.pcca_memberships"]], "rdl_decomposition() (in module deeptime.markov.tools.analysis)": [[142, "deeptime.markov.tools.analysis.rdl_decomposition"]], "relaxation() (in module deeptime.markov.tools.analysis)": [[143, "deeptime.markov.tools.analysis.relaxation"]], "stationary_distribution() (in module deeptime.markov.tools.analysis)": [[144, "deeptime.markov.tools.analysis.stationary_distribution"]], "stationary_distribution_sensitivity() (in module deeptime.markov.tools.analysis)": [[145, "deeptime.markov.tools.analysis.stationary_distribution_sensitivity"]], "timescale_sensitivity() (in module deeptime.markov.tools.analysis)": [[146, "deeptime.markov.tools.analysis.timescale_sensitivity"]], "timescales() (in module deeptime.markov.tools.analysis)": [[147, "deeptime.markov.tools.analysis.timescales"]], "bootstrap_counts() (in module deeptime.markov.tools.estimation)": [[148, "deeptime.markov.tools.estimation.bootstrap_counts"]], "bootstrap_trajectories() (in module deeptime.markov.tools.estimation)": [[149, "deeptime.markov.tools.estimation.bootstrap_trajectories"]], "connected_sets() (in module deeptime.markov.tools.estimation)": [[150, "deeptime.markov.tools.estimation.connected_sets"]], "count_matrix() (in module deeptime.markov.tools.estimation)": [[151, "deeptime.markov.tools.estimation.count_matrix"]], "error_perturbation() (in module deeptime.markov.tools.estimation)": [[152, "deeptime.markov.tools.estimation.error_perturbation"]], "is_connected() (in module deeptime.markov.tools.estimation)": [[153, "deeptime.markov.tools.estimation.is_connected"]], "largest_connected_set() (in module deeptime.markov.tools.estimation)": [[154, "deeptime.markov.tools.estimation.largest_connected_set"]], "largest_connected_submatrix() (in module deeptime.markov.tools.estimation)": [[155, "deeptime.markov.tools.estimation.largest_connected_submatrix"]], "log_likelihood() (in module deeptime.markov.tools.estimation)": [[156, "deeptime.markov.tools.estimation.log_likelihood"]], "prior_const() (in module deeptime.markov.tools.estimation)": [[157, "deeptime.markov.tools.estimation.prior_const"]], "prior_neighbor() (in module deeptime.markov.tools.estimation)": [[158, "deeptime.markov.tools.estimation.prior_neighbor"]], "prior_rev() (in module deeptime.markov.tools.estimation)": [[159, "deeptime.markov.tools.estimation.prior_rev"]], "rate_matrix() (in module deeptime.markov.tools.estimation)": [[160, "deeptime.markov.tools.estimation.rate_matrix"]], "tmatrix_cov() (in module deeptime.markov.tools.estimation)": [[161, "deeptime.markov.tools.estimation.tmatrix_cov"]], "tmatrix_sampler() (in module deeptime.markov.tools.estimation)": [[162, "deeptime.markov.tools.estimation.tmatrix_sampler"]], "transition_matrix() (in module deeptime.markov.tools.estimation)": [[163, "deeptime.markov.tools.estimation.transition_matrix"]], "coarsegrain() (in module deeptime.markov.tools.flux)": [[164, "deeptime.markov.tools.flux.coarsegrain"]], "flux_consumers() (in module deeptime.markov.tools.flux)": [[165, "deeptime.markov.tools.flux.flux_consumers"]], "flux_matrix() (in module deeptime.markov.tools.flux)": [[166, "deeptime.markov.tools.flux.flux_matrix"]], "flux_producers() (in module deeptime.markov.tools.flux)": [[167, "deeptime.markov.tools.flux.flux_producers"]], "flux_production() (in module deeptime.markov.tools.flux)": [[168, "deeptime.markov.tools.flux.flux_production"]], "mfpt() (in module deeptime.markov.tools.flux)": [[169, "deeptime.markov.tools.flux.mfpt"]], "pathways() (in module deeptime.markov.tools.flux)": [[170, "deeptime.markov.tools.flux.pathways"]], "rate() (in module deeptime.markov.tools.flux)": [[171, "deeptime.markov.tools.flux.rate"]], "to_netflux() (in module deeptime.markov.tools.flux)": [[172, "deeptime.markov.tools.flux.to_netflux"]], "total_flux() (in module deeptime.markov.tools.flux)": [[173, "deeptime.markov.tools.flux.total_flux"]], "zerorankerror": [[174, "deeptime.numeric.ZeroRankError"]], "with_traceback() (deeptime.numeric.zerorankerror method)": [[174, "deeptime.numeric.ZeroRankError.with_traceback"]], "drop_nan_rows() (in module deeptime.numeric)": [[175, "deeptime.numeric.drop_nan_rows"]], "eig_corr() (in module deeptime.numeric)": [[176, "deeptime.numeric.eig_corr"]], "eigs() (in module deeptime.numeric)": [[177, "deeptime.numeric.eigs"]], "is_diagonal_matrix() (in module deeptime.numeric)": [[178, "deeptime.numeric.is_diagonal_matrix"]], "is_square_matrix() (in module deeptime.numeric)": [[179, "deeptime.numeric.is_square_matrix"]], "schatten_norm() (in module deeptime.numeric)": [[180, "deeptime.numeric.schatten_norm"]], "sort_eigs() (in module deeptime.numeric)": [[181, "deeptime.numeric.sort_eigs"]], "spd_eig() (in module deeptime.numeric)": [[182, "deeptime.numeric.spd_eig"]], "spd_inv() (in module deeptime.numeric)": [[183, "deeptime.numeric.spd_inv"]], "spd_inv_split() (in module deeptime.numeric)": [[184, "deeptime.numeric.spd_inv_split"]], "spd_inv_sqrt() (in module deeptime.numeric)": [[185, "deeptime.numeric.spd_inv_sqrt"]], "spd_truncated_svd() (in module deeptime.numeric)": [[186, "deeptime.numeric.spd_truncated_svd"]], "energy2dplot (class in deeptime.plots)": [[187, "deeptime.plots.Energy2dPlot"]], "network (class in deeptime.plots)": [[188, "deeptime.plots.Network"]], "adjacency_matrix (deeptime.plots.network property)": [[188, "deeptime.plots.Network.adjacency_matrix"]], "bounds (deeptime.plots.network property)": [[188, "deeptime.plots.Network.bounds"]], "cmap (deeptime.plots.network property)": [[188, "deeptime.plots.Network.cmap"]], "d_x (deeptime.plots.network property)": [[188, "deeptime.plots.Network.d_x"]], "d_y (deeptime.plots.network property)": [[188, "deeptime.plots.Network.d_y"]], "edge_base_scale (deeptime.plots.network property)": [[188, "deeptime.plots.Network.edge_base_scale"]], "edge_label() (deeptime.plots.network method)": [[188, "deeptime.plots.Network.edge_label"]], "edge_labels (deeptime.plots.network property)": [[188, "deeptime.plots.Network.edge_labels"]], "n_nodes (deeptime.plots.network property)": [[188, "deeptime.plots.Network.n_nodes"]], "node_sizes (deeptime.plots.network property)": [[188, "deeptime.plots.Network.node_sizes"]], "plot() (deeptime.plots.network method)": [[188, "deeptime.plots.Network.plot"]], "pos (deeptime.plots.network property)": [[188, "deeptime.plots.Network.pos"]], "state_colors (deeptime.plots.network property)": [[188, "deeptime.plots.Network.state_colors"]], "state_labels (deeptime.plots.network property)": [[188, "deeptime.plots.Network.state_labels"]], "state_sizes (deeptime.plots.network property)": [[188, "deeptime.plots.Network.state_sizes"]], "plot_adjacency() (in module deeptime.plots)": [[189, "deeptime.plots.plot_adjacency"]], "plot_ck_test() (in module deeptime.plots)": [[190, "deeptime.plots.plot_ck_test"]], "plot_contour2d_from_xyz() (in module deeptime.plots)": [[191, "deeptime.plots.plot_contour2d_from_xyz"]], "plot_density() (in module deeptime.plots)": [[192, "deeptime.plots.plot_density"]], "plot_energy2d() (in module deeptime.plots)": [[193, "deeptime.plots.plot_energy2d"]], "plot_flux() (in module deeptime.plots)": [[194, "deeptime.plots.plot_flux"]], "plot_implied_timescales() (in module deeptime.plots)": [[195, "deeptime.plots.plot_implied_timescales"]], "plot_markov_model() (in module deeptime.plots)": [[196, "deeptime.plots.plot_markov_model"]], "sindy (class in deeptime.sindy)": [[197, "deeptime.sindy.SINDy"]], "fetch_model() (deeptime.sindy.sindy method)": [[197, "deeptime.sindy.SINDy.fetch_model"]], "fit() (deeptime.sindy.sindy method)": [[197, "deeptime.sindy.SINDy.fit"]], "fit_fetch() (deeptime.sindy.sindy method)": [[197, "deeptime.sindy.SINDy.fit_fetch"]], "get_params() (deeptime.sindy.sindy method)": [[197, "deeptime.sindy.SINDy.get_params"]], "has_model (deeptime.sindy.sindy property)": [[197, "deeptime.sindy.SINDy.has_model"]], "model (deeptime.sindy.sindy property)": [[197, "deeptime.sindy.SINDy.model"]], "set_params() (deeptime.sindy.sindy method)": [[197, "deeptime.sindy.SINDy.set_params"]], "sindymodel (class in deeptime.sindy)": [[198, "deeptime.sindy.SINDyModel"]], "coefficients (deeptime.sindy.sindymodel property)": [[198, "deeptime.sindy.SINDyModel.coefficients"]], "copy() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.copy"]], "equations() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.equations"]], "get_params() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.get_params"]], "intercept (deeptime.sindy.sindymodel property)": [[198, "deeptime.sindy.SINDyModel.intercept"]], "predict() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.predict"]], "print() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.print"]], "score() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.score"]], "set_params() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.set_params"]], "simulate() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.simulate"]], "transform() (deeptime.sindy.sindymodel method)": [[198, "deeptime.sindy.SINDyModel.transform"]], "stlsq (class in deeptime.sindy)": [[199, "deeptime.sindy.STLSQ"]], "fit() (deeptime.sindy.stlsq method)": [[199, "deeptime.sindy.STLSQ.fit"]], "get_params() (deeptime.sindy.stlsq method)": [[199, "deeptime.sindy.STLSQ.get_params"]], "predict() (deeptime.sindy.stlsq method)": [[199, "deeptime.sindy.STLSQ.predict"]], "score() (deeptime.sindy.stlsq method)": [[199, "deeptime.sindy.STLSQ.score"]], "set_params() (deeptime.sindy.stlsq method)": [[199, "deeptime.sindy.STLSQ.set_params"]], "energylandscape2d (class in deeptime.util)": [[200, "deeptime.util.EnergyLandscape2d"]], "plot() (deeptime.util.energylandscape2d method)": [[200, "deeptime.util.EnergyLandscape2d.plot"]], "l (deeptime.util.quantitystatistics property)": [[201, "deeptime.util.QuantityStatistics.L"]], "quantitystatistics (class in deeptime.util)": [[201, "deeptime.util.QuantityStatistics"]], "r (deeptime.util.quantitystatistics property)": [[201, "deeptime.util.QuantityStatistics.R"]], "gather() (deeptime.util.quantitystatistics static method)": [[201, "deeptime.util.QuantityStatistics.gather"]], "mean (deeptime.util.quantitystatistics property)": [[201, "deeptime.util.QuantityStatistics.mean"]], "std (deeptime.util.quantitystatistics property)": [[201, "deeptime.util.QuantityStatistics.std"]], "progresscallback (class in deeptime.util.callbacks)": [[202, "deeptime.util.callbacks.ProgressCallback"]], "__call__() (deeptime.util.callbacks.progresscallback method)": [[202, "deeptime.util.callbacks.ProgressCallback.__call__"]], "supports_progress_interface() (in module deeptime.util.callbacks)": [[203, "deeptime.util.callbacks.supports_progress_interface"]], "confidence_interval() (in module deeptime.util)": [[204, "deeptime.util.confidence_interval"]], "concatdataset (class in deeptime.util.data)": [[205, "deeptime.util.data.ConcatDataset"]], "setflags() (deeptime.util.data.concatdataset method)": [[205, "deeptime.util.data.ConcatDataset.setflags"]], "subsets (deeptime.util.data.concatdataset property)": [[205, "deeptime.util.data.ConcatDataset.subsets"]], "timelaggedconcatdataset (class in deeptime.util.data)": [[206, "deeptime.util.data.TimeLaggedConcatDataset"]], "setflags() (deeptime.util.data.timelaggedconcatdataset method)": [[206, "deeptime.util.data.TimeLaggedConcatDataset.setflags"]], "subsets (deeptime.util.data.timelaggedconcatdataset property)": [[206, "deeptime.util.data.TimeLaggedConcatDataset.subsets"]], "timelaggeddataset (class in deeptime.util.data)": [[207, "deeptime.util.data.TimeLaggedDataset"]], "astype() (deeptime.util.data.timelaggeddataset method)": [[207, "deeptime.util.data.TimeLaggedDataset.astype"]], "data (deeptime.util.data.timelaggeddataset property)": [[207, "deeptime.util.data.TimeLaggedDataset.data"]], "data_lagged (deeptime.util.data.timelaggeddataset property)": [[207, "deeptime.util.data.TimeLaggedDataset.data_lagged"]], "setflags() (deeptime.util.data.timelaggeddataset method)": [[207, "deeptime.util.data.TimeLaggedDataset.setflags"]], "trajectoriesdataset (class in deeptime.util.data)": [[208, "deeptime.util.data.TrajectoriesDataset"]], "from_numpy() (deeptime.util.data.trajectoriesdataset static method)": [[208, "deeptime.util.data.TrajectoriesDataset.from_numpy"]], "lagtime (deeptime.util.data.trajectoriesdataset property)": [[208, "deeptime.util.data.TrajectoriesDataset.lagtime"]], "setflags() (deeptime.util.data.trajectoriesdataset method)": [[208, "deeptime.util.data.TrajectoriesDataset.setflags"]], "subsets (deeptime.util.data.trajectoriesdataset property)": [[208, "deeptime.util.data.TrajectoriesDataset.subsets"]], "trajectories (deeptime.util.data.trajectoriesdataset property)": [[208, "deeptime.util.data.TrajectoriesDataset.trajectories"]], "trajectorydataset (class in deeptime.util.data)": [[209, "deeptime.util.data.TrajectoryDataset"]], "astype() (deeptime.util.data.trajectorydataset method)": [[209, "deeptime.util.data.TrajectoryDataset.astype"]], "data (deeptime.util.data.trajectorydataset property)": [[209, "deeptime.util.data.TrajectoryDataset.data"]], "data_lagged (deeptime.util.data.trajectorydataset property)": [[209, "deeptime.util.data.TrajectoryDataset.data_lagged"]], "from_trajectories() (deeptime.util.data.trajectorydataset static method)": [[209, "deeptime.util.data.TrajectoryDataset.from_trajectories"]], "setflags() (deeptime.util.data.trajectorydataset method)": [[209, "deeptime.util.data.TrajectoryDataset.setflags"]], "sliding_window() (in module deeptime.util.data)": [[210, "deeptime.util.data.sliding_window"]], "timeshifted_split() (in module deeptime.util.data)": [[211, "deeptime.util.data.timeshifted_split"]], "cached_property (class in deeptime.util.decorators)": [[212, "deeptime.util.decorators.cached_property"]], "deleter() (deeptime.util.decorators.cached_property method)": [[212, "deeptime.util.decorators.cached_property.deleter"]], "getter() (deeptime.util.decorators.cached_property method)": [[212, "deeptime.util.decorators.cached_property.getter"]], "setter() (deeptime.util.decorators.cached_property method)": [[212, "deeptime.util.decorators.cached_property.setter"]], "deprecated_argument() (in module deeptime.util.decorators)": [[213, "deeptime.util.decorators.deprecated_argument"]], "plotting_function() (in module deeptime.util.decorators)": [[214, "deeptime.util.decorators.plotting_function"]], "finite_difference_coefficients() (in module deeptime.util.diff)": [[215, "deeptime.util.diff.finite_difference_coefficients"]], "finite_difference_operator_midpoints() (in module deeptime.util.diff)": [[216, "deeptime.util.diff.finite_difference_operator_midpoints"]], "tv_derivative() (in module deeptime.util.diff)": [[217, "deeptime.util.diff.tv_derivative"]], "energy2d() (in module deeptime.util)": [[218, "deeptime.util.energy2d"]], "handle_n_jobs() (in module deeptime.util.parallel)": [[219, "deeptime.util.parallel.handle_n_jobs"]], "handle_progress_bar() (in module deeptime.util.platform)": [[220, "deeptime.util.platform.handle_progress_bar"]], "module_available() (in module deeptime.util.platform)": [[221, "deeptime.util.platform.module_available"]], "atleast_nd() (in module deeptime.util.types)": [[222, "deeptime.util.types.atleast_nd"]], "is_timelagged_dataset() (in module deeptime.util.types)": [[223, "deeptime.util.types.is_timelagged_dataset"]], "to_dataset() (in module deeptime.util.types)": [[224, "deeptime.util.types.to_dataset"]], "chapmankolmogorovtest (class in deeptime.util.validation)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest"]], "err_est (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.err_est"]], "estimates (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.estimates"]], "estimates_samples (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.estimates_samples"]], "has_errors (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.has_errors"]], "lagtimes (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.lagtimes"]], "plot() (deeptime.util.validation.chapmankolmogorovtest method)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.plot"]], "predictions (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.predictions"]], "predictions_samples (deeptime.util.validation.chapmankolmogorovtest property)": [[225, "deeptime.util.validation.ChapmanKolmogorovTest.predictions_samples"]], "impliedtimescales (class in deeptime.util.validation)": [[226, "deeptime.util.validation.ImpliedTimescales"]], "has_samples (deeptime.util.validation.impliedtimescales property)": [[226, "deeptime.util.validation.ImpliedTimescales.has_samples"]], "lagtimes (deeptime.util.validation.impliedtimescales property)": [[226, "deeptime.util.validation.ImpliedTimescales.lagtimes"]], "max_n_processes (deeptime.util.validation.impliedtimescales property)": [[226, "deeptime.util.validation.ImpliedTimescales.max_n_processes"]], "max_n_samples (deeptime.util.validation.impliedtimescales property)": [[226, "deeptime.util.validation.ImpliedTimescales.max_n_samples"]], "n_lagtimes (deeptime.util.validation.impliedtimescales property)": [[226, "deeptime.util.validation.ImpliedTimescales.n_lagtimes"]], "n_samples() (deeptime.util.validation.impliedtimescales method)": [[226, "deeptime.util.validation.ImpliedTimescales.n_samples"]], "plot() (deeptime.util.validation.impliedtimescales method)": [[226, "deeptime.util.validation.ImpliedTimescales.plot"]], "samples_for_process() (deeptime.util.validation.impliedtimescales method)": [[226, "deeptime.util.validation.ImpliedTimescales.samples_for_process"]], "timescales_for_process() (deeptime.util.validation.impliedtimescales method)": [[226, "deeptime.util.validation.ImpliedTimescales.timescales_for_process"]], "ck_test() (in module deeptime.util.validation)": [[227, "deeptime.util.validation.ck_test"]], "implied_timescales() (in module deeptime.util.validation)": [[228, "deeptime.util.validation.implied_timescales"]], "whiteningtransform (class in deeptime.covariance)": [[229, "deeptime.covariance.WhiteningTransform"]], "__call__() (deeptime.covariance.whiteningtransform method)": [[229, "deeptime.covariance.WhiteningTransform.__call__"]], "transform() (deeptime.covariance.whiteningtransform method)": [[229, "deeptime.covariance.WhiteningTransform.transform"]], "covar() (in module deeptime.covariance)": [[230, "deeptime.covariance.covar"]], "covars() (in module deeptime.covariance)": [[231, "deeptime.covariance.covars"]], "moments_xx() (in module deeptime.covariance)": [[232, "deeptime.covariance.moments_XX"]], "moments_xxxy() (in module deeptime.covariance)": [[233, "deeptime.covariance.moments_XXXY"]], "moments_block() (in module deeptime.covariance)": [[234, "deeptime.covariance.moments_block"]], "bickleyjet (class in deeptime.data)": [[235, "deeptime.data.BickleyJet"]], "l0 (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.L0"]], "u0 (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.U0"]], "__call__() (deeptime.data.bickleyjet method)": [[235, "deeptime.data.BickleyJet.__call__"]], "apply_periodic_boundary_conditions() (deeptime.data.bickleyjet static method)": [[235, "deeptime.data.BickleyJet.apply_periodic_boundary_conditions"]], "c (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.c"]], "dimension (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.dimension"]], "eps (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.eps"]], "f (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.f"]], "generate() (deeptime.data.bickleyjet method)": [[235, "deeptime.data.BickleyJet.generate"]], "h (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.h"]], "has_potential_function (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.has_potential_function"]], "integrator (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.integrator"]], "k (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.k"]], "n_steps (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.n_steps"]], "periodic_bc (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.periodic_bc"]], "potential() (deeptime.data.bickleyjet method)": [[235, "deeptime.data.BickleyJet.potential"]], "r0 (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.r0"]], "time_dependent (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.time_dependent"]], "to_3d() (deeptime.data.bickleyjet static method)": [[235, "deeptime.data.BickleyJet.to_3d"]], "trajectory() (deeptime.data.bickleyjet method)": [[235, "deeptime.data.BickleyJet.trajectory"]], "vectorized_f (deeptime.data.bickleyjet property)": [[235, "deeptime.data.BickleyJet.vectorized_f"]], "birthdeathchain (class in deeptime.data)": [[236, "deeptime.data.BirthDeathChain"]], "committor_backward() (deeptime.data.birthdeathchain method)": [[236, "deeptime.data.BirthDeathChain.committor_backward"]], "committor_forward() (deeptime.data.birthdeathchain method)": [[236, "deeptime.data.BirthDeathChain.committor_forward"]], "flux() (deeptime.data.birthdeathchain method)": [[236, "deeptime.data.BirthDeathChain.flux"]], "msm (deeptime.data.birthdeathchain property)": [[236, "deeptime.data.BirthDeathChain.msm"]], "netflux() (deeptime.data.birthdeathchain method)": [[236, "deeptime.data.BirthDeathChain.netflux"]], "rate() (deeptime.data.birthdeathchain method)": [[236, "deeptime.data.BirthDeathChain.rate"]], "stationary_distribution (deeptime.data.birthdeathchain property)": [[236, "deeptime.data.BirthDeathChain.stationary_distribution"]], "totalflux() (deeptime.data.birthdeathchain method)": [[236, "deeptime.data.BirthDeathChain.totalflux"]], "transition_matrix (deeptime.data.birthdeathchain property)": [[236, "deeptime.data.BirthDeathChain.transition_matrix"]], "customsystem (class in deeptime.data)": [[237, "deeptime.data.CustomSystem"]], "__call__() (deeptime.data.customsystem method)": [[237, "deeptime.data.CustomSystem.__call__"]], "dimension (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.dimension"]], "f (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.f"]], "h (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.h"]], "has_potential_function (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.has_potential_function"]], "integrator (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.integrator"]], "n_steps (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.n_steps"]], "potential() (deeptime.data.customsystem method)": [[237, "deeptime.data.CustomSystem.potential"]], "time_dependent (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.time_dependent"]], "trajectory() (deeptime.data.customsystem method)": [[237, "deeptime.data.CustomSystem.trajectory"]], "vectorized_f (deeptime.data.customsystem property)": [[237, "deeptime.data.CustomSystem.vectorized_f"]], "doublewelldiscrete (class in deeptime.data)": [[238, "deeptime.data.DoubleWellDiscrete"]], "analytic_msm (deeptime.data.doublewelldiscrete property)": [[238, "deeptime.data.DoubleWellDiscrete.analytic_msm"]], "dtraj (deeptime.data.doublewelldiscrete property)": [[238, "deeptime.data.DoubleWellDiscrete.dtraj"]], "dtraj_n() (deeptime.data.doublewelldiscrete method)": [[238, "deeptime.data.DoubleWellDiscrete.dtraj_n"]], "dtraj_n2() (deeptime.data.doublewelldiscrete method)": [[238, "deeptime.data.DoubleWellDiscrete.dtraj_n2"]], "dtraj_n2bad (deeptime.data.doublewelldiscrete property)": [[238, "deeptime.data.DoubleWellDiscrete.dtraj_n2bad"]], "dtraj_n2good (deeptime.data.doublewelldiscrete property)": [[238, "deeptime.data.DoubleWellDiscrete.dtraj_n2good"]], "dtraj_n6good (deeptime.data.doublewelldiscrete property)": [[238, "deeptime.data.DoubleWellDiscrete.dtraj_n6good"]], "simulate_trajectories() (deeptime.data.doublewelldiscrete method)": [[238, "deeptime.data.DoubleWellDiscrete.simulate_trajectories"]], "simulate_trajectory() (deeptime.data.doublewelldiscrete method)": [[238, "deeptime.data.DoubleWellDiscrete.simulate_trajectory"]], "transition_matrix (deeptime.data.doublewelldiscrete property)": [[238, "deeptime.data.DoubleWellDiscrete.transition_matrix"]], "drunkardswalk (class in deeptime.data)": [[239, "deeptime.data.DrunkardsWalk"]], "add_barrier() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.add_barrier"]], "coordinate_to_state() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.coordinate_to_state"]], "is_valid_coordinate() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.is_valid_coordinate"]], "msm (deeptime.data.drunkardswalk property)": [[239, "deeptime.data.DrunkardsWalk.msm"]], "plot_2d_map() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.plot_2d_map"]], "plot_network() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.plot_network"]], "plot_path() (deeptime.data.drunkardswalk static method)": [[239, "deeptime.data.DrunkardsWalk.plot_path"]], "state_to_coordinate() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.state_to_coordinate"]], "walk() (deeptime.data.drunkardswalk method)": [[239, "deeptime.data.DrunkardsWalk.walk"]], "ellipsoids (class in deeptime.data)": [[240, "deeptime.data.Ellipsoids"]], "covariance_matrix (deeptime.data.ellipsoids property)": [[240, "deeptime.data.Ellipsoids.covariance_matrix"]], "discrete_trajectory() (deeptime.data.ellipsoids method)": [[240, "deeptime.data.Ellipsoids.discrete_trajectory"]], "map_discrete_to_observations() (deeptime.data.ellipsoids method)": [[240, "deeptime.data.Ellipsoids.map_discrete_to_observations"]], "msm (deeptime.data.ellipsoids property)": [[240, "deeptime.data.Ellipsoids.msm"]], "observations() (deeptime.data.ellipsoids method)": [[240, "deeptime.data.Ellipsoids.observations"]], "random_state (deeptime.data.ellipsoids property)": [[240, "deeptime.data.Ellipsoids.random_state"]], "seed (deeptime.data.ellipsoids property)": [[240, "deeptime.data.Ellipsoids.seed"]], "pbfsimulator (class in deeptime.data)": [[241, "deeptime.data.PBFSimulator"]], "domain_size (deeptime.data.pbfsimulator property)": [[241, "deeptime.data.PBFSimulator.domain_size"]], "make_animation() (deeptime.data.pbfsimulator method)": [[241, "deeptime.data.PBFSimulator.make_animation"]], "n_particles (deeptime.data.pbfsimulator property)": [[241, "deeptime.data.PBFSimulator.n_particles"]], "run() (deeptime.data.pbfsimulator method)": [[241, "deeptime.data.PBFSimulator.run"]], "simulate_oscillatory_force() (deeptime.data.pbfsimulator method)": [[241, "deeptime.data.PBFSimulator.simulate_oscillatory_force"]], "transform_to_density() (deeptime.data.pbfsimulator method)": [[241, "deeptime.data.PBFSimulator.transform_to_density"]], "timedependentsystem (class in deeptime.data)": [[242, "deeptime.data.TimeDependentSystem"]], "__call__() (deeptime.data.timedependentsystem method)": [[242, "deeptime.data.TimeDependentSystem.__call__"]], "dimension (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.dimension"]], "f (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.f"]], "h (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.h"]], "has_potential_function (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.has_potential_function"]], "integrator (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.integrator"]], "n_steps (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.n_steps"]], "potential() (deeptime.data.timedependentsystem method)": [[242, "deeptime.data.TimeDependentSystem.potential"]], "time_dependent (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.time_dependent"]], "trajectory() (deeptime.data.timedependentsystem method)": [[242, "deeptime.data.TimeDependentSystem.trajectory"]], "vectorized_f (deeptime.data.timedependentsystem property)": [[242, "deeptime.data.TimeDependentSystem.vectorized_f"]], "timeindependentsystem (class in deeptime.data)": [[243, "deeptime.data.TimeIndependentSystem"]], "__call__() (deeptime.data.timeindependentsystem method)": [[243, "deeptime.data.TimeIndependentSystem.__call__"]], "dimension (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.dimension"]], "f (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.f"]], "h (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.h"]], "has_potential_function (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.has_potential_function"]], "integrator (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.integrator"]], "n_steps (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.n_steps"]], "potential() (deeptime.data.timeindependentsystem method)": [[243, "deeptime.data.TimeIndependentSystem.potential"]], "time_dependent (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.time_dependent"]], "trajectory() (deeptime.data.timeindependentsystem method)": [[243, "deeptime.data.TimeIndependentSystem.trajectory"]], "vectorized_f (deeptime.data.timeindependentsystem property)": [[243, "deeptime.data.TimeIndependentSystem.vectorized_f"]], "deeptime.basis": [[245, "module-deeptime.basis"]], "module": [[245, "module-deeptime.basis"], [246, "module-deeptime.clustering"], [247, "module-deeptime.covariance"], [248, "module-deeptime.data"], [249, "module-deeptime.decomposition"], [250, "module-deeptime.kernels"], [253, "module-deeptime.markov.tools.analysis"], [253, "module-deeptime.markov.tools.estimation"], [253, "module-deeptime.markov.tools.flux"], [254, "module-deeptime.numeric"], [255, "module-deeptime.plots"], [256, "module-deeptime.sindy"], [257, "module-deeptime.util"]], "deeptime.clustering": [[246, "module-deeptime.clustering"]], "deeptime.covariance": [[247, "module-deeptime.covariance"]], "deeptime.data": [[248, "module-deeptime.data"]], "deeptime.decomposition": [[249, "module-deeptime.decomposition"]], "deeptime.kernels": [[250, "module-deeptime.kernels"]], "deeptime.markov.tools.analysis": [[253, "module-deeptime.markov.tools.analysis"]], "deeptime.markov.tools.estimation": [[253, "module-deeptime.markov.tools.estimation"]], "deeptime.markov.tools.flux": [[253, "module-deeptime.markov.tools.flux"]], "deeptime.numeric": [[254, "module-deeptime.numeric"]], "deeptime.plots": [[255, "module-deeptime.plots"]], "deeptime.sindy": [[256, "module-deeptime.sindy"]], "deeptime.util": [[257, "module-deeptime.util"]]}})