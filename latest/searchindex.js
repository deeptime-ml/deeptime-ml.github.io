Search.setIndex({"alltitles": {"2D contours from xyz": [[320, null]], "2D densities from xy": [[321, null]], "A more detailed look on the estimator": [[287, "A-more-detailed-look-on-the-estimator"]], "API docs": [[259, null]], "Adding a new metric": [[247, "adding-a-new-metric"]], "Adding transformer capabilities": [[263, "adding-transformer-capabilities"]], "Analysis tools": [[252, "analysis-tools"]], "Application to a double well": [[285, "Application-to-a-double-well"]], "Approximation problem": [[281, "Approximation-problem"]], "Arnold-Beltrami-Childress flow": [[290, null]], "Asymmetric Quadruple-well": [[311, null]], "Autoencoders": [[282, "Autoencoders"]], "Bayesian sampling": [[276, "Bayesian-sampling"], [279, "Bayesian-sampling"]], "Bickley Jet": [[291, null]], "Birth-death chain model": [[304, null]], "Bootstrap": [[254, "bootstrap"]], "Box discretization": [[269, "Box-discretization"]], "Chapman-Kolmogorov test": [[318, null]], "Clustering": [[269, null]], "Clustering methods comparison": [[319, null]], "Coarse-graining of fluxes": [[284, "Coarse-graining-of-fluxes"]], "Coarse-graining with PCCA+": [[280, null]], "Coherent set comparison on Bickley jet": [[273, null]], "Coherent sets: Kernel CCA on the Bickley jet": [[324, null]], "Committors and PCCA": [[254, "committors-and-pcca"]], "Comparison of scores": [[273, "Comparison-of-scores"]], "Comparison vs. PCA": [[283, "Comparison-vs.-PCA"]], "Computation times": [[295, null], [302, null], [316, null], [334, null], [335, null]], "Connectivity": [[254, "connectivity"]], "Countmatrix": [[254, "countmatrix"]], "Custom ODEs": [[292, null]], "Custom SDEs": [[305, null]], "Custom systems": [[249, "custom-systems"]], "DMD": [[270, null]], "Data utilities": [[258, "data-utilities"]], "Datasets": [[261, null]], "Decomposition": [[254, "decomposition"]], "Deep dim reduction": [[262, null]], "Deep estimators": [[250, "deep-estimators"]], "Deeptime SINDy objects": [[281, "Deeptime-SINDy-objects"]], "Defining a custom metric (advanced)": [[269, "Defining-a-custom-metric-(advanced)"]], "Depending on PyTorch": [[263, "depending-on-pytorch"]], "Deterministic datasets": [[249, "deterministic-datasets"]], "Differentiation utilities": [[258, "differentiation-utilities"]], "Dimension reduction": [[264, null]], "Dimension reduction of double-wedge dataset": [[275, null]], "Documenting the code": [[263, "documenting-the-code"]], "Double-well 2D": [[306, null]], "Double-well discrete": [[307, null]], "Drunkard\u2019s walk": [[297, null]], "EDMD": [[271, null], [275, "EDMD"]], "Eigenvector scaling": [[283, "Eigenvector-scaling"]], "Ellipsoids dataset": [[298, null]], "Energy surface": [[322, null]], "Estimation": [[254, "estimation"], [276, "Estimation"]], "Estimators": [[247, "estimators"], [248, "estimators"], [250, "estimators"], [252, "estimators"], [253, "estimators"], [257, "estimators"]], "Example": [[281, "Example"]], "Example from trajectories": [[284, "Example-from-trajectories"]], "Example with position based fluids": [[287, "Example-with-position-based-fluids"]], "Examples": [[265, null]], "Expected counts": [[254, "expected-counts"]], "Fingerprints": [[254, "fingerprints"]], "For developers": [[263, null]], "Functions": [[247, "functions"]], "General examples": [[265, "general-examples"], [317, null]], "General numerical tools": [[255, "general-numerical-tools"]], "Gross and net flux on the Drunkard\u2019s walk": [[329, null]], "Hidden Markov Models": [[276, null]], "Implementations": [[249, "implementations"]], "Implied timescales": [[323, null]], "Imprint": [[260, null]], "Initial guess": [[253, "initial-guess"]], "Introduction": [[285, "Introduction"]], "K-means": [[269, "K-means"]], "KVAD": [[273, "KVAD"]], "KVADNets": [[273, "KVADNets"]], "Kernel CCA": [[273, "Kernel-CCA"], [275, "Kernel-CCA"]], "Kernel CCA on the sqrt-Model to transform data": [[325, null]], "Kernel EDMD": [[275, "Kernel-EDMD"], [278, null]], "Kernel VAMP / kernel CCA": [[277, null]], "Koopman reweighting": [[283, "Koopman-reweighting"]], "Lorenz system": [[293, null]], "MSM analysis": [[254, "msm-analysis"]], "MSM estimation": [[254, "msm-estimation"]], "MSM on Prinz potential": [[274, null]], "Main ideas": [[281, "Main-ideas"]], "Markov state models": [[266, null], [275, "Markov-state-models"]], "Maximum-likelihood MSMs": [[279, null]], "Metropolis chain in 1D energy landscape": [[313, null]], "Mini-batch k-means": [[269, "Mini-batch-k-means"]], "Model validation utils": [[258, "model-validation-utils"]], "Models": [[247, "models"], [248, "models"], [250, "models"], [252, "models"], [253, "models"], [257, "models"]], "Network plots": [[326, null]], "Notebook examples": [[267, null]], "Numerical tools for eigenvalue problems": [[255, "numerical-tools-for-eigenvalue-problems"]], "ODEs": [[261, "odes"], [289, null]], "One-dimensional Ornstein-Uhlenbeck process": [[308, null]], "One-dimensional Prinz potential": [[309, null]], "Other": [[259, null], [261, "other"], [296, null]], "Other utilities": [[258, "other-utilities"]], "Output models": [[253, "output-models"]], "PCCA+ on the Drunkard\u2019s walk": [[327, null]], "Passage times": [[254, "passage-times"]], "Pathway decomposition": [[254, "pathway-decomposition"], [284, "Pathway-decomposition"]], "Position-based fluids": [[299, null]], "Priors": [[254, "priors"]], "Quadruple-well": [[310, null]], "Reaction rates and fluxes": [[254, "reaction-rates-and-fluxes"]], "Reactive flux": [[254, "reactive-flux"]], "Reactive probability flux": [[284, "Reactive-probability-flux"]], "Recovering the PMF": [[285, "Recovering-the-PMF"]], "Regular space clustering": [[269, "Regular-space-clustering"]], "SDEs": [[261, "sdes"], [303, null]], "SINDy": [[281, null]], "SINDy: Identification of the R\u00f6ssler system": [[328, null]], "Sampling": [[254, "sampling"]], "Scoring": [[287, "Scoring"]], "Selecting a submodel": [[286, "Selecting-a-submodel"]], "Sensitivity analysis": [[254, "sensitivity-analysis"]], "Short API demonstration": [[287, "Short-API-demonstration"]], "Singular vector scaling": [[287, "Singular-vector-scaling"]], "Software License": [[268, null]], "Solvers": [[257, "solvers"]], "Special MSM estimators and models": [[252, "special-msm-estimators-and-models"]], "Sqrt model": [[300, null]], "Statistics utilities": [[258, "statistics-utilities"]], "Stochastic datasets": [[249, "stochastic-datasets"]], "Swissroll model": [[301, null]], "TICA": [[275, "TICA"], [283, null]], "TRAM": [[285, null]], "TRAM on a 1D double well": [[330, null]], "TV Derivative": [[331, null]], "Table Of Contents": [[259, null]], "Testing your code": [[263, "testing-your-code"]], "The committor": [[284, "The-committor"]], "Third party notices": [[268, "third-party-notices"]], "Thomas attractor": [[294, null]], "Time-dependent quintuple well": [[312, null]], "Time-lagged autoencoders": [[282, null]], "Transition counting": [[252, "transition-counting"], [286, null]], "Transition path theory": [[284, null]], "Transition path theory tools": [[254, "transition-path-theory-tools"]], "Triple-well 1D": [[314, null]], "Triple-well 2D": [[315, null]], "Type utilities": [[258, "type-utilities"]], "Utilities": [[248, "utilities"]], "Utilities and alternatives": [[252, "utilities-and-alternatives"]], "Utils": [[250, "utils"]], "VAMP": [[273, "VAMP"]], "VAMP / time-lagged CCA": [[287, null]], "VAMP on Position Based Fluids": [[332, null]], "VAMP vs. TICA vs. PCA": [[333, null]], "VAMP with backtransform": [[275, "VAMP-with-backtransform"]], "VAMPNets": [[273, "VAMPNets"], [275, "VAMPNets"], [288, null]], "VAMPNets on Alanine Dipeptide": [[272, null]], "Validation": [[254, "validation"]], "Variational autoencoders": [[282, "Variational-autoencoders"]], "Writing a custom estimator": [[263, "writing-a-custom-estimator"]], "class AugmentedMSM": [[102, null]], "class AugmentedMSMEstimator": [[103, null]], "class BayesianHMM": [[91, null]], "class BayesianHMMPosterior": [[92, null]], "class BayesianMSM": [[104, null]], "class BayesianMSMPosterior": [[105, null]], "class BickleyJet": [[236, null]], "class BirthDeathChain": [[237, null]], "class BoxDiscretization": [[8, null]], "class BoxDiscretizationModel": [[9, null]], "class ChapmanKolmogorovTest": [[226, null]], "class ClusterModel": [[10, null]], "class ConcatDataset": [[206, null]], "class Concatenation": [[4, null]], "class Covariance": [[18, null]], "class CovarianceKoopmanModel": [[44, null]], "class CovarianceModel": [[19, null]], "class CustomSystem": [[238, null]], "class DMD": [[45, null]], "class DMDModel": [[46, null]], "class Dataset": [[0, null]], "class DiscreteOutputModel": [[93, null]], "class DoubleWellDiscrete": [[239, null]], "class DrunkardsWalk": [[240, null]], "class EDMD": [[47, null]], "class EDMDModel": [[48, null]], "class Ellipsoids": [[241, null]], "class Energy2dPlot": [[188, null]], "class EnergyLandscape2d": [[201, null]], "class Estimator": [[1, null]], "class GaussianKernel": [[76, null]], "class GaussianOutputModel": [[94, null]], "class GeneralizedGaussianKernel": [[77, null]], "class HiddenMarkovModel": [[95, null]], "class Identity": [[5, null]], "class ImpliedTimescales": [[227, null]], "class KMeans": [[11, null]], "class KMeansModel": [[12, null]], "class KVAD": [[49, null]], "class KVADModel": [[50, null]], "class Kernel": [[78, null]], "class KernelCCA": [[51, null]], "class KernelCCAModel": [[52, null]], "class KernelEDMD": [[53, null]], "class KernelEDMDModel": [[54, null]], "class KoopmanReweightedMSM": [[106, null]], "class KoopmanWeightingEstimator": [[20, null]], "class KoopmanWeightingModel": [[21, null]], "class LaplacianKernel": [[79, null]], "class MarkovStateModel": [[107, null]], "class MarkovStateModelCollection": [[108, null]], "class MaximumLikelihoodHMM": [[96, null]], "class MaximumLikelihoodMSM": [[109, null]], "class MetricRegistry": [[13, null]], "class MiniBatchKMeans": [[14, null]], "class Model": [[2, null]], "class Monomials": [[6, null]], "class Network": [[189, null]], "class OOMReweightedMSM": [[110, null]], "class Observable": [[7, null]], "class OutputModel": [[97, null]], "class PBFSimulator": [[242, null]], "class PCCAModel": [[83, null]], "class PolynomialKernel": [[80, null]], "class ProgressCallback": [[203, null]], "class QuantityStatistics": [[202, null]], "class ReactiveFlux": [[84, null]], "class RegularSpace": [[15, null]], "class SINDy": [[198, null]], "class SINDyModel": [[199, null]], "class STLSQ": [[200, null]], "class TAE": [[60, null]], "class TAEModel": [[61, null]], "class TICA": [[55, null]], "class TRAM": [[111, null]], "class TRAMDataset": [[112, null]], "class TRAMModel": [[113, null]], "class TVAE": [[62, null]], "class TVAEEncoder": [[63, null]], "class TVAEModel": [[64, null]], "class TimeDependentSystem": [[243, null]], "class TimeIndependentSystem": [[244, null]], "class TimeLaggedConcatDataset": [[207, null]], "class TimeLaggedDataset": [[208, null]], "class TorchGaussianKernel": [[81, null]], "class TrajectoriesDataset": [[209, null]], "class TrajectoryDataset": [[210, null]], "class TransferOperatorModel": [[56, null]], "class Transformer": [[3, null]], "class TransitionCountEstimator": [[85, null]], "class TransitionCountModel": [[86, null]], "class VAMP": [[57, null]], "class VAMPNet": [[65, null]], "class VAMPNetModel": [[66, null]], "class WhiteningTransform": [[230, null]], "class cached_property": [[213, null]], "data metrics": [[17, null]], "deeptime.base": [[245, null]], "deeptime.basis": [[246, null]], "deeptime.clustering": [[247, null]], "deeptime.covariance": [[248, null]], "deeptime.data": [[249, null]], "deeptime.decomposition": [[250, null]], "deeptime.kernels": [[251, null]], "deeptime.markov": [[252, null]], "deeptime.markov.hmm": [[253, null]], "deeptime.markov.tools": [[254, null]], "deeptime.markov.tools.analysis.committor": [[121, null]], "deeptime.markov.tools.analysis.committor_sensitivity": [[122, null]], "deeptime.markov.tools.analysis.correlation": [[123, null]], "deeptime.markov.tools.analysis.eigenvalue_sensitivity": [[124, null]], "deeptime.markov.tools.analysis.eigenvector_sensitivity": [[126, null]], "deeptime.markov.tools.analysis.expectation": [[128, null]], "deeptime.markov.tools.analysis.expectation_sensitivity": [[129, null]], "deeptime.markov.tools.analysis.expected_counts": [[130, null]], "deeptime.markov.tools.analysis.expected_counts_stationary": [[131, null]], "deeptime.markov.tools.analysis.fingerprint_correlation": [[132, null]], "deeptime.markov.tools.analysis.fingerprint_relaxation": [[133, null]], "deeptime.markov.tools.analysis.hitting_probability": [[134, null]], "deeptime.markov.tools.analysis.mfpt": [[139, null]], "deeptime.markov.tools.analysis.mfpt_sensitivity": [[140, null]], "deeptime.markov.tools.analysis.pcca_memberships": [[141, null]], "deeptime.markov.tools.analysis.relaxation": [[143, null]], "deeptime.markov.tools.analysis.stationary_distribution_sensitivity": [[145, null]], "deeptime.markov.tools.analysis.timescale_sensitivity": [[146, null]], "deeptime.markov.tools.estimation.bootstrap_counts": [[148, null]], "deeptime.markov.tools.estimation.bootstrap_trajectories": [[149, null]], "deeptime.markov.tools.estimation.connected_sets": [[150, null]], "deeptime.markov.tools.estimation.count_matrix": [[151, null]], "deeptime.markov.tools.estimation.error_perturbation": [[152, null]], "deeptime.markov.tools.estimation.girsanov_reweighted_count_matrix": [[153, null]], "deeptime.markov.tools.estimation.is_connected": [[154, null]], "deeptime.markov.tools.estimation.largest_connected_set": [[155, null]], "deeptime.markov.tools.estimation.largest_connected_submatrix": [[156, null]], "deeptime.markov.tools.estimation.log_likelihood": [[157, null]], "deeptime.markov.tools.estimation.prior_const": [[158, null]], "deeptime.markov.tools.estimation.prior_neighbor": [[159, null]], "deeptime.markov.tools.estimation.prior_rev": [[160, null]], "deeptime.markov.tools.estimation.rate_matrix": [[161, null]], "deeptime.markov.tools.estimation.tmatrix_cov": [[162, null]], "deeptime.markov.tools.estimation.tmatrix_sampler": [[163, null]], "deeptime.markov.tools.estimation.transition_matrix": [[164, null]], "deeptime.markov.tools.flux.coarsegrain": [[165, null]], "deeptime.markov.tools.flux.flux_consumers": [[166, null]], "deeptime.markov.tools.flux.flux_matrix": [[167, null]], "deeptime.markov.tools.flux.flux_producers": [[168, null]], "deeptime.markov.tools.flux.flux_production": [[169, null]], "deeptime.markov.tools.flux.mfpt": [[170, null]], "deeptime.markov.tools.flux.pathways": [[171, null]], "deeptime.markov.tools.flux.rate": [[172, null]], "deeptime.markov.tools.flux.to_netflux": [[173, null]], "deeptime.markov.tools.flux.total_flux": [[174, null]], "deeptime.numeric": [[255, null]], "deeptime.plots": [[256, null]], "deeptime.sindy": [[257, null]], "deeptime.util": [[258, null]], "exception ZeroRankError": [[175, null]], "function abc_flow": [[22, null]], "function atleast_nd": [[223, null]], "function bickley_jet": [[23, null]], "function birth_death_chain": [[24, null]], "function blocksplit_trajs": [[58, null]], "function ck_test": [[228, null]], "function compute_connected_sets": [[87, null]], "function compute_dtrajs_effective": [[88, null]], "function compute_effective_stride": [[89, null]], "function compute_index_states": [[117, null]], "function confidence_interval": [[205, null]], "function count_states": [[90, null]], "function covar": [[231, null]], "function covariances": [[67, null]], "function covars": [[232, null]], "function custom_ode": [[25, null]], "function custom_sde": [[26, null]], "function cvsplit_trajs": [[59, null]], "function deprecated_argument": [[214, null]], "function double_well_2d": [[27, null]], "function double_well_discrete": [[28, null]], "function drop_nan_rows": [[176, null]], "function drunkards_walk": [[29, null]], "function eig_corr": [[177, null]], "function eigenvalues": [[125, null]], "function eigenvectors": [[127, null]], "function eigs": [[178, null]], "function ellipsoids": [[30, null]], "function energy2d": [[219, null]], "function finite_difference_coefficients": [[216, null]], "function finite_difference_operator_midpoints": [[217, null]], "function from_data": [[101, null]], "function handle_n_jobs": [[220, null]], "function handle_progress_bar": [[221, null]], "function implied_timescales": [[229, null]], "function indices_by_distribution": [[118, null]], "function indices_by_sequence": [[119, null]], "function indices_by_state": [[120, null]], "function is_connected": [[135, null]], "function is_diagonal_matrix": [[179, null]], "function is_rate_matrix": [[136, null]], "function is_reversible": [[137, null]], "function is_square_matrix": [[180, null]], "function is_timelagged_dataset": [[224, null]], "function is_torch_kernel": [[82, null]], "function is_transition_matrix": [[138, null]], "function kmeans_plusplus": [[16, null]], "function koopman_matrix": [[68, null]], "function kvad_score": [[69, null]], "function lorenz_system": [[31, null]], "function metastable_from_data": [[98, null]], "function metastable_from_msm": [[99, null]], "function module_available": [[222, null]], "function moments_XX": [[233, null]], "function moments_XXXY": [[234, null]], "function moments_block": [[235, null]], "function number_of_states": [[114, null]], "function ornstein_uhlenbeck": [[32, null]], "function pcca": [[115, null]], "function plot_adjacency": [[190, null]], "function plot_ck_test": [[191, null]], "function plot_contour2d_from_xyz": [[192, null]], "function plot_density": [[193, null]], "function plot_energy2d": [[194, null]], "function plot_flux": [[195, null]], "function plot_implied_timescales": [[196, null]], "function plot_markov_model": [[197, null]], "function plotting_function": [[215, null]], "function position_based_fluids": [[33, null]], "function prinz_potential": [[34, null]], "function quadruple_well": [[35, null]], "function quadruple_well_asymmetric": [[36, null]], "function random_guess": [[100, null]], "function rdl_decomposition": [[142, null]], "function reactive_flux": [[116, null]], "function schatten_norm": [[181, null]], "function sliding_window": [[211, null]], "function sort_eigs": [[182, null]], "function spd_eig": [[183, null]], "function spd_inv": [[184, null]], "function spd_inv_split": [[185, null]], "function spd_inv_sqrt": [[186, null]], "function spd_truncated_svd": [[187, null]], "function sqrt_model": [[37, null]], "function stationary_distribution": [[144, null]], "function supports_progress_interface": [[204, null]], "function swissroll_model": [[38, null]], "function sym_inverse": [[70, null]], "function thomas_attractor": [[39, null]], "function time_dependent_quintuple_well": [[40, null]], "function timescales": [[147, null]], "function timeshifted_split": [[212, null]], "function tmatrix_metropolis1d": [[41, null]], "function to_dataset": [[225, null]], "function triple_well_1d": [[42, null]], "function triple_well_2d": [[43, null]], "function tv_derivative": [[218, null]], "function vamp_score": [[71, null], [73, null]], "function vamp_score_cv": [[74, null]], "function vamp_score_data": [[75, null]], "function vampnet_loss": [[72, null]], "k-means++ initialization": [[269, "k-means++-initialization"]], "uniform initialization": [[269, "uniform-initialization"]]}, "docnames": ["api/generated/deeptime.base.Dataset", "api/generated/deeptime.base.Estimator", "api/generated/deeptime.base.Model", "api/generated/deeptime.base.Transformer", "api/generated/deeptime.basis.Concatenation", "api/generated/deeptime.basis.Identity", "api/generated/deeptime.basis.Monomials", "api/generated/deeptime.basis.Observable", "api/generated/deeptime.clustering.BoxDiscretization", "api/generated/deeptime.clustering.BoxDiscretizationModel", "api/generated/deeptime.clustering.ClusterModel", "api/generated/deeptime.clustering.KMeans", "api/generated/deeptime.clustering.KMeansModel", "api/generated/deeptime.clustering.MetricRegistry", "api/generated/deeptime.clustering.MiniBatchKMeans", "api/generated/deeptime.clustering.RegularSpace", "api/generated/deeptime.clustering.kmeans_plusplus", "api/generated/deeptime.clustering.metrics", "api/generated/deeptime.covariance.Covariance", "api/generated/deeptime.covariance.CovarianceModel", "api/generated/deeptime.covariance.KoopmanWeightingEstimator", "api/generated/deeptime.covariance.KoopmanWeightingModel", "api/generated/deeptime.data.abc_flow", "api/generated/deeptime.data.bickley_jet", "api/generated/deeptime.data.birth_death_chain", "api/generated/deeptime.data.custom_ode", "api/generated/deeptime.data.custom_sde", "api/generated/deeptime.data.double_well_2d", "api/generated/deeptime.data.double_well_discrete", "api/generated/deeptime.data.drunkards_walk", "api/generated/deeptime.data.ellipsoids", "api/generated/deeptime.data.lorenz_system", "api/generated/deeptime.data.ornstein_uhlenbeck", "api/generated/deeptime.data.position_based_fluids", "api/generated/deeptime.data.prinz_potential", "api/generated/deeptime.data.quadruple_well", "api/generated/deeptime.data.quadruple_well_asymmetric", "api/generated/deeptime.data.sqrt_model", "api/generated/deeptime.data.swissroll_model", "api/generated/deeptime.data.thomas_attractor", "api/generated/deeptime.data.time_dependent_quintuple_well", "api/generated/deeptime.data.tmatrix_metropolis1d", "api/generated/deeptime.data.triple_well_1d", "api/generated/deeptime.data.triple_well_2d", "api/generated/deeptime.decomposition.CovarianceKoopmanModel", "api/generated/deeptime.decomposition.DMD", "api/generated/deeptime.decomposition.DMDModel", "api/generated/deeptime.decomposition.EDMD", "api/generated/deeptime.decomposition.EDMDModel", "api/generated/deeptime.decomposition.KVAD", "api/generated/deeptime.decomposition.KVADModel", "api/generated/deeptime.decomposition.KernelCCA", "api/generated/deeptime.decomposition.KernelCCAModel", "api/generated/deeptime.decomposition.KernelEDMD", "api/generated/deeptime.decomposition.KernelEDMDModel", "api/generated/deeptime.decomposition.TICA", "api/generated/deeptime.decomposition.TransferOperatorModel", "api/generated/deeptime.decomposition.VAMP", "api/generated/deeptime.decomposition.blocksplit_trajs", "api/generated/deeptime.decomposition.cvsplit_trajs", "api/generated/deeptime.decomposition.deep.TAE", "api/generated/deeptime.decomposition.deep.TAEModel", "api/generated/deeptime.decomposition.deep.TVAE", "api/generated/deeptime.decomposition.deep.TVAEEncoder", "api/generated/deeptime.decomposition.deep.TVAEModel", "api/generated/deeptime.decomposition.deep.VAMPNet", "api/generated/deeptime.decomposition.deep.VAMPNetModel", "api/generated/deeptime.decomposition.deep.covariances", "api/generated/deeptime.decomposition.deep.koopman_matrix", "api/generated/deeptime.decomposition.deep.kvad_score", "api/generated/deeptime.decomposition.deep.sym_inverse", "api/generated/deeptime.decomposition.deep.vamp_score", "api/generated/deeptime.decomposition.deep.vampnet_loss", "api/generated/deeptime.decomposition.vamp_score", "api/generated/deeptime.decomposition.vamp_score_cv", "api/generated/deeptime.decomposition.vamp_score_data", "api/generated/deeptime.kernels.GaussianKernel", "api/generated/deeptime.kernels.GeneralizedGaussianKernel", "api/generated/deeptime.kernels.Kernel", "api/generated/deeptime.kernels.LaplacianKernel", "api/generated/deeptime.kernels.PolynomialKernel", "api/generated/deeptime.kernels.TorchGaussianKernel", "api/generated/deeptime.kernels.is_torch_kernel", "api/generated/deeptime.markov.PCCAModel", "api/generated/deeptime.markov.ReactiveFlux", "api/generated/deeptime.markov.TransitionCountEstimator", "api/generated/deeptime.markov.TransitionCountModel", "api/generated/deeptime.markov.compute_connected_sets", "api/generated/deeptime.markov.compute_dtrajs_effective", "api/generated/deeptime.markov.compute_effective_stride", "api/generated/deeptime.markov.count_states", "api/generated/deeptime.markov.hmm.BayesianHMM", "api/generated/deeptime.markov.hmm.BayesianHMMPosterior", "api/generated/deeptime.markov.hmm.DiscreteOutputModel", "api/generated/deeptime.markov.hmm.GaussianOutputModel", "api/generated/deeptime.markov.hmm.HiddenMarkovModel", "api/generated/deeptime.markov.hmm.MaximumLikelihoodHMM", "api/generated/deeptime.markov.hmm.OutputModel", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_data", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_msm", "api/generated/deeptime.markov.hmm.init.discrete.random_guess", "api/generated/deeptime.markov.hmm.init.gaussian.from_data", "api/generated/deeptime.markov.msm.AugmentedMSM", "api/generated/deeptime.markov.msm.AugmentedMSMEstimator", "api/generated/deeptime.markov.msm.BayesianMSM", "api/generated/deeptime.markov.msm.BayesianMSMPosterior", "api/generated/deeptime.markov.msm.KoopmanReweightedMSM", "api/generated/deeptime.markov.msm.MarkovStateModel", "api/generated/deeptime.markov.msm.MarkovStateModelCollection", "api/generated/deeptime.markov.msm.MaximumLikelihoodMSM", "api/generated/deeptime.markov.msm.OOMReweightedMSM", "api/generated/deeptime.markov.msm.TRAM", "api/generated/deeptime.markov.msm.TRAMDataset", "api/generated/deeptime.markov.msm.TRAMModel", "api/generated/deeptime.markov.number_of_states", "api/generated/deeptime.markov.pcca", "api/generated/deeptime.markov.reactive_flux", "api/generated/deeptime.markov.sample.compute_index_states", "api/generated/deeptime.markov.sample.indices_by_distribution", "api/generated/deeptime.markov.sample.indices_by_sequence", "api/generated/deeptime.markov.sample.indices_by_state", "api/generated/deeptime.markov.tools.analysis.committor", "api/generated/deeptime.markov.tools.analysis.committor_sensitivity", "api/generated/deeptime.markov.tools.analysis.correlation", "api/generated/deeptime.markov.tools.analysis.eigenvalue_sensitivity", "api/generated/deeptime.markov.tools.analysis.eigenvalues", "api/generated/deeptime.markov.tools.analysis.eigenvector_sensitivity", "api/generated/deeptime.markov.tools.analysis.eigenvectors", "api/generated/deeptime.markov.tools.analysis.expectation", "api/generated/deeptime.markov.tools.analysis.expectation_sensitivity", "api/generated/deeptime.markov.tools.analysis.expected_counts", "api/generated/deeptime.markov.tools.analysis.expected_counts_stationary", "api/generated/deeptime.markov.tools.analysis.fingerprint_correlation", "api/generated/deeptime.markov.tools.analysis.fingerprint_relaxation", "api/generated/deeptime.markov.tools.analysis.hitting_probability", "api/generated/deeptime.markov.tools.analysis.is_connected", "api/generated/deeptime.markov.tools.analysis.is_rate_matrix", "api/generated/deeptime.markov.tools.analysis.is_reversible", "api/generated/deeptime.markov.tools.analysis.is_transition_matrix", "api/generated/deeptime.markov.tools.analysis.mfpt", "api/generated/deeptime.markov.tools.analysis.mfpt_sensitivity", "api/generated/deeptime.markov.tools.analysis.pcca_memberships", "api/generated/deeptime.markov.tools.analysis.rdl_decomposition", "api/generated/deeptime.markov.tools.analysis.relaxation", "api/generated/deeptime.markov.tools.analysis.stationary_distribution", "api/generated/deeptime.markov.tools.analysis.stationary_distribution_sensitivity", "api/generated/deeptime.markov.tools.analysis.timescale_sensitivity", "api/generated/deeptime.markov.tools.analysis.timescales", "api/generated/deeptime.markov.tools.estimation.bootstrap_counts", "api/generated/deeptime.markov.tools.estimation.bootstrap_trajectories", "api/generated/deeptime.markov.tools.estimation.connected_sets", "api/generated/deeptime.markov.tools.estimation.count_matrix", "api/generated/deeptime.markov.tools.estimation.error_perturbation", "api/generated/deeptime.markov.tools.estimation.girsanov_reweighted_count_matrix", "api/generated/deeptime.markov.tools.estimation.is_connected", "api/generated/deeptime.markov.tools.estimation.largest_connected_set", "api/generated/deeptime.markov.tools.estimation.largest_connected_submatrix", "api/generated/deeptime.markov.tools.estimation.log_likelihood", "api/generated/deeptime.markov.tools.estimation.prior_const", "api/generated/deeptime.markov.tools.estimation.prior_neighbor", "api/generated/deeptime.markov.tools.estimation.prior_rev", "api/generated/deeptime.markov.tools.estimation.rate_matrix", "api/generated/deeptime.markov.tools.estimation.tmatrix_cov", "api/generated/deeptime.markov.tools.estimation.tmatrix_sampler", "api/generated/deeptime.markov.tools.estimation.transition_matrix", "api/generated/deeptime.markov.tools.flux.coarsegrain", "api/generated/deeptime.markov.tools.flux.flux_consumers", "api/generated/deeptime.markov.tools.flux.flux_matrix", "api/generated/deeptime.markov.tools.flux.flux_producers", "api/generated/deeptime.markov.tools.flux.flux_production", "api/generated/deeptime.markov.tools.flux.mfpt", "api/generated/deeptime.markov.tools.flux.pathways", "api/generated/deeptime.markov.tools.flux.rate", "api/generated/deeptime.markov.tools.flux.to_netflux", "api/generated/deeptime.markov.tools.flux.total_flux", "api/generated/deeptime.numeric.ZeroRankError", "api/generated/deeptime.numeric.drop_nan_rows", "api/generated/deeptime.numeric.eig_corr", "api/generated/deeptime.numeric.eigs", "api/generated/deeptime.numeric.is_diagonal_matrix", "api/generated/deeptime.numeric.is_square_matrix", "api/generated/deeptime.numeric.schatten_norm", "api/generated/deeptime.numeric.sort_eigs", "api/generated/deeptime.numeric.spd_eig", "api/generated/deeptime.numeric.spd_inv", "api/generated/deeptime.numeric.spd_inv_split", "api/generated/deeptime.numeric.spd_inv_sqrt", "api/generated/deeptime.numeric.spd_truncated_svd", "api/generated/deeptime.plots.Energy2dPlot", "api/generated/deeptime.plots.Network", "api/generated/deeptime.plots.plot_adjacency", "api/generated/deeptime.plots.plot_ck_test", "api/generated/deeptime.plots.plot_contour2d_from_xyz", "api/generated/deeptime.plots.plot_density", "api/generated/deeptime.plots.plot_energy2d", "api/generated/deeptime.plots.plot_flux", "api/generated/deeptime.plots.plot_implied_timescales", "api/generated/deeptime.plots.plot_markov_model", "api/generated/deeptime.sindy.SINDy", "api/generated/deeptime.sindy.SINDyModel", "api/generated/deeptime.sindy.STLSQ", "api/generated/deeptime.util.EnergyLandscape2d", "api/generated/deeptime.util.QuantityStatistics", "api/generated/deeptime.util.callbacks.ProgressCallback", "api/generated/deeptime.util.callbacks.supports_progress_interface", "api/generated/deeptime.util.confidence_interval", "api/generated/deeptime.util.data.ConcatDataset", "api/generated/deeptime.util.data.TimeLaggedConcatDataset", "api/generated/deeptime.util.data.TimeLaggedDataset", "api/generated/deeptime.util.data.TrajectoriesDataset", "api/generated/deeptime.util.data.TrajectoryDataset", "api/generated/deeptime.util.data.sliding_window", "api/generated/deeptime.util.data.timeshifted_split", "api/generated/deeptime.util.decorators.cached_property", "api/generated/deeptime.util.decorators.deprecated_argument", "api/generated/deeptime.util.decorators.plotting_function", "api/generated/deeptime.util.diff.finite_difference_coefficients", "api/generated/deeptime.util.diff.finite_difference_operator_midpoints", "api/generated/deeptime.util.diff.tv_derivative", "api/generated/deeptime.util.energy2d", "api/generated/deeptime.util.parallel.handle_n_jobs", "api/generated/deeptime.util.platform.handle_progress_bar", "api/generated/deeptime.util.platform.module_available", "api/generated/deeptime.util.types.atleast_nd", "api/generated/deeptime.util.types.is_timelagged_dataset", "api/generated/deeptime.util.types.to_dataset", "api/generated/deeptime.util.validation.ChapmanKolmogorovTest", "api/generated/deeptime.util.validation.ImpliedTimescales", "api/generated/deeptime.util.validation.ck_test", "api/generated/deeptime.util.validation.implied_timescales", "api/generated/impl/deeptime.covariance.WhiteningTransform", "api/generated/impl/deeptime.covariance.covar", "api/generated/impl/deeptime.covariance.covars", "api/generated/impl/deeptime.covariance.moments_XX", "api/generated/impl/deeptime.covariance.moments_XXXY", "api/generated/impl/deeptime.covariance.moments_block", "api/generated/impl/deeptime.data.BickleyJet", "api/generated/impl/deeptime.data.BirthDeathChain", "api/generated/impl/deeptime.data.CustomSystem", "api/generated/impl/deeptime.data.DoubleWellDiscrete", "api/generated/impl/deeptime.data.DrunkardsWalk", "api/generated/impl/deeptime.data.Ellipsoids", "api/generated/impl/deeptime.data.PBFSimulator", "api/generated/impl/deeptime.data.TimeDependentSystem", "api/generated/impl/deeptime.data.TimeIndependentSystem", "api/index_base", "api/index_basis", "api/index_clustering", "api/index_covariance", "api/index_data", "api/index_decomposition", "api/index_kernels", "api/index_markov", "api/index_markov_hmm", "api/index_markov_tools", "api/index_numeric", "api/index_plots", "api/index_sindy", "api/index_util", "contents", "imprint", "index_datasets", "index_deepdimreduction", "index_dev", "index_dimreduction", "index_examples", "index_msm", "index_nbexamples", "license", "notebooks/clustering", "notebooks/dmd", "notebooks/edmd", "notebooks/examples/ala2-example", "notebooks/examples/coherence-bickley-jet", "notebooks/examples/msm-prinz", "notebooks/examples/sqrt-model-dimrx", "notebooks/hmm", "notebooks/kcca", "notebooks/kedmd", "notebooks/mlmsm", "notebooks/pcca", "notebooks/sindy", "notebooks/tae", "notebooks/tica", "notebooks/tpt", "notebooks/tram", "notebooks/transition-counting", "notebooks/vamp", "notebooks/vampnets", "out/datasets/odes/index", "out/datasets/odes/plot_abc_flow", "out/datasets/odes/plot_bickley_jet", "out/datasets/odes/plot_custom_ode", "out/datasets/odes/plot_lorenz_system", "out/datasets/odes/plot_thomas_attractor", "out/datasets/odes/sg_execution_times", "out/datasets/other/index", "out/datasets/other/plot_drunkards_walk", "out/datasets/other/plot_ellipsoids", "out/datasets/other/plot_pbf", "out/datasets/other/plot_sqrt_model", "out/datasets/other/plot_swissroll_model", "out/datasets/other/sg_execution_times", "out/datasets/sdes/index", "out/datasets/sdes/plot_birth_death_chain", "out/datasets/sdes/plot_custom_sde", "out/datasets/sdes/plot_double_well_2d", "out/datasets/sdes/plot_double_well_discrete", "out/datasets/sdes/plot_ornstein_uhlenbeck", "out/datasets/sdes/plot_prinz", "out/datasets/sdes/plot_quadruple_well", "out/datasets/sdes/plot_quadruple_well_asymmetric", "out/datasets/sdes/plot_time_quintuple_well", "out/datasets/sdes/plot_tmatrix_1d", "out/datasets/sdes/plot_triple_well_1d", "out/datasets/sdes/plot_triple_well_2d", "out/datasets/sdes/sg_execution_times", "out/examples/index", "out/examples/plot_ck_test", "out/examples/plot_clustering_comparison", "out/examples/plot_contour2d_from_xyz", "out/examples/plot_density", "out/examples/plot_energy_surface", "out/examples/plot_implied_timescales", "out/examples/plot_kcca_bickley", "out/examples/plot_kcca_projection", "out/examples/plot_network", "out/examples/plot_pcca_drunkard", "out/examples/plot_sindy_rossler_attractor", "out/examples/plot_tpt_gross_net_flux", "out/examples/plot_tram", "out/examples/plot_tv_derivative", "out/examples/plot_vamp_pbf_projection", "out/examples/plot_vamp_vs_tica_vs_pca", "out/examples/sg_execution_times", "sg_execution_times"], "envversion": {"nbsphinx": 4, "sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9}, "filenames": ["api/generated/deeptime.base.Dataset.rst", "api/generated/deeptime.base.Estimator.rst", "api/generated/deeptime.base.Model.rst", "api/generated/deeptime.base.Transformer.rst", "api/generated/deeptime.basis.Concatenation.rst", "api/generated/deeptime.basis.Identity.rst", "api/generated/deeptime.basis.Monomials.rst", "api/generated/deeptime.basis.Observable.rst", "api/generated/deeptime.clustering.BoxDiscretization.rst", "api/generated/deeptime.clustering.BoxDiscretizationModel.rst", "api/generated/deeptime.clustering.ClusterModel.rst", "api/generated/deeptime.clustering.KMeans.rst", "api/generated/deeptime.clustering.KMeansModel.rst", "api/generated/deeptime.clustering.MetricRegistry.rst", "api/generated/deeptime.clustering.MiniBatchKMeans.rst", "api/generated/deeptime.clustering.RegularSpace.rst", "api/generated/deeptime.clustering.kmeans_plusplus.rst", "api/generated/deeptime.clustering.metrics.rst", "api/generated/deeptime.covariance.Covariance.rst", "api/generated/deeptime.covariance.CovarianceModel.rst", "api/generated/deeptime.covariance.KoopmanWeightingEstimator.rst", "api/generated/deeptime.covariance.KoopmanWeightingModel.rst", "api/generated/deeptime.data.abc_flow.rst", "api/generated/deeptime.data.bickley_jet.rst", "api/generated/deeptime.data.birth_death_chain.rst", "api/generated/deeptime.data.custom_ode.rst", "api/generated/deeptime.data.custom_sde.rst", "api/generated/deeptime.data.double_well_2d.rst", "api/generated/deeptime.data.double_well_discrete.rst", "api/generated/deeptime.data.drunkards_walk.rst", "api/generated/deeptime.data.ellipsoids.rst", "api/generated/deeptime.data.lorenz_system.rst", "api/generated/deeptime.data.ornstein_uhlenbeck.rst", "api/generated/deeptime.data.position_based_fluids.rst", "api/generated/deeptime.data.prinz_potential.rst", "api/generated/deeptime.data.quadruple_well.rst", "api/generated/deeptime.data.quadruple_well_asymmetric.rst", "api/generated/deeptime.data.sqrt_model.rst", "api/generated/deeptime.data.swissroll_model.rst", "api/generated/deeptime.data.thomas_attractor.rst", "api/generated/deeptime.data.time_dependent_quintuple_well.rst", "api/generated/deeptime.data.tmatrix_metropolis1d.rst", "api/generated/deeptime.data.triple_well_1d.rst", "api/generated/deeptime.data.triple_well_2d.rst", "api/generated/deeptime.decomposition.CovarianceKoopmanModel.rst", "api/generated/deeptime.decomposition.DMD.rst", "api/generated/deeptime.decomposition.DMDModel.rst", "api/generated/deeptime.decomposition.EDMD.rst", "api/generated/deeptime.decomposition.EDMDModel.rst", "api/generated/deeptime.decomposition.KVAD.rst", "api/generated/deeptime.decomposition.KVADModel.rst", "api/generated/deeptime.decomposition.KernelCCA.rst", "api/generated/deeptime.decomposition.KernelCCAModel.rst", "api/generated/deeptime.decomposition.KernelEDMD.rst", "api/generated/deeptime.decomposition.KernelEDMDModel.rst", "api/generated/deeptime.decomposition.TICA.rst", "api/generated/deeptime.decomposition.TransferOperatorModel.rst", "api/generated/deeptime.decomposition.VAMP.rst", "api/generated/deeptime.decomposition.blocksplit_trajs.rst", "api/generated/deeptime.decomposition.cvsplit_trajs.rst", "api/generated/deeptime.decomposition.deep.TAE.rst", "api/generated/deeptime.decomposition.deep.TAEModel.rst", "api/generated/deeptime.decomposition.deep.TVAE.rst", "api/generated/deeptime.decomposition.deep.TVAEEncoder.rst", "api/generated/deeptime.decomposition.deep.TVAEModel.rst", "api/generated/deeptime.decomposition.deep.VAMPNet.rst", "api/generated/deeptime.decomposition.deep.VAMPNetModel.rst", "api/generated/deeptime.decomposition.deep.covariances.rst", "api/generated/deeptime.decomposition.deep.koopman_matrix.rst", "api/generated/deeptime.decomposition.deep.kvad_score.rst", "api/generated/deeptime.decomposition.deep.sym_inverse.rst", "api/generated/deeptime.decomposition.deep.vamp_score.rst", "api/generated/deeptime.decomposition.deep.vampnet_loss.rst", "api/generated/deeptime.decomposition.vamp_score.rst", "api/generated/deeptime.decomposition.vamp_score_cv.rst", "api/generated/deeptime.decomposition.vamp_score_data.rst", "api/generated/deeptime.kernels.GaussianKernel.rst", "api/generated/deeptime.kernels.GeneralizedGaussianKernel.rst", "api/generated/deeptime.kernels.Kernel.rst", "api/generated/deeptime.kernels.LaplacianKernel.rst", "api/generated/deeptime.kernels.PolynomialKernel.rst", "api/generated/deeptime.kernels.TorchGaussianKernel.rst", "api/generated/deeptime.kernels.is_torch_kernel.rst", "api/generated/deeptime.markov.PCCAModel.rst", "api/generated/deeptime.markov.ReactiveFlux.rst", "api/generated/deeptime.markov.TransitionCountEstimator.rst", "api/generated/deeptime.markov.TransitionCountModel.rst", "api/generated/deeptime.markov.compute_connected_sets.rst", "api/generated/deeptime.markov.compute_dtrajs_effective.rst", "api/generated/deeptime.markov.compute_effective_stride.rst", "api/generated/deeptime.markov.count_states.rst", "api/generated/deeptime.markov.hmm.BayesianHMM.rst", "api/generated/deeptime.markov.hmm.BayesianHMMPosterior.rst", "api/generated/deeptime.markov.hmm.DiscreteOutputModel.rst", "api/generated/deeptime.markov.hmm.GaussianOutputModel.rst", "api/generated/deeptime.markov.hmm.HiddenMarkovModel.rst", "api/generated/deeptime.markov.hmm.MaximumLikelihoodHMM.rst", "api/generated/deeptime.markov.hmm.OutputModel.rst", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_data.rst", "api/generated/deeptime.markov.hmm.init.discrete.metastable_from_msm.rst", "api/generated/deeptime.markov.hmm.init.discrete.random_guess.rst", "api/generated/deeptime.markov.hmm.init.gaussian.from_data.rst", "api/generated/deeptime.markov.msm.AugmentedMSM.rst", "api/generated/deeptime.markov.msm.AugmentedMSMEstimator.rst", "api/generated/deeptime.markov.msm.BayesianMSM.rst", "api/generated/deeptime.markov.msm.BayesianMSMPosterior.rst", "api/generated/deeptime.markov.msm.KoopmanReweightedMSM.rst", "api/generated/deeptime.markov.msm.MarkovStateModel.rst", "api/generated/deeptime.markov.msm.MarkovStateModelCollection.rst", "api/generated/deeptime.markov.msm.MaximumLikelihoodMSM.rst", "api/generated/deeptime.markov.msm.OOMReweightedMSM.rst", "api/generated/deeptime.markov.msm.TRAM.rst", "api/generated/deeptime.markov.msm.TRAMDataset.rst", "api/generated/deeptime.markov.msm.TRAMModel.rst", "api/generated/deeptime.markov.number_of_states.rst", "api/generated/deeptime.markov.pcca.rst", "api/generated/deeptime.markov.reactive_flux.rst", "api/generated/deeptime.markov.sample.compute_index_states.rst", "api/generated/deeptime.markov.sample.indices_by_distribution.rst", "api/generated/deeptime.markov.sample.indices_by_sequence.rst", "api/generated/deeptime.markov.sample.indices_by_state.rst", "api/generated/deeptime.markov.tools.analysis.committor.rst", "api/generated/deeptime.markov.tools.analysis.committor_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.correlation.rst", "api/generated/deeptime.markov.tools.analysis.eigenvalue_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.eigenvalues.rst", "api/generated/deeptime.markov.tools.analysis.eigenvector_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.eigenvectors.rst", "api/generated/deeptime.markov.tools.analysis.expectation.rst", "api/generated/deeptime.markov.tools.analysis.expectation_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.expected_counts.rst", "api/generated/deeptime.markov.tools.analysis.expected_counts_stationary.rst", "api/generated/deeptime.markov.tools.analysis.fingerprint_correlation.rst", "api/generated/deeptime.markov.tools.analysis.fingerprint_relaxation.rst", "api/generated/deeptime.markov.tools.analysis.hitting_probability.rst", "api/generated/deeptime.markov.tools.analysis.is_connected.rst", "api/generated/deeptime.markov.tools.analysis.is_rate_matrix.rst", "api/generated/deeptime.markov.tools.analysis.is_reversible.rst", "api/generated/deeptime.markov.tools.analysis.is_transition_matrix.rst", "api/generated/deeptime.markov.tools.analysis.mfpt.rst", "api/generated/deeptime.markov.tools.analysis.mfpt_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.pcca_memberships.rst", "api/generated/deeptime.markov.tools.analysis.rdl_decomposition.rst", "api/generated/deeptime.markov.tools.analysis.relaxation.rst", "api/generated/deeptime.markov.tools.analysis.stationary_distribution.rst", "api/generated/deeptime.markov.tools.analysis.stationary_distribution_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.timescale_sensitivity.rst", "api/generated/deeptime.markov.tools.analysis.timescales.rst", "api/generated/deeptime.markov.tools.estimation.bootstrap_counts.rst", "api/generated/deeptime.markov.tools.estimation.bootstrap_trajectories.rst", "api/generated/deeptime.markov.tools.estimation.connected_sets.rst", "api/generated/deeptime.markov.tools.estimation.count_matrix.rst", "api/generated/deeptime.markov.tools.estimation.error_perturbation.rst", "api/generated/deeptime.markov.tools.estimation.girsanov_reweighted_count_matrix.rst", "api/generated/deeptime.markov.tools.estimation.is_connected.rst", "api/generated/deeptime.markov.tools.estimation.largest_connected_set.rst", "api/generated/deeptime.markov.tools.estimation.largest_connected_submatrix.rst", "api/generated/deeptime.markov.tools.estimation.log_likelihood.rst", "api/generated/deeptime.markov.tools.estimation.prior_const.rst", "api/generated/deeptime.markov.tools.estimation.prior_neighbor.rst", "api/generated/deeptime.markov.tools.estimation.prior_rev.rst", "api/generated/deeptime.markov.tools.estimation.rate_matrix.rst", "api/generated/deeptime.markov.tools.estimation.tmatrix_cov.rst", "api/generated/deeptime.markov.tools.estimation.tmatrix_sampler.rst", "api/generated/deeptime.markov.tools.estimation.transition_matrix.rst", "api/generated/deeptime.markov.tools.flux.coarsegrain.rst", "api/generated/deeptime.markov.tools.flux.flux_consumers.rst", "api/generated/deeptime.markov.tools.flux.flux_matrix.rst", "api/generated/deeptime.markov.tools.flux.flux_producers.rst", "api/generated/deeptime.markov.tools.flux.flux_production.rst", "api/generated/deeptime.markov.tools.flux.mfpt.rst", "api/generated/deeptime.markov.tools.flux.pathways.rst", "api/generated/deeptime.markov.tools.flux.rate.rst", "api/generated/deeptime.markov.tools.flux.to_netflux.rst", "api/generated/deeptime.markov.tools.flux.total_flux.rst", "api/generated/deeptime.numeric.ZeroRankError.rst", "api/generated/deeptime.numeric.drop_nan_rows.rst", "api/generated/deeptime.numeric.eig_corr.rst", "api/generated/deeptime.numeric.eigs.rst", "api/generated/deeptime.numeric.is_diagonal_matrix.rst", "api/generated/deeptime.numeric.is_square_matrix.rst", "api/generated/deeptime.numeric.schatten_norm.rst", "api/generated/deeptime.numeric.sort_eigs.rst", "api/generated/deeptime.numeric.spd_eig.rst", "api/generated/deeptime.numeric.spd_inv.rst", "api/generated/deeptime.numeric.spd_inv_split.rst", "api/generated/deeptime.numeric.spd_inv_sqrt.rst", "api/generated/deeptime.numeric.spd_truncated_svd.rst", "api/generated/deeptime.plots.Energy2dPlot.rst", "api/generated/deeptime.plots.Network.rst", "api/generated/deeptime.plots.plot_adjacency.rst", "api/generated/deeptime.plots.plot_ck_test.rst", "api/generated/deeptime.plots.plot_contour2d_from_xyz.rst", "api/generated/deeptime.plots.plot_density.rst", "api/generated/deeptime.plots.plot_energy2d.rst", "api/generated/deeptime.plots.plot_flux.rst", "api/generated/deeptime.plots.plot_implied_timescales.rst", "api/generated/deeptime.plots.plot_markov_model.rst", "api/generated/deeptime.sindy.SINDy.rst", "api/generated/deeptime.sindy.SINDyModel.rst", "api/generated/deeptime.sindy.STLSQ.rst", "api/generated/deeptime.util.EnergyLandscape2d.rst", "api/generated/deeptime.util.QuantityStatistics.rst", "api/generated/deeptime.util.callbacks.ProgressCallback.rst", "api/generated/deeptime.util.callbacks.supports_progress_interface.rst", "api/generated/deeptime.util.confidence_interval.rst", "api/generated/deeptime.util.data.ConcatDataset.rst", "api/generated/deeptime.util.data.TimeLaggedConcatDataset.rst", "api/generated/deeptime.util.data.TimeLaggedDataset.rst", "api/generated/deeptime.util.data.TrajectoriesDataset.rst", "api/generated/deeptime.util.data.TrajectoryDataset.rst", "api/generated/deeptime.util.data.sliding_window.rst", "api/generated/deeptime.util.data.timeshifted_split.rst", "api/generated/deeptime.util.decorators.cached_property.rst", "api/generated/deeptime.util.decorators.deprecated_argument.rst", "api/generated/deeptime.util.decorators.plotting_function.rst", "api/generated/deeptime.util.diff.finite_difference_coefficients.rst", "api/generated/deeptime.util.diff.finite_difference_operator_midpoints.rst", "api/generated/deeptime.util.diff.tv_derivative.rst", "api/generated/deeptime.util.energy2d.rst", "api/generated/deeptime.util.parallel.handle_n_jobs.rst", "api/generated/deeptime.util.platform.handle_progress_bar.rst", "api/generated/deeptime.util.platform.module_available.rst", "api/generated/deeptime.util.types.atleast_nd.rst", "api/generated/deeptime.util.types.is_timelagged_dataset.rst", "api/generated/deeptime.util.types.to_dataset.rst", "api/generated/deeptime.util.validation.ChapmanKolmogorovTest.rst", "api/generated/deeptime.util.validation.ImpliedTimescales.rst", "api/generated/deeptime.util.validation.ck_test.rst", "api/generated/deeptime.util.validation.implied_timescales.rst", "api/generated/impl/deeptime.covariance.WhiteningTransform.rst", "api/generated/impl/deeptime.covariance.covar.rst", "api/generated/impl/deeptime.covariance.covars.rst", "api/generated/impl/deeptime.covariance.moments_XX.rst", "api/generated/impl/deeptime.covariance.moments_XXXY.rst", "api/generated/impl/deeptime.covariance.moments_block.rst", "api/generated/impl/deeptime.data.BickleyJet.rst", "api/generated/impl/deeptime.data.BirthDeathChain.rst", "api/generated/impl/deeptime.data.CustomSystem.rst", "api/generated/impl/deeptime.data.DoubleWellDiscrete.rst", "api/generated/impl/deeptime.data.DrunkardsWalk.rst", "api/generated/impl/deeptime.data.Ellipsoids.rst", "api/generated/impl/deeptime.data.PBFSimulator.rst", "api/generated/impl/deeptime.data.TimeDependentSystem.rst", "api/generated/impl/deeptime.data.TimeIndependentSystem.rst", "api/index_base.rst", "api/index_basis.rst", "api/index_clustering.rst", "api/index_covariance.rst", "api/index_data.rst", "api/index_decomposition.rst", "api/index_kernels.rst", "api/index_markov.rst", "api/index_markov_hmm.rst", "api/index_markov_tools.rst", "api/index_numeric.rst", "api/index_plots.rst", "api/index_sindy.rst", "api/index_util.rst", "contents.rst", "imprint.rst", "index_datasets.rst", "index_deepdimreduction.rst", "index_dev.rst", "index_dimreduction.rst", "index_examples.rst", "index_msm.rst", "index_nbexamples.rst", "license.rst", "notebooks/clustering.ipynb", "notebooks/dmd.ipynb", "notebooks/edmd.ipynb", "notebooks/examples/ala2-example.ipynb", "notebooks/examples/coherence-bickley-jet.ipynb", "notebooks/examples/msm-prinz.ipynb", "notebooks/examples/sqrt-model-dimrx.ipynb", "notebooks/hmm.ipynb", "notebooks/kcca.ipynb", "notebooks/kedmd.ipynb", "notebooks/mlmsm.ipynb", "notebooks/pcca.ipynb", "notebooks/sindy.ipynb", "notebooks/tae.ipynb", "notebooks/tica.ipynb", "notebooks/tpt.ipynb", "notebooks/tram.ipynb", "notebooks/transition-counting.ipynb", "notebooks/vamp.ipynb", "notebooks/vampnets.ipynb", "out/datasets/odes/index.rst", "out/datasets/odes/plot_abc_flow.rst", "out/datasets/odes/plot_bickley_jet.rst", "out/datasets/odes/plot_custom_ode.rst", "out/datasets/odes/plot_lorenz_system.rst", "out/datasets/odes/plot_thomas_attractor.rst", "out/datasets/odes/sg_execution_times.rst", "out/datasets/other/index.rst", "out/datasets/other/plot_drunkards_walk.rst", "out/datasets/other/plot_ellipsoids.rst", "out/datasets/other/plot_pbf.rst", "out/datasets/other/plot_sqrt_model.rst", "out/datasets/other/plot_swissroll_model.rst", "out/datasets/other/sg_execution_times.rst", "out/datasets/sdes/index.rst", "out/datasets/sdes/plot_birth_death_chain.rst", "out/datasets/sdes/plot_custom_sde.rst", "out/datasets/sdes/plot_double_well_2d.rst", "out/datasets/sdes/plot_double_well_discrete.rst", "out/datasets/sdes/plot_ornstein_uhlenbeck.rst", "out/datasets/sdes/plot_prinz.rst", "out/datasets/sdes/plot_quadruple_well.rst", "out/datasets/sdes/plot_quadruple_well_asymmetric.rst", "out/datasets/sdes/plot_time_quintuple_well.rst", "out/datasets/sdes/plot_tmatrix_1d.rst", "out/datasets/sdes/plot_triple_well_1d.rst", "out/datasets/sdes/plot_triple_well_2d.rst", "out/datasets/sdes/sg_execution_times.rst", "out/examples/index.rst", "out/examples/plot_ck_test.rst", "out/examples/plot_clustering_comparison.rst", "out/examples/plot_contour2d_from_xyz.rst", "out/examples/plot_density.rst", "out/examples/plot_energy_surface.rst", "out/examples/plot_implied_timescales.rst", "out/examples/plot_kcca_bickley.rst", "out/examples/plot_kcca_projection.rst", "out/examples/plot_network.rst", "out/examples/plot_pcca_drunkard.rst", "out/examples/plot_sindy_rossler_attractor.rst", "out/examples/plot_tpt_gross_net_flux.rst", "out/examples/plot_tram.rst", "out/examples/plot_tv_derivative.rst", "out/examples/plot_vamp_pbf_projection.rst", "out/examples/plot_vamp_vs_tica_vs_pca.rst", "out/examples/sg_execution_times.rst", "sg_execution_times.rst"], "indexentries": {"__call__() (deeptime.base.transformer method)": [[3, "deeptime.base.Transformer.__call__", false]], "__call__() (deeptime.basis.concatenation method)": [[4, "deeptime.basis.Concatenation.__call__", false]], "__call__() (deeptime.basis.identity method)": [[5, "deeptime.basis.Identity.__call__", false]], "__call__() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.__call__", false]], "__call__() (deeptime.basis.observable method)": [[7, "deeptime.basis.Observable.__call__", false]], "__call__() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.__call__", false]], "__call__() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.__call__", false]], "__call__() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.__call__", false]], "__call__() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.__call__", false]], "__call__() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.__call__", false]], "__call__() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.__call__", false]], "__call__() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.__call__", false]], "__call__() (deeptime.covariance.whiteningtransform method)": [[230, "deeptime.covariance.WhiteningTransform.__call__", false]], "__call__() (deeptime.data.bickleyjet method)": [[236, "deeptime.data.BickleyJet.__call__", false]], "__call__() (deeptime.data.customsystem method)": [[238, "deeptime.data.CustomSystem.__call__", false]], "__call__() (deeptime.data.timedependentsystem method)": [[243, "deeptime.data.TimeDependentSystem.__call__", false]], "__call__() (deeptime.data.timeindependentsystem method)": [[244, "deeptime.data.TimeIndependentSystem.__call__", false]], "__call__() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.__call__", false]], "__call__() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.__call__", false]], "__call__() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.__call__", false]], "__call__() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.__call__", false]], "__call__() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.__call__", false]], "__call__() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.__call__", false]], "__call__() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.__call__", false]], "__call__() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.__call__", false]], "__call__() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.__call__", false]], "__call__() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.__call__", false]], "__call__() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.__call__", false]], "__call__() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.__call__", false]], "__call__() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.__call__", false]], "__call__() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.__call__", false]], "__call__() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.__call__", false]], "__call__() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.__call__", false]], "__call__() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.__call__", false]], "__call__() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.__call__", false]], "__call__() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.__call__", false]], "__call__() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.__call__", false]], "__call__() (deeptime.kernels.gaussiankernel method)": [[76, "deeptime.kernels.GaussianKernel.__call__", false]], "__call__() (deeptime.kernels.generalizedgaussiankernel method)": [[77, "deeptime.kernels.GeneralizedGaussianKernel.__call__", false]], "__call__() (deeptime.kernels.kernel method)": [[78, "deeptime.kernels.Kernel.__call__", false]], "__call__() (deeptime.kernels.laplaciankernel method)": [[79, "deeptime.kernels.LaplacianKernel.__call__", false]], "__call__() (deeptime.kernels.polynomialkernel method)": [[80, "deeptime.kernels.PolynomialKernel.__call__", false]], "__call__() (deeptime.kernels.torchgaussiankernel method)": [[81, "deeptime.kernels.TorchGaussianKernel.__call__", false]], "__call__() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.__call__", false]], "__call__() (deeptime.util.callbacks.progresscallback method)": [[203, "deeptime.util.callbacks.ProgressCallback.__call__", false]], "abc_flow() (in module deeptime.data)": [[22, "deeptime.data.abc_flow", false]], "accuracy (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.accuracy", false]], "add_barrier() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.add_barrier", false]], "add_module() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.add_module", false]], "add_note() (deeptime.numeric.zerorankerror method)": [[175, "deeptime.numeric.ZeroRankError.add_note", false]], "adjacency_matrix (deeptime.plots.network property)": [[189, "deeptime.plots.Network.adjacency_matrix", false]], "allow_disconnected (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.allow_disconnected", false]], "analytic_msm (deeptime.data.doublewelldiscrete property)": [[239, "deeptime.data.DoubleWellDiscrete.analytic_msm", false]], "apply() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.apply", false]], "apply() (deeptime.kernels.gaussiankernel method)": [[76, "deeptime.kernels.GaussianKernel.apply", false]], "apply() (deeptime.kernels.generalizedgaussiankernel method)": [[77, "deeptime.kernels.GeneralizedGaussianKernel.apply", false]], "apply() (deeptime.kernels.kernel method)": [[78, "deeptime.kernels.Kernel.apply", false]], "apply() (deeptime.kernels.laplaciankernel method)": [[79, "deeptime.kernels.LaplacianKernel.apply", false]], "apply() (deeptime.kernels.polynomialkernel method)": [[80, "deeptime.kernels.PolynomialKernel.apply", false]], "apply() (deeptime.kernels.torchgaussiankernel method)": [[81, "deeptime.kernels.TorchGaussianKernel.apply", false]], "apply_periodic_boundary_conditions() (deeptime.data.bickleyjet static method)": [[236, "deeptime.data.BickleyJet.apply_periodic_boundary_conditions", false]], "assignments (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.assignments", false]], "astype() (deeptime.util.data.timelaggeddataset method)": [[208, "deeptime.util.data.TimeLaggedDataset.astype", false]], "astype() (deeptime.util.data.trajectorydataset method)": [[210, "deeptime.util.data.TrajectoryDataset.astype", false]], "atleast_nd() (in module deeptime.util.types)": [[223, "deeptime.util.types.atleast_nd", false]], "augmentedmsm (class in deeptime.markov.msm)": [[102, "deeptime.markov.msm.AugmentedMSM", false]], "augmentedmsmestimator (class in deeptime.markov.msm)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator", false]], "available (deeptime.clustering.metricregistry property)": [[13, "deeptime.clustering.MetricRegistry.available", false]], "available_drivers (deeptime.decomposition.dmd attribute)": [[45, "deeptime.decomposition.DMD.available_drivers", false]], "available_modes (deeptime.decomposition.dmd attribute)": [[45, "deeptime.decomposition.DMD.available_modes", false]], "available_operators (deeptime.decomposition.edmd attribute)": [[47, "deeptime.decomposition.EDMD.available_operators", false]], "backward() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.backward", false]], "backward() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.backward", false]], "backward() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.backward", false]], "backward() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.backward", false]], "backward() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.backward", false]], "backward() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.backward", false]], "backward_committor (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.backward_committor", false]], "bayesianhmm (class in deeptime.markov.hmm)": [[91, "deeptime.markov.hmm.BayesianHMM", false]], "bayesianhmmposterior (class in deeptime.markov.hmm)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior", false]], "bayesianmsm (class in deeptime.markov.msm)": [[104, "deeptime.markov.msm.BayesianMSM", false]], "bayesianmsmposterior (class in deeptime.markov.msm)": [[105, "deeptime.markov.msm.BayesianMSMPosterior", false]], "bessels_correction (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.bessels_correction", false]], "bessels_correction (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.bessels_correction", false]], "bfloat16() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.bfloat16", false]], "biased_conf_energies (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.biased_conf_energies", false]], "bickley_jet() (in module deeptime.data)": [[23, "deeptime.data.bickley_jet", false]], "bickleyjet (class in deeptime.data)": [[236, "deeptime.data.BickleyJet", false]], "birth_death_chain() (in module deeptime.data)": [[24, "deeptime.data.birth_death_chain", false]], "birthdeathchain (class in deeptime.data)": [[237, "deeptime.data.BirthDeathChain", false]], "blocksplit_trajs() (in module deeptime.decomposition)": [[58, "deeptime.decomposition.blocksplit_trajs", false]], "bootstrap_counts() (in module deeptime.markov.tools.estimation)": [[148, "deeptime.markov.tools.estimation.bootstrap_counts", false]], "bootstrap_trajectories() (in module deeptime.markov.tools.estimation)": [[149, "deeptime.markov.tools.estimation.bootstrap_trajectories", false]], "bounds (deeptime.plots.network property)": [[189, "deeptime.plots.Network.bounds", false]], "boxdiscretization (class in deeptime.clustering)": [[8, "deeptime.clustering.BoxDiscretization", false]], "boxdiscretizationmodel (class in deeptime.clustering)": [[9, "deeptime.clustering.BoxDiscretizationModel", false]], "buffers() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.buffers", false]], "c (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.c", false]], "cached_property (class in deeptime.util.decorators)": [[213, "deeptime.util.decorators.cached_property", false]], "chapmankolmogorovtest (class in deeptime.util.validation)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest", false]], "check_against_model() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.check_against_model", false]], "children() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.children", false]], "ck_test() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.ck_test", false]], "ck_test() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.ck_test", false]], "ck_test() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.ck_test", false]], "ck_test() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.ck_test", false]], "ck_test() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.ck_test", false]], "ck_test() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.ck_test", false]], "ck_test() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.ck_test", false]], "ck_test() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.ck_test", false]], "ck_test() (in module deeptime.util.validation)": [[228, "deeptime.util.validation.ck_test", false]], "cluster_centers (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.cluster_centers", false]], "cluster_centers (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.cluster_centers", false]], "cluster_centers (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.cluster_centers", false]], "clustermodel (class in deeptime.clustering)": [[10, "deeptime.clustering.ClusterModel", false]], "cmap (deeptime.plots.network property)": [[189, "deeptime.plots.Network.cmap", false]], "coarse_grain() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.coarse_grain", false]], "coarse_grained_stationary_probability (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.coarse_grained_stationary_probability", false]], "coarse_grained_transition_matrix (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.coarse_grained_transition_matrix", false]], "coarsegrain() (in module deeptime.markov.tools.flux)": [[165, "deeptime.markov.tools.flux.coarsegrain", false]], "coefficients (deeptime.sindy.sindymodel property)": [[199, "deeptime.sindy.SINDyModel.coefficients", false]], "collect_observations_in_state() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.collect_observations_in_state", false]], "committor() (in module deeptime.markov.tools.analysis)": [[121, "deeptime.markov.tools.analysis.committor", false]], "committor_backward() (deeptime.data.birthdeathchain method)": [[237, "deeptime.data.BirthDeathChain.committor_backward", false]], "committor_backward() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.committor_backward", false]], "committor_backward() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.committor_backward", false]], "committor_backward() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.committor_backward", false]], "committor_backward() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.committor_backward", false]], "committor_forward() (deeptime.data.birthdeathchain method)": [[237, "deeptime.data.BirthDeathChain.committor_forward", false]], "committor_forward() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.committor_forward", false]], "committor_forward() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.committor_forward", false]], "committor_forward() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.committor_forward", false]], "committor_forward() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.committor_forward", false]], "committor_sensitivity() (in module deeptime.markov.tools.analysis)": [[122, "deeptime.markov.tools.analysis.committor_sensitivity", false]], "compile() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.compile", false]], "compute_c00 (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.compute_c00", false]], "compute_c0t (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.compute_c0t", false]], "compute_connected_sets() (in module deeptime.markov)": [[87, "deeptime.markov.compute_connected_sets", false]], "compute_ctt (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.compute_ctt", false]], "compute_dtrajs_effective() (in module deeptime.markov)": [[88, "deeptime.markov.compute_dtrajs_effective", false]], "compute_effective_stride() (in module deeptime.markov)": [[89, "deeptime.markov.compute_effective_stride", false]], "compute_index_states() (in module deeptime.markov.sample)": [[117, "deeptime.markov.sample.compute_index_states", false]], "compute_log_likelihood() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_log_likelihood", false]], "compute_observable() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_observable", false]], "compute_observation_likelihood() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.compute_observation_likelihood", false]], "compute_pmf() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_PMF", false]], "compute_sample_weights_log() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.compute_sample_weights_log", false]], "compute_state_indices() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.compute_state_indices", false]], "compute_state_indices() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.compute_state_indices", false]], "compute_state_indices() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.compute_state_indices", false]], "compute_state_indices() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.compute_state_indices", false]], "compute_trajectory_weights() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.compute_trajectory_weights", false]], "compute_trajectory_weights() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.compute_trajectory_weights", false]], "compute_trajectory_weights() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.compute_trajectory_weights", false]], "compute_trajectory_weights() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.compute_trajectory_weights", false]], "compute_viterbi_paths() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.compute_viterbi_paths", false]], "concatdataset (class in deeptime.util.data)": [[206, "deeptime.util.data.ConcatDataset", false]], "concatenation (class in deeptime.basis)": [[4, "deeptime.basis.Concatenation", false]], "confidence_interval() (in module deeptime.util)": [[205, "deeptime.util.confidence_interval", false]], "connected_sets() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.connected_sets", false]], "connected_sets() (in module deeptime.markov.tools.estimation)": [[150, "deeptime.markov.tools.estimation.connected_sets", false]], "connectivity_options (deeptime.markov.msm.tramdataset attribute)": [[112, "deeptime.markov.msm.TRAMDataset.connectivity_options", false]], "const_weight_input (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.const_weight_input", false]], "converged (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.converged", false]], "converged (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.converged", false]], "converged (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.converged", false]], "convergence_criterion_lagrange (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.convergence_criterion_lagrange", false]], "coordinate_to_state() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.coordinate_to_state", false]], "copy() (deeptime.base.model method)": [[2, "deeptime.base.Model.copy", false]], "copy() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.copy", false]], "copy() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.copy", false]], "copy() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.copy", false]], "copy() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.copy", false]], "copy() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.copy", false]], "copy() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.copy", false]], "copy() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.copy", false]], "copy() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.copy", false]], "copy() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.copy", false]], "copy() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.copy", false]], "copy() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.copy", false]], "copy() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.copy", false]], "copy() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.copy", false]], "copy() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.copy", false]], "copy() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.copy", false]], "copy() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.copy", false]], "copy() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.copy", false]], "copy() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.copy", false]], "copy() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.copy", false]], "copy() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.copy", false]], "copy() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.copy", false]], "copy() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.copy", false]], "copy() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.copy", false]], "copy() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.copy", false]], "copy() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.copy", false]], "copy() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.copy", false]], "copy() (deeptime.markov.pccamodel method)": [[83, "deeptime.markov.PCCAModel.copy", false]], "copy() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.copy", false]], "copy() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.copy", false]], "copy() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.copy", false]], "correlation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.correlation", false]], "correlation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.correlation", false]], "correlation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.correlation", false]], "correlation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.correlation", false]], "correlation() (in module deeptime.markov.tools.analysis)": [[123, "deeptime.markov.tools.analysis.correlation", false]], "correlation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.correlation_obs", false]], "count() (deeptime.markov.transitioncountestimator static method)": [[85, "deeptime.markov.TransitionCountEstimator.count", false]], "count_fraction (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.count_fraction", false]], "count_fractions (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.count_fractions", false]], "count_matrix (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.count_matrix", false]], "count_matrix() (in module deeptime.markov.tools.estimation)": [[151, "deeptime.markov.tools.estimation.count_matrix", false]], "count_matrix_full (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.count_matrix_full", false]], "count_matrix_histogram() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.count_matrix_histogram", false]], "count_mode (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.count_mode", false]], "count_model (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.count_model", false]], "count_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.count_model", false]], "count_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.count_model", false]], "count_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.count_model", false]], "count_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.count_model", false]], "count_states() (in module deeptime.markov)": [[90, "deeptime.markov.count_states", false]], "counting_mode (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.counting_mode", false]], "cov (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov", false]], "cov_00 (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.cov_00", false]], "cov_00 (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov_00", false]], "cov_0t (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.cov_0t", false]], "cov_0t (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov_0t", false]], "cov_tt (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.cov_tt", false]], "cov_tt (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cov_tt", false]], "covar() (in module deeptime.covariance)": [[231, "deeptime.covariance.covar", false]], "covariance (class in deeptime.covariance)": [[18, "deeptime.covariance.Covariance", false]], "covariance_estimator() (deeptime.decomposition.tica class method)": [[55, "deeptime.decomposition.TICA.covariance_estimator", false]], "covariance_estimator() (deeptime.decomposition.vamp class method)": [[57, "deeptime.decomposition.VAMP.covariance_estimator", false]], "covariance_matrix (deeptime.data.ellipsoids property)": [[241, "deeptime.data.Ellipsoids.covariance_matrix", false]], "covariancekoopmanmodel (class in deeptime.decomposition)": [[44, "deeptime.decomposition.CovarianceKoopmanModel", false]], "covariancemodel (class in deeptime.covariance)": [[19, "deeptime.covariance.CovarianceModel", false]], "covariances (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.covariances", false]], "covariances() (in module deeptime.decomposition.deep)": [[67, "deeptime.decomposition.deep.covariances", false]], "covars() (in module deeptime.covariance)": [[232, "deeptime.covariance.covars", false]], "cpu() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.cpu", false]], "cuda() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.cuda", false]], "cumulative_kinetic_variance (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.cumulative_kinetic_variance", false]], "current_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.current_model", false]], "custom_ode() (in module deeptime.data)": [[25, "deeptime.data.custom_ode", false]], "custom_sde() (in module deeptime.data)": [[26, "deeptime.data.custom_sde", false]], "customsystem (class in deeptime.data)": [[238, "deeptime.data.CustomSystem", false]], "cvsplit_trajs() (in module deeptime.decomposition)": [[59, "deeptime.decomposition.cvsplit_trajs", false]], "d_x (deeptime.plots.network property)": [[189, "deeptime.plots.Network.d_x", false]], "d_y (deeptime.plots.network property)": [[189, "deeptime.plots.Network.d_y", false]], "data (deeptime.util.data.timelaggeddataset property)": [[208, "deeptime.util.data.TimeLaggedDataset.data", false]], "data (deeptime.util.data.trajectorydataset property)": [[210, "deeptime.util.data.TrajectoryDataset.data", false]], "data_lagged (deeptime.util.data.timelaggeddataset property)": [[208, "deeptime.util.data.TimeLaggedDataset.data_lagged", false]], "data_lagged (deeptime.util.data.trajectorydataset property)": [[210, "deeptime.util.data.TrajectoryDataset.data_lagged", false]], "data_mean_removed (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.data_mean_removed", false]], "dataset (class in deeptime.base)": [[0, "deeptime.base.Dataset", false]], "decoder (deeptime.decomposition.deep.taemodel property)": [[61, "deeptime.decomposition.deep.TAEModel.decoder", false]], "decoder (deeptime.decomposition.deep.tvaemodel property)": [[64, "deeptime.decomposition.deep.TVAEModel.decoder", false]], "deeptime.basis": [[246, "module-deeptime.basis", false]], "deeptime.clustering": [[247, "module-deeptime.clustering", false]], "deeptime.covariance": [[248, "module-deeptime.covariance", false]], "deeptime.data": [[249, "module-deeptime.data", false]], "deeptime.decomposition": [[250, "module-deeptime.decomposition", false]], "deeptime.kernels": [[251, "module-deeptime.kernels", false]], "deeptime.markov.tools.analysis": [[254, "module-deeptime.markov.tools.analysis", false]], "deeptime.markov.tools.estimation": [[254, "module-deeptime.markov.tools.estimation", false]], "deeptime.markov.tools.flux": [[254, "module-deeptime.markov.tools.flux", false]], "deeptime.numeric": [[255, "module-deeptime.numeric", false]], "deeptime.plots": [[256, "module-deeptime.plots", false]], "deeptime.sindy": [[257, "module-deeptime.sindy", false]], "deeptime.util": [[258, "module-deeptime.util", false]], "default() (deeptime.markov.hmm.bayesianhmm static method)": [[91, "deeptime.markov.hmm.BayesianHMM.default", false]], "deleter() (deeptime.util.decorators.cached_property method)": [[213, "deeptime.util.decorators.cached_property.deleter", false]], "deprecated_argument() (in module deeptime.util.decorators)": [[214, "deeptime.util.decorators.deprecated_argument", false]], "device (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.device", false]], "device (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.device", false]], "device (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.device", false]], "diag_only (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.diag_only", false]], "dim (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.dim", false]], "dim (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.dim", false]], "dim (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.dim", false]], "dim (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.dim", false]], "dimension (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.dimension", false]], "dimension (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.dimension", false]], "dimension (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.dimension", false]], "dimension (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.dimension", false]], "discrete_trajectory() (deeptime.data.ellipsoids method)": [[241, "deeptime.data.Ellipsoids.discrete_trajectory", false]], "discreteoutputmodel (class in deeptime.markov.hmm)": [[93, "deeptime.markov.hmm.DiscreteOutputModel", false]], "dmd (class in deeptime.decomposition)": [[45, "deeptime.decomposition.DMD", false]], "dmdmodel (class in deeptime.decomposition)": [[46, "deeptime.decomposition.DMDModel", false]], "dmin (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.dmin", false]], "domain_size (deeptime.data.pbfsimulator property)": [[242, "deeptime.data.PBFSimulator.domain_size", false]], "double() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.double", false]], "double_well_2d() (in module deeptime.data)": [[27, "deeptime.data.double_well_2d", false]], "double_well_discrete() (in module deeptime.data)": [[28, "deeptime.data.double_well_discrete", false]], "doublewelldiscrete (class in deeptime.data)": [[239, "deeptime.data.DoubleWellDiscrete", false]], "drop_nan_rows() (in module deeptime.numeric)": [[176, "deeptime.numeric.drop_nan_rows", false]], "drunkards_walk() (in module deeptime.data)": [[29, "deeptime.data.drunkards_walk", false]], "drunkardswalk (class in deeptime.data)": [[240, "deeptime.data.DrunkardsWalk", false]], "dtraj (deeptime.data.doublewelldiscrete property)": [[239, "deeptime.data.DoubleWellDiscrete.dtraj", false]], "dtraj_n() (deeptime.data.doublewelldiscrete method)": [[239, "deeptime.data.DoubleWellDiscrete.dtraj_n", false]], "dtraj_n2() (deeptime.data.doublewelldiscrete method)": [[239, "deeptime.data.DoubleWellDiscrete.dtraj_n2", false]], "dtraj_n2bad (deeptime.data.doublewelldiscrete property)": [[239, "deeptime.data.DoubleWellDiscrete.dtraj_n2bad", false]], "dtraj_n2good (deeptime.data.doublewelldiscrete property)": [[239, "deeptime.data.DoubleWellDiscrete.dtraj_n2good", false]], "dtraj_n6good (deeptime.data.doublewelldiscrete property)": [[239, "deeptime.data.DoubleWellDiscrete.dtraj_n6good", false]], "dtype (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.dtype", false]], "dtype (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.dtype", false]], "dtype (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.dtype", false]], "edge_base_scale (deeptime.plots.network property)": [[189, "deeptime.plots.Network.edge_base_scale", false]], "edge_label() (deeptime.plots.network method)": [[189, "deeptime.plots.Network.edge_label", false]], "edge_labels (deeptime.plots.network property)": [[189, "deeptime.plots.Network.edge_labels", false]], "edmd (class in deeptime.decomposition)": [[47, "deeptime.decomposition.EDMD", false]], "edmdmodel (class in deeptime.decomposition)": [[48, "deeptime.decomposition.EDMDModel", false]], "effective_output_dimension() (deeptime.decomposition.covariancekoopmanmodel static method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.effective_output_dimension", false]], "eig_corr() (in module deeptime.numeric)": [[177, "deeptime.numeric.eig_corr", false]], "eigenvalue_sensitivity() (in module deeptime.markov.tools.analysis)": [[124, "deeptime.markov.tools.analysis.eigenvalue_sensitivity", false]], "eigenvalues() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.eigenvalues", false]], "eigenvalues() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.eigenvalues", false]], "eigenvalues() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.eigenvalues", false]], "eigenvalues() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.eigenvalues", false]], "eigenvalues() (in module deeptime.markov.tools.analysis)": [[125, "deeptime.markov.tools.analysis.eigenvalues", false]], "eigenvector_sensitivity() (in module deeptime.markov.tools.analysis)": [[126, "deeptime.markov.tools.analysis.eigenvector_sensitivity", false]], "eigenvectors() (in module deeptime.markov.tools.analysis)": [[127, "deeptime.markov.tools.analysis.eigenvectors", false]], "eigenvectors_left() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.eigenvectors_left", false]], "eigenvectors_left() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.eigenvectors_left", false]], "eigenvectors_left() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.eigenvectors_left", false]], "eigenvectors_left() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.eigenvectors_left", false]], "eigenvectors_left_obs (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.eigenvectors_left_obs", false]], "eigenvectors_right() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.eigenvectors_right", false]], "eigenvectors_right() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.eigenvectors_right", false]], "eigenvectors_right() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.eigenvectors_right", false]], "eigenvectors_right() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.eigenvectors_right", false]], "eigenvectors_right_obs (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.eigenvectors_right_obs", false]], "eigs() (in module deeptime.numeric)": [[178, "deeptime.numeric.eigs", false]], "ellipsoids (class in deeptime.data)": [[241, "deeptime.data.Ellipsoids", false]], "ellipsoids() (in module deeptime.data)": [[30, "deeptime.data.ellipsoids", false]], "empirical_koopman_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.empirical_koopman_model", false]], "empirical_koopman_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.empirical_koopman_model", false]], "empirical_koopman_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.empirical_koopman_model", false]], "empirical_koopman_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.empirical_koopman_model", false]], "encoder (deeptime.decomposition.deep.taemodel property)": [[61, "deeptime.decomposition.deep.TAEModel.encoder", false]], "encoder (deeptime.decomposition.deep.tvaemodel property)": [[64, "deeptime.decomposition.deep.TVAEModel.encoder", false]], "energy2d() (in module deeptime.util)": [[219, "deeptime.util.energy2d", false]], "energy2dplot (class in deeptime.plots)": [[188, "deeptime.plots.Energy2dPlot", false]], "energylandscape2d (class in deeptime.util)": [[201, "deeptime.util.EnergyLandscape2d", false]], "eps (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.eps", false]], "epsilon (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.epsilon", false]], "epsilon (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.epsilon", false]], "epsilon (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.epsilon", false]], "epsilon (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.epsilon", false]], "epsilon (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.epsilon", false]], "equations() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.equations", false]], "err_est (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.err_est", false]], "error_perturbation() (in module deeptime.markov.tools.estimation)": [[152, "deeptime.markov.tools.estimation.error_perturbation", false]], "estimates (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.estimates", false]], "estimates_samples (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.estimates_samples", false]], "estimator (class in deeptime.base)": [[1, "deeptime.base.Estimator", false]], "estimator_from_feature_trajectories() (deeptime.markov.msm.augmentedmsmestimator static method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.estimator_from_feature_trajectories", false]], "eval() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.eval", false]], "evaluate_loss() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.evaluate_loss", false]], "evaluate_loss() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.evaluate_loss", false]], "evaluate_samples() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.evaluate_samples", false]], "evaluate_samples() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.evaluate_samples", false]], "expectation() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.expectation", false]], "expectation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.expectation", false]], "expectation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.expectation", false]], "expectation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.expectation", false]], "expectation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.expectation", false]], "expectation() (in module deeptime.markov.tools.analysis)": [[128, "deeptime.markov.tools.analysis.expectation", false]], "expectation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.expectation_obs", false]], "expectation_sensitivity() (in module deeptime.markov.tools.analysis)": [[129, "deeptime.markov.tools.analysis.expectation_sensitivity", false]], "expectations_by_state (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.expectations_by_state", false]], "expected_counts() (in module deeptime.markov.tools.analysis)": [[130, "deeptime.markov.tools.analysis.expected_counts", false]], "expected_counts_stationary() (in module deeptime.markov.tools.analysis)": [[131, "deeptime.markov.tools.analysis.expected_counts_stationary", false]], "experimental_measurement_weights (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.experimental_measurement_weights", false]], "experimental_measurements (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.experimental_measurements", false]], "extra_repr() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.extra_repr", false]], "f (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.f", false]], "f (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.f", false]], "f (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.f", false]], "f (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.f", false]], "feature_component_correlation (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.feature_component_correlation", false]], "fetch_model() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.fetch_model", false]], "fetch_model() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.fetch_model", false]], "fetch_model() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fetch_model", false]], "fetch_model() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fetch_model", false]], "fetch_model() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.fetch_model", false]], "fetch_model() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.fetch_model", false]], "fetch_model() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fetch_model", false]], "fetch_model() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fetch_model", false]], "fetch_model() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fetch_model", false]], "fetch_model() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fetch_model", false]], "fetch_model() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fetch_model", false]], "fetch_model() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fetch_model", false]], "fetch_model() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.fetch_model", false]], "fetch_model() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fetch_model", false]], "fetch_model() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fetch_model", false]], "fetch_model() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fetch_model", false]], "fetch_model() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fetch_model", false]], "fetch_model() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.fetch_model", false]], "fetch_model() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fetch_model", false]], "fetch_model() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.fetch_model", false]], "fetch_model() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fetch_model", false]], "fetch_model() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fetch_model", false]], "fetch_model() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.fetch_model", false]], "fetch_model() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.fetch_model", false]], "fetch_model() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fetch_model", false]], "fetch_model() (deeptime.sindy.sindy method)": [[198, "deeptime.sindy.SINDy.fetch_model", false]], "fingerprint_correlation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.fingerprint_correlation", false]], "fingerprint_correlation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.fingerprint_correlation", false]], "fingerprint_correlation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.fingerprint_correlation", false]], "fingerprint_correlation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.fingerprint_correlation", false]], "fingerprint_correlation() (in module deeptime.markov.tools.analysis)": [[132, "deeptime.markov.tools.analysis.fingerprint_correlation", false]], "fingerprint_correlation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.fingerprint_correlation_obs", false]], "fingerprint_relaxation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.fingerprint_relaxation", false]], "fingerprint_relaxation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.fingerprint_relaxation", false]], "fingerprint_relaxation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.fingerprint_relaxation", false]], "fingerprint_relaxation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.fingerprint_relaxation", false]], "fingerprint_relaxation() (in module deeptime.markov.tools.analysis)": [[133, "deeptime.markov.tools.analysis.fingerprint_relaxation", false]], "fingerprint_relaxation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.fingerprint_relaxation_obs", false]], "finite_difference_coefficients() (in module deeptime.util.diff)": [[216, "deeptime.util.diff.finite_difference_coefficients", false]], "finite_difference_operator_midpoints() (in module deeptime.util.diff)": [[217, "deeptime.util.diff.finite_difference_operator_midpoints", false]], "fit() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.fit", false]], "fit() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.fit", false]], "fit() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fit", false]], "fit() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fit", false]], "fit() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.fit", false]], "fit() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.fit", false]], "fit() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fit", false]], "fit() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fit", false]], "fit() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fit", false]], "fit() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fit", false]], "fit() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fit", false]], "fit() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fit", false]], "fit() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.fit", false]], "fit() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fit", false]], "fit() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fit", false]], "fit() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit", false]], "fit() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit", false]], "fit() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.fit", false]], "fit() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.fit", false]], "fit() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.fit", false]], "fit() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fit", false]], "fit() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.fit", false]], "fit() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.fit", false]], "fit() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit", false]], "fit() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit", false]], "fit() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.fit", false]], "fit() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.fit", false]], "fit() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fit", false]], "fit() (deeptime.sindy.sindy method)": [[198, "deeptime.sindy.SINDy.fit", false]], "fit() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.fit", false]], "fit_fetch() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.fit_fetch", false]], "fit_fetch() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.fit_fetch", false]], "fit_fetch() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fit_fetch", false]], "fit_fetch() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fit_fetch", false]], "fit_fetch() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.fit_fetch", false]], "fit_fetch() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.fit_fetch", false]], "fit_fetch() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_fetch", false]], "fit_fetch() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_fetch", false]], "fit_fetch() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.fit_fetch", false]], "fit_fetch() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fit_fetch", false]], "fit_fetch() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.fit_fetch", false]], "fit_fetch() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_fetch", false]], "fit_fetch() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit_fetch", false]], "fit_fetch() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.fit_fetch", false]], "fit_fetch() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.fit_fetch", false]], "fit_fetch() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fit_fetch", false]], "fit_fetch() (deeptime.sindy.sindy method)": [[198, "deeptime.sindy.SINDy.fit_fetch", false]], "fit_from_counts() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_from_counts", false]], "fit_from_counts() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit_from_counts", false]], "fit_from_covariances() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_from_covariances", false]], "fit_from_covariances() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_from_covariances", false]], "fit_from_discrete_timeseries() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_from_discrete_timeseries", false]], "fit_from_discrete_timeseries() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.fit_from_discrete_timeseries", false]], "fit_from_msm() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.fit_from_msm", false]], "fit_from_timeseries() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_from_timeseries", false]], "fit_from_timeseries() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_from_timeseries", false]], "fit_transform() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.fit_transform", false]], "fit_transform() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.fit_transform", false]], "fit_transform() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.fit_transform", false]], "fit_transform() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.fit_transform", false]], "fit_transform() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.fit_transform", false]], "fit_transform() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.fit_transform", false]], "fit_transform() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.fit_transform", false]], "fit_transform() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.fit_transform", false]], "fit_transform() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.fit_transform", false]], "fit_transform() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.fit_transform", false]], "fit_transform() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.fit_transform", false]], "fit_transform() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.fit_transform", false]], "fit_transform() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.fit_transform", false]], "fixed_initial_distribution (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fixed_initial_distribution", false]], "fixed_seed (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.fixed_seed", false]], "fixed_seed (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.fixed_seed", false]], "fixed_stationary_distribution (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.fixed_stationary_distribution", false]], "float() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.float", false]], "flux() (deeptime.data.birthdeathchain method)": [[237, "deeptime.data.BirthDeathChain.flux", false]], "flux_consumers() (in module deeptime.markov.tools.flux)": [[166, "deeptime.markov.tools.flux.flux_consumers", false]], "flux_matrix() (in module deeptime.markov.tools.flux)": [[167, "deeptime.markov.tools.flux.flux_matrix", false]], "flux_producers() (in module deeptime.markov.tools.flux)": [[168, "deeptime.markov.tools.flux.flux_producers", false]], "flux_production() (in module deeptime.markov.tools.flux)": [[169, "deeptime.markov.tools.flux.flux_production", false]], "forward() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.forward", false]], "forward() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.forward", false]], "forward() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.forward", false]], "forward() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.forward", false]], "forward() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.forward", false]], "forward() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.forward", false]], "forward() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.forward", false]], "forward_committor (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.forward_committor", false]], "from_data() (in module deeptime.markov.hmm.init.gaussian)": [[101, "deeptime.markov.hmm.init.gaussian.from_data", false]], "from_numpy() (deeptime.util.data.trajectoriesdataset static method)": [[209, "deeptime.util.data.TrajectoriesDataset.from_numpy", false]], "from_trajectories() (deeptime.util.data.trajectorydataset static method)": [[210, "deeptime.util.data.TrajectoryDataset.from_trajectories", false]], "gather() (deeptime.util.quantitystatistics static method)": [[202, "deeptime.util.QuantityStatistics.gather", false]], "gather_stats() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.gather_stats", false]], "gather_stats() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.gather_stats", false]], "gaussiankernel (class in deeptime.kernels)": [[76, "deeptime.kernels.GaussianKernel", false]], "gaussianoutputmodel (class in deeptime.markov.hmm)": [[94, "deeptime.markov.hmm.GaussianOutputModel", false]], "generalizedgaussiankernel (class in deeptime.kernels)": [[77, "deeptime.kernels.GeneralizedGaussianKernel", false]], "generate() (deeptime.data.bickleyjet method)": [[236, "deeptime.data.BickleyJet.generate", false]], "generate_observation_trajectory() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.generate_observation_trajectory", false]], "generate_observation_trajectory() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.generate_observation_trajectory", false]], "generate_observation_trajectory() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.generate_observation_trajectory", false]], "get_buffer() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_buffer", false]], "get_extra_state() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_extra_state", false]], "get_feature_names() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.get_feature_names", false]], "get_feature_names_out() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.get_feature_names_out", false]], "get_metadata_routing() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.get_metadata_routing", false]], "get_parameter() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_parameter", false]], "get_params() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.get_params", false]], "get_params() (deeptime.base.model method)": [[2, "deeptime.base.Model.get_params", false]], "get_params() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.get_params", false]], "get_params() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.get_params", false]], "get_params() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.get_params", false]], "get_params() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.get_params", false]], "get_params() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.get_params", false]], "get_params() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.get_params", false]], "get_params() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.get_params", false]], "get_params() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.get_params", false]], "get_params() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.get_params", false]], "get_params() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.get_params", false]], "get_params() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.get_params", false]], "get_params() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.get_params", false]], "get_params() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.get_params", false]], "get_params() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.get_params", false]], "get_params() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.get_params", false]], "get_params() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.get_params", false]], "get_params() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.get_params", false]], "get_params() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.get_params", false]], "get_params() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.get_params", false]], "get_params() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.get_params", false]], "get_params() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.get_params", false]], "get_params() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.get_params", false]], "get_params() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.get_params", false]], "get_params() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.get_params", false]], "get_params() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.get_params", false]], "get_params() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.get_params", false]], "get_params() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.get_params", false]], "get_params() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.get_params", false]], "get_params() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.get_params", false]], "get_params() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.get_params", false]], "get_params() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.get_params", false]], "get_params() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.get_params", false]], "get_params() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.get_params", false]], "get_params() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.get_params", false]], "get_params() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.get_params", false]], "get_params() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.get_params", false]], "get_params() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.get_params", false]], "get_params() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.get_params", false]], "get_params() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.get_params", false]], "get_params() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.get_params", false]], "get_params() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.get_params", false]], "get_params() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.get_params", false]], "get_params() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.get_params", false]], "get_params() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.get_params", false]], "get_params() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.get_params", false]], "get_params() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.get_params", false]], "get_params() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.get_params", false]], "get_params() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.get_params", false]], "get_params() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.get_params", false]], "get_params() (deeptime.markov.pccamodel method)": [[83, "deeptime.markov.PCCAModel.get_params", false]], "get_params() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.get_params", false]], "get_params() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.get_params", false]], "get_params() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.get_params", false]], "get_params() (deeptime.sindy.sindy method)": [[198, "deeptime.sindy.SINDy.get_params", false]], "get_params() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.get_params", false]], "get_params() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.get_params", false]], "get_submodule() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.get_submodule", false]], "getter() (deeptime.util.decorators.cached_property method)": [[213, "deeptime.util.decorators.cached_property.getter", false]], "girsanov_reweighted_count_matrix() (in module deeptime.markov.tools.estimation)": [[153, "deeptime.markov.tools.estimation.girsanov_reweighted_count_matrix", false]], "gram() (deeptime.kernels.gaussiankernel method)": [[76, "deeptime.kernels.GaussianKernel.gram", false]], "gram() (deeptime.kernels.generalizedgaussiankernel method)": [[77, "deeptime.kernels.GeneralizedGaussianKernel.gram", false]], "gram() (deeptime.kernels.kernel method)": [[78, "deeptime.kernels.Kernel.gram", false]], "gram() (deeptime.kernels.laplaciankernel method)": [[79, "deeptime.kernels.LaplacianKernel.gram", false]], "gram() (deeptime.kernels.polynomialkernel method)": [[80, "deeptime.kernels.PolynomialKernel.gram", false]], "gram() (deeptime.kernels.torchgaussiankernel method)": [[81, "deeptime.kernels.TorchGaussianKernel.gram", false]], "gross_flux (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.gross_flux", false]], "h (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.h", false]], "h (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.h", false]], "h (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.h", false]], "h (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.h", false]], "half() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.half", false]], "handle_n_jobs() (in module deeptime.util.parallel)": [[220, "deeptime.util.parallel.handle_n_jobs", false]], "handle_progress_bar() (in module deeptime.util.platform)": [[221, "deeptime.util.platform.handle_progress_bar", false]], "has_count_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.has_count_model", false]], "has_count_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.has_count_model", false]], "has_count_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.has_count_model", false]], "has_count_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.has_count_model", false]], "has_errors (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.has_errors", false]], "has_model (deeptime.base.estimator property)": [[1, "deeptime.base.Estimator.has_model", false]], "has_model (deeptime.clustering.boxdiscretization property)": [[8, "deeptime.clustering.BoxDiscretization.has_model", false]], "has_model (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.has_model", false]], "has_model (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.has_model", false]], "has_model (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.has_model", false]], "has_model (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.has_model", false]], "has_model (deeptime.covariance.koopmanweightingestimator property)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.has_model", false]], "has_model (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.has_model", false]], "has_model (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.has_model", false]], "has_model (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.has_model", false]], "has_model (deeptime.decomposition.dmd property)": [[45, "deeptime.decomposition.DMD.has_model", false]], "has_model (deeptime.decomposition.edmd property)": [[47, "deeptime.decomposition.EDMD.has_model", false]], "has_model (deeptime.decomposition.kernelcca property)": [[51, "deeptime.decomposition.KernelCCA.has_model", false]], "has_model (deeptime.decomposition.kerneledmd property)": [[53, "deeptime.decomposition.KernelEDMD.has_model", false]], "has_model (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.has_model", false]], "has_model (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.has_model", false]], "has_model (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.has_model", false]], "has_model (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.has_model", false]], "has_model (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.has_model", false]], "has_model (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.has_model", false]], "has_model (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.has_model", false]], "has_model (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.has_model", false]], "has_model (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.has_model", false]], "has_model (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.has_model", false]], "has_model (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.has_model", false]], "has_model (deeptime.sindy.sindy property)": [[198, "deeptime.sindy.SINDy.has_model", false]], "has_potential_function (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.has_potential_function", false]], "has_potential_function (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.has_potential_function", false]], "has_potential_function (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.has_potential_function", false]], "has_potential_function (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.has_potential_function", false]], "has_samples (deeptime.util.validation.impliedtimescales property)": [[227, "deeptime.util.validation.ImpliedTimescales.has_samples", false]], "hidden_state_trajectories (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.hidden_state_trajectories", false]], "hidden_state_trajectories_samples (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.hidden_state_trajectories_samples", false]], "hiddenmarkovmodel (class in deeptime.markov.hmm)": [[95, "deeptime.markov.hmm.HiddenMarkovModel", false]], "hitting_probability() (in module deeptime.markov.tools.analysis)": [[134, "deeptime.markov.tools.analysis.hitting_probability", false]], "hmm() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.hmm", false]], "hmm() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.hmm", false]], "hmm() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.hmm", false]], "hmm() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.hmm", false]], "identity (class in deeptime.basis)": [[5, "deeptime.basis.Identity", false]], "ignore_outliers (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.ignore_outliers", false]], "ignore_outliers (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.ignore_outliers", false]], "ignore_outliers (deeptime.markov.hmm.outputmodel property)": [[97, "deeptime.markov.hmm.OutputModel.ignore_outliers", false]], "implied_timescales() (in module deeptime.util.validation)": [[229, "deeptime.util.validation.implied_timescales", false]], "impliedtimescales (class in deeptime.util.validation)": [[227, "deeptime.util.validation.ImpliedTimescales", false]], "indices_by_distribution() (in module deeptime.markov.sample)": [[118, "deeptime.markov.sample.indices_by_distribution", false]], "indices_by_sequence() (in module deeptime.markov.sample)": [[119, "deeptime.markov.sample.indices_by_sequence", false]], "indices_by_state() (in module deeptime.markov.sample)": [[120, "deeptime.markov.sample.indices_by_state", false]], "inertia (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.inertia", false]], "inertias (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.inertias", false]], "init_strategy (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.init_strategy", false]], "init_strategy (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.init_strategy", false]], "initial_centers (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.initial_centers", false]], "initial_centers (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.initial_centers", false]], "initial_count (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.initial_count", false]], "initial_distribution (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.initial_distribution", false]], "initial_distribution_prior (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.initial_distribution_prior", false]], "initial_hmm (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.initial_hmm", false]], "initial_model (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.initial_model", false]], "instantaneous_coefficients (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.instantaneous_coefficients", false]], "instantaneous_obs (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.instantaneous_obs", false]], "instantaneous_obs (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.instantaneous_obs", false]], "instantaneous_obs (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.instantaneous_obs", false]], "instantaneous_obs (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.instantaneous_obs", false]], "instantaneous_obs (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.instantaneous_obs", false]], "instantaneous_obs (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.instantaneous_obs", false]], "integrator (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.integrator", false]], "integrator (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.integrator", false]], "integrator (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.integrator", false]], "integrator (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.integrator", false]], "intercept (deeptime.sindy.sindymodel property)": [[199, "deeptime.sindy.SINDyModel.intercept", false]], "intermediate_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.intermediate_states", false]], "ipu() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.ipu", false]], "is_connected() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.is_connected", false]], "is_connected() (in module deeptime.markov.tools.analysis)": [[135, "deeptime.markov.tools.analysis.is_connected", false]], "is_connected() (in module deeptime.markov.tools.estimation)": [[154, "deeptime.markov.tools.estimation.is_connected", false]], "is_diagonal_matrix() (in module deeptime.numeric)": [[179, "deeptime.numeric.is_diagonal_matrix", false]], "is_full_model (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.is_full_model", false]], "is_lagged (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.is_lagged", false]], "is_rate_matrix() (in module deeptime.markov.tools.analysis)": [[136, "deeptime.markov.tools.analysis.is_rate_matrix", false]], "is_real (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.is_real", false]], "is_real (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.is_real", false]], "is_real (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.is_real", false]], "is_real (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.is_real", false]], "is_reversible() (in module deeptime.markov.tools.analysis)": [[137, "deeptime.markov.tools.analysis.is_reversible", false]], "is_square_matrix() (in module deeptime.numeric)": [[180, "deeptime.numeric.is_square_matrix", false]], "is_timelagged_dataset() (in module deeptime.util.types)": [[224, "deeptime.util.types.is_timelagged_dataset", false]], "is_torch_kernel() (in module deeptime.kernels)": [[82, "deeptime.kernels.is_torch_kernel", false]], "is_transition_matrix() (in module deeptime.markov.tools.analysis)": [[138, "deeptime.markov.tools.analysis.is_transition_matrix", false]], "is_valid_coordinate() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.is_valid_coordinate", false]], "k (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.k", false]], "kernel (class in deeptime.kernels)": [[78, "deeptime.kernels.Kernel", false]], "kernel (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.kernel", false]], "kernelcca (class in deeptime.decomposition)": [[51, "deeptime.decomposition.KernelCCA", false]], "kernelccamodel (class in deeptime.decomposition)": [[52, "deeptime.decomposition.KernelCCAModel", false]], "kerneledmd (class in deeptime.decomposition)": [[53, "deeptime.decomposition.KernelEDMD", false]], "kerneledmdmodel (class in deeptime.decomposition)": [[54, "deeptime.decomposition.KernelEDMDModel", false]], "kmeans (class in deeptime.clustering)": [[11, "deeptime.clustering.KMeans", false]], "kmeans_plusplus() (in module deeptime.clustering)": [[16, "deeptime.clustering.kmeans_plusplus", false]], "kmeansmodel (class in deeptime.clustering)": [[12, "deeptime.clustering.KMeansModel", false]], "koopman_matrix (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.koopman_matrix", false]], "koopman_matrix (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.koopman_matrix", false]], "koopman_matrix (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.koopman_matrix", false]], "koopman_matrix (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.koopman_matrix", false]], "koopman_matrix (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.koopman_matrix", false]], "koopman_matrix (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.koopman_matrix", false]], "koopman_matrix() (in module deeptime.decomposition.deep)": [[68, "deeptime.decomposition.deep.koopman_matrix", false]], "koopman_model (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.koopman_model", false]], "koopman_model (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.koopman_model", false]], "koopman_model (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.koopman_model", false]], "koopman_model (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.koopman_model", false]], "koopman_operator (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.koopman_operator", false]], "koopmanreweightedmsm (class in deeptime.markov.msm)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM", false]], "koopmanweightingestimator (class in deeptime.covariance)": [[20, "deeptime.covariance.KoopmanWeightingEstimator", false]], "koopmanweightingmodel (class in deeptime.covariance)": [[21, "deeptime.covariance.KoopmanWeightingModel", false]], "kvad (class in deeptime.decomposition)": [[49, "deeptime.decomposition.KVAD", false]], "kvad_score() (in module deeptime.decomposition.deep)": [[69, "deeptime.decomposition.deep.kvad_score", false]], "kvadmodel (class in deeptime.decomposition)": [[50, "deeptime.decomposition.KVADModel", false]], "l (deeptime.util.quantitystatistics property)": [[202, "deeptime.util.QuantityStatistics.L", false]], "l0 (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.L0", false]], "lagrangian_mult_log (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.lagrangian_mult_log", false]], "lagtime (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.lagtime", false]], "lagtime (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.lagtime", false]], "lagtime (deeptime.covariance.koopmanweightingestimator property)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.lagtime", false]], "lagtime (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.lagtime", false]], "lagtime (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.lagtime", false]], "lagtime (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.lagtime", false]], "lagtime (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.lagtime", false]], "lagtime (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.lagtime", false]], "lagtime (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.lagtime", false]], "lagtime (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.lagtime", false]], "lagtime (deeptime.markov.msm.bayesianmsmposterior property)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.lagtime", false]], "lagtime (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.lagtime", false]], "lagtime (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.lagtime", false]], "lagtime (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.lagtime", false]], "lagtime (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.lagtime", false]], "lagtime (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.lagtime", false]], "lagtime (deeptime.util.data.trajectoriesdataset property)": [[209, "deeptime.util.data.TrajectoriesDataset.lagtime", false]], "lagtimes (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.lagtimes", false]], "lagtimes (deeptime.util.validation.impliedtimescales property)": [[227, "deeptime.util.validation.ImpliedTimescales.lagtimes", false]], "laplaciankernel (class in deeptime.kernels)": [[79, "deeptime.kernels.LaplacianKernel", false]], "largest_connected_set() (in module deeptime.markov.tools.estimation)": [[155, "deeptime.markov.tools.estimation.largest_connected_set", false]], "largest_connected_submatrix() (in module deeptime.markov.tools.estimation)": [[156, "deeptime.markov.tools.estimation.largest_connected_submatrix", false]], "learning_rate (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.learning_rate", false]], "learning_rate (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.learning_rate", false]], "learning_rate (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.learning_rate", false]], "lifetimes (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.lifetimes", false]], "likelihood (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.likelihood", false]], "likelihoods (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.likelihoods", false]], "load_state_dict() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.load_state_dict", false]], "lobe (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.lobe", false]], "lobe (deeptime.decomposition.deep.vampnetmodel property)": [[66, "deeptime.decomposition.deep.VAMPNetModel.lobe", false]], "lobe_timelagged (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.lobe_timelagged", false]], "lobe_timelagged (deeptime.decomposition.deep.vampnetmodel property)": [[66, "deeptime.decomposition.deep.VAMPNetModel.lobe_timelagged", false]], "log_likelihood() (in module deeptime.markov.tools.estimation)": [[157, "deeptime.markov.tools.estimation.log_likelihood", false]], "lorenz_system() (in module deeptime.data)": [[31, "deeptime.data.lorenz_system", false]], "major_flux() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.major_flux", false]], "make_animation() (deeptime.data.pbfsimulator method)": [[242, "deeptime.data.PBFSimulator.make_animation", false]], "map_discrete_to_observations() (deeptime.data.ellipsoids method)": [[241, "deeptime.data.Ellipsoids.map_discrete_to_observations", false]], "map_observations_to_submodel() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.map_observations_to_submodel", false]], "markov_state_energies (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.markov_state_energies", false]], "markovstatemodel (class in deeptime.markov.msm)": [[107, "deeptime.markov.msm.MarkovStateModel", false]], "markovstatemodelcollection (class in deeptime.markov.msm)": [[108, "deeptime.markov.msm.MarkovStateModelCollection", false]], "max_cache (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.max_cache", false]], "max_centers (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.max_centers", false]], "max_iter (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.max_iter", false]], "max_iter (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.max_iter", false]], "max_n_processes (deeptime.util.validation.impliedtimescales property)": [[227, "deeptime.util.validation.ImpliedTimescales.max_n_processes", false]], "max_n_samples (deeptime.util.validation.impliedtimescales property)": [[227, "deeptime.util.validation.ImpliedTimescales.max_n_samples", false]], "maximumlikelihoodhmm (class in deeptime.markov.hmm)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM", false]], "maximumlikelihoodmsm (class in deeptime.markov.msm)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM", false]], "maxit (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.maxit", false]], "maxit_reversible (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.maxit_reversible", false]], "maxiter (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.maxiter", false]], "mean (deeptime.util.quantitystatistics property)": [[202, "deeptime.util.QuantityStatistics.mean", false]], "mean_0 (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.mean_0", false]], "mean_0 (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.mean_0", false]], "mean_t (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.mean_t", false]], "mean_t (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.mean_t", false]], "means (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.means", false]], "memberships (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.memberships", false]], "metastable_assignments (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_assignments", false]], "metastable_distributions (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_distributions", false]], "metastable_distributions (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.metastable_distributions", false]], "metastable_from_data() (in module deeptime.markov.hmm.init.discrete)": [[98, "deeptime.markov.hmm.init.discrete.metastable_from_data", false]], "metastable_from_msm() (in module deeptime.markov.hmm.init.discrete)": [[99, "deeptime.markov.hmm.init.discrete.metastable_from_msm", false]], "metastable_memberships (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_memberships", false]], "metastable_sets (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.metastable_sets", false]], "metric (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.metric", false]], "metric (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.metric", false]], "metric (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.metric", false]], "metric (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.metric", false]], "metric (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.metric", false]], "metric (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.metric", false]], "metricregistry (class in deeptime.clustering)": [[13, "deeptime.clustering.MetricRegistry", false]], "metrics (in module deeptime.clustering)": [[17, "deeptime.clustering.metrics", false]], "mfpt (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.mfpt", false]], "mfpt() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.mfpt", false]], "mfpt() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.mfpt", false]], "mfpt() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.mfpt", false]], "mfpt() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.mfpt", false]], "mfpt() (in module deeptime.markov.tools.analysis)": [[139, "deeptime.markov.tools.analysis.mfpt", false]], "mfpt() (in module deeptime.markov.tools.flux)": [[170, "deeptime.markov.tools.flux.mfpt", false]], "mfpt_sensitivity() (in module deeptime.markov.tools.analysis)": [[140, "deeptime.markov.tools.analysis.mfpt_sensitivity", false]], "minibatchkmeans (class in deeptime.clustering)": [[14, "deeptime.clustering.MiniBatchKMeans", false]], "model (class in deeptime.base)": [[2, "deeptime.base.Model", false]], "model (deeptime.base.estimator property)": [[1, "deeptime.base.Estimator.model", false]], "model (deeptime.clustering.boxdiscretization property)": [[8, "deeptime.clustering.BoxDiscretization.model", false]], "model (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.model", false]], "model (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.model", false]], "model (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.model", false]], "model (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.model", false]], "model (deeptime.covariance.koopmanweightingestimator property)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.model", false]], "model (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.model", false]], "model (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.model", false]], "model (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.model", false]], "model (deeptime.decomposition.dmd property)": [[45, "deeptime.decomposition.DMD.model", false]], "model (deeptime.decomposition.edmd property)": [[47, "deeptime.decomposition.EDMD.model", false]], "model (deeptime.decomposition.kernelcca property)": [[51, "deeptime.decomposition.KernelCCA.model", false]], "model (deeptime.decomposition.kerneledmd property)": [[53, "deeptime.decomposition.KernelEDMD.model", false]], "model (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.model", false]], "model (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.model", false]], "model (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.model", false]], "model (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.model", false]], "model (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.model", false]], "model (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.model", false]], "model (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.model", false]], "model (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.model", false]], "model (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.model", false]], "model (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.model", false]], "model (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.model", false]], "model (deeptime.sindy.sindy property)": [[198, "deeptime.sindy.SINDy.model", false]], "modified_state_counts_log (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.modified_state_counts_log", false]], "module": [[246, "module-deeptime.basis", false], [247, "module-deeptime.clustering", false], [248, "module-deeptime.covariance", false], [249, "module-deeptime.data", false], [250, "module-deeptime.decomposition", false], [251, "module-deeptime.kernels", false], [254, "module-deeptime.markov.tools.analysis", false], [254, "module-deeptime.markov.tools.estimation", false], [254, "module-deeptime.markov.tools.flux", false], [255, "module-deeptime.numeric", false], [256, "module-deeptime.plots", false], [257, "module-deeptime.sindy", false], [258, "module-deeptime.util", false]], "module_available() (in module deeptime.util.platform)": [[222, "deeptime.util.platform.module_available", false]], "modules() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.modules", false]], "moments_block() (in module deeptime.covariance)": [[235, "deeptime.covariance.moments_block", false]], "moments_xx() (in module deeptime.covariance)": [[233, "deeptime.covariance.moments_XX", false]], "moments_xxxy() (in module deeptime.covariance)": [[234, "deeptime.covariance.moments_XXXY", false]], "monomials (class in deeptime.basis)": [[6, "deeptime.basis.Monomials", false]], "msm (deeptime.data.birthdeathchain property)": [[237, "deeptime.data.BirthDeathChain.msm", false]], "msm (deeptime.data.drunkardswalk property)": [[240, "deeptime.data.DrunkardsWalk.msm", false]], "msm (deeptime.data.ellipsoids property)": [[241, "deeptime.data.Ellipsoids.msm", false]], "msm_collection (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.msm_collection", false]], "mtia() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.mtia", false]], "n_clusters (deeptime.clustering.boxdiscretizationmodel property)": [[9, "deeptime.clustering.BoxDiscretizationModel.n_clusters", false]], "n_clusters (deeptime.clustering.clustermodel property)": [[10, "deeptime.clustering.ClusterModel.n_clusters", false]], "n_clusters (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.n_clusters", false]], "n_clusters (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.n_clusters", false]], "n_clusters (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.n_clusters", false]], "n_clusters (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.n_clusters", false]], "n_connected_msms (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.n_connected_msms", false]], "n_eigenvalues (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.n_eigenvalues", false]], "n_eigenvalues (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.n_eigenvalues", false]], "n_eigenvalues (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.n_eigenvalues", false]], "n_eigenvalues (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.n_eigenvalues", false]], "n_hidden_states (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.n_hidden_states", false]], "n_hidden_states (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.n_hidden_states", false]], "n_hidden_states (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.n_hidden_states", false]], "n_hidden_states (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.n_hidden_states", false]], "n_hidden_states (deeptime.markov.hmm.outputmodel property)": [[97, "deeptime.markov.hmm.OutputModel.n_hidden_states", false]], "n_jobs (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.n_jobs", false]], "n_jobs (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.n_jobs", false]], "n_jobs (deeptime.clustering.regularspace property)": [[15, "deeptime.clustering.RegularSpace.n_jobs", false]], "n_lagtimes (deeptime.util.validation.impliedtimescales property)": [[227, "deeptime.util.validation.ImpliedTimescales.n_lagtimes", false]], "n_markov_states (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.n_markov_states", false]], "n_metastable (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.n_metastable", false]], "n_nodes (deeptime.plots.network property)": [[189, "deeptime.plots.Network.n_nodes", false]], "n_observable_states (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.n_observable_states", false]], "n_observable_states (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.n_observable_states", false]], "n_observable_states (deeptime.markov.hmm.outputmodel property)": [[97, "deeptime.markov.hmm.OutputModel.n_observable_states", false]], "n_observation_states (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.n_observation_states", false]], "n_particles (deeptime.data.pbfsimulator property)": [[242, "deeptime.data.PBFSimulator.n_particles", false]], "n_samples (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.n_samples", false]], "n_samples() (deeptime.util.validation.impliedtimescales method)": [[227, "deeptime.util.validation.ImpliedTimescales.n_samples", false]], "n_states (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.n_states", false]], "n_states (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.n_states", false]], "n_states (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.n_states", false]], "n_states (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.n_states", false]], "n_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.n_states", false]], "n_states (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.n_states", false]], "n_states (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.n_states", false]], "n_states_full (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.n_states_full", false]], "n_steps (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.n_steps", false]], "n_steps (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.n_steps", false]], "n_steps (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.n_steps", false]], "n_steps (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.n_steps", false]], "n_therm_states (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.n_therm_states", false]], "named_buffers() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_buffers", false]], "named_children() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_children", false]], "named_modules() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_modules", false]], "named_parameters() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.named_parameters", false]], "ncov (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.ncov", false]], "ncv (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.ncv", false]], "ncv (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.ncv", false]], "ncv (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.ncv", false]], "ncv (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.ncv", false]], "net_flux (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.net_flux", false]], "netflux() (deeptime.data.birthdeathchain method)": [[237, "deeptime.data.BirthDeathChain.netflux", false]], "network (class in deeptime.plots)": [[189, "deeptime.plots.Network", false]], "node_sizes (deeptime.plots.network property)": [[189, "deeptime.plots.Network.node_sizes", false]], "nonempty_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.nonempty_obs", false]], "normalize() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.normalize", false]], "number_of_states() (in module deeptime.markov)": [[114, "deeptime.markov.number_of_states", false]], "observable (class in deeptime.basis)": [[7, "deeptime.basis.Observable", false]], "observable_transform (deeptime.decomposition.kvad property)": [[49, "deeptime.decomposition.KVAD.observable_transform", false]], "observation_symbols (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.observation_symbols", false]], "observation_symbols_full (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.observation_symbols_full", false]], "observations() (deeptime.data.ellipsoids method)": [[241, "deeptime.data.Ellipsoids.observations", false]], "oom_components (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_components", false]], "oom_eigenvalues (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_eigenvalues", false]], "oom_evaluator (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_evaluator", false]], "oom_information_state_vector (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_information_state_vector", false]], "oom_rank (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_rank", false]], "oom_timescales (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.oom_timescales", false]], "oomreweightedmsm (class in deeptime.markov.msm)": [[110, "deeptime.markov.msm.OOMReweightedMSM", false]], "operator (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.operator", false]], "operator (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.operator", false]], "operator (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.operator", false]], "operator (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.operator", false]], "operator (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.operator", false]], "operator (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.operator", false]], "operator_inverse (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.operator_inverse", false]], "operator_inverse (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.operator_inverse", false]], "operator_inverse (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.operator_inverse", false]], "operator_inverse (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.operator_inverse", false]], "operator_inverse (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.operator_inverse", false]], "operator_inverse (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.operator_inverse", false]], "optimizer (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.optimizer", false]], "optimizer (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.optimizer", false]], "optimizer (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.optimizer", false]], "optimizer_state (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.optimizer_state", false]], "ornstein_uhlenbeck() (in module deeptime.data)": [[32, "deeptime.data.ornstein_uhlenbeck", false]], "output_dimension (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.output_dimension", false]], "output_dimension (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.output_dimension", false]], "output_dimension (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.output_dimension", false]], "output_dimension (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.output_dimension", false]], "output_dimension (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.output_dimension", false]], "output_dimension (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.output_dimension", false]], "output_model (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.output_model", false]], "output_probabilities (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.output_probabilities", false]], "output_probabilities (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.output_probabilities", false]], "outputmodel (class in deeptime.markov.hmm)": [[97, "deeptime.markov.hmm.OutputModel", false]], "parameters() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.parameters", false]], "partial_fit() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.partial_fit", false]], "partial_fit() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.partial_fit", false]], "partial_fit() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.partial_fit", false]], "partial_fit() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.partial_fit", false]], "partial_fit() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.partial_fit", false]], "partial_fit() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.partial_fit", false]], "partial_fit() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.partial_fit", false]], "pathways() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.pathways", false]], "pathways() (in module deeptime.markov.tools.flux)": [[171, "deeptime.markov.tools.flux.pathways", false]], "pbfsimulator (class in deeptime.data)": [[242, "deeptime.data.PBFSimulator", false]], "pcca() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.pcca", false]], "pcca() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.pcca", false]], "pcca() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.pcca", false]], "pcca() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.pcca", false]], "pcca() (in module deeptime.markov)": [[115, "deeptime.markov.pcca", false]], "pcca_memberships() (in module deeptime.markov.tools.analysis)": [[141, "deeptime.markov.tools.analysis.pcca_memberships", false]], "pccamodel (class in deeptime.markov)": [[83, "deeptime.markov.PCCAModel", false]], "periodic_bc (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.periodic_bc", false]], "plot() (deeptime.plots.network method)": [[189, "deeptime.plots.Network.plot", false]], "plot() (deeptime.util.energylandscape2d method)": [[201, "deeptime.util.EnergyLandscape2d.plot", false]], "plot() (deeptime.util.validation.chapmankolmogorovtest method)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.plot", false]], "plot() (deeptime.util.validation.impliedtimescales method)": [[227, "deeptime.util.validation.ImpliedTimescales.plot", false]], "plot_2d_map() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.plot_2d_map", false]], "plot_adjacency() (in module deeptime.plots)": [[190, "deeptime.plots.plot_adjacency", false]], "plot_ck_test() (in module deeptime.plots)": [[191, "deeptime.plots.plot_ck_test", false]], "plot_contour2d_from_xyz() (in module deeptime.plots)": [[192, "deeptime.plots.plot_contour2d_from_xyz", false]], "plot_density() (in module deeptime.plots)": [[193, "deeptime.plots.plot_density", false]], "plot_energy2d() (in module deeptime.plots)": [[194, "deeptime.plots.plot_energy2d", false]], "plot_flux() (in module deeptime.plots)": [[195, "deeptime.plots.plot_flux", false]], "plot_implied_timescales() (in module deeptime.plots)": [[196, "deeptime.plots.plot_implied_timescales", false]], "plot_markov_model() (in module deeptime.plots)": [[197, "deeptime.plots.plot_markov_model", false]], "plot_network() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.plot_network", false]], "plot_path() (deeptime.data.drunkardswalk static method)": [[240, "deeptime.data.DrunkardsWalk.plot_path", false]], "plotting_function() (in module deeptime.util.decorators)": [[215, "deeptime.util.decorators.plotting_function", false]], "polynomialkernel (class in deeptime.kernels)": [[80, "deeptime.kernels.PolynomialKernel", false]], "pos (deeptime.plots.network property)": [[189, "deeptime.plots.Network.pos", false]], "position_based_fluids() (in module deeptime.data)": [[33, "deeptime.data.position_based_fluids", false]], "potential() (deeptime.data.bickleyjet method)": [[236, "deeptime.data.BickleyJet.potential", false]], "potential() (deeptime.data.customsystem method)": [[238, "deeptime.data.CustomSystem.potential", false]], "potential() (deeptime.data.timedependentsystem method)": [[243, "deeptime.data.TimeDependentSystem.potential", false]], "potential() (deeptime.data.timeindependentsystem method)": [[244, "deeptime.data.TimeIndependentSystem.potential", false]], "predict() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.predict", false]], "predict() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.predict", false]], "predictions (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.predictions", false]], "predictions_samples (deeptime.util.validation.chapmankolmogorovtest property)": [[226, "deeptime.util.validation.ChapmanKolmogorovTest.predictions_samples", false]], "print() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.print", false]], "prinz_potential() (in module deeptime.data)": [[34, "deeptime.data.prinz_potential", false]], "prior (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.prior", false]], "prior (deeptime.markov.hmm.discreteoutputmodel property)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.prior", false]], "prior (deeptime.markov.msm.bayesianmsmposterior property)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.prior", false]], "prior_const() (in module deeptime.markov.tools.estimation)": [[158, "deeptime.markov.tools.estimation.prior_const", false]], "prior_neighbor() (in module deeptime.markov.tools.estimation)": [[159, "deeptime.markov.tools.estimation.prior_neighbor", false]], "prior_rev() (in module deeptime.markov.tools.estimation)": [[160, "deeptime.markov.tools.estimation.prior_rev", false]], "progresscallback (class in deeptime.util.callbacks)": [[203, "deeptime.util.callbacks.ProgressCallback", false]], "propagate() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.propagate", false]], "propagate() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.propagate", false]], "propagate() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.propagate", false]], "propagate() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.propagate", false]], "propagate() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.propagate", false]], "propagate() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.propagate", false]], "quadruple_well() (in module deeptime.data)": [[35, "deeptime.data.quadruple_well", false]], "quadruple_well_asymmetric() (in module deeptime.data)": [[36, "deeptime.data.quadruple_well_asymmetric", false]], "quantitystatistics (class in deeptime.util)": [[202, "deeptime.util.QuantityStatistics", false]], "r (deeptime.util.quantitystatistics property)": [[202, "deeptime.util.QuantityStatistics.R", false]], "r0 (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.r0", false]], "random_guess() (in module deeptime.markov.hmm.init.discrete)": [[100, "deeptime.markov.hmm.init.discrete.random_guess", false]], "random_state (deeptime.data.ellipsoids property)": [[241, "deeptime.data.Ellipsoids.random_state", false]], "rate (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.rate", false]], "rate() (deeptime.data.birthdeathchain method)": [[237, "deeptime.data.BirthDeathChain.rate", false]], "rate() (in module deeptime.markov.tools.flux)": [[172, "deeptime.markov.tools.flux.rate", false]], "rate_matrix() (in module deeptime.markov.tools.estimation)": [[161, "deeptime.markov.tools.estimation.rate_matrix", false]], "rdl_decomposition() (in module deeptime.markov.tools.analysis)": [[142, "deeptime.markov.tools.analysis.rdl_decomposition", false]], "reactive_flux() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.reactive_flux", false]], "reactive_flux() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.reactive_flux", false]], "reactive_flux() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.reactive_flux", false]], "reactive_flux() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.reactive_flux", false]], "reactive_flux() (in module deeptime.markov)": [[116, "deeptime.markov.reactive_flux", false]], "reactiveflux (class in deeptime.markov)": [[84, "deeptime.markov.ReactiveFlux", false]], "register() (deeptime.clustering.metricregistry method)": [[13, "deeptime.clustering.MetricRegistry.register", false]], "register_backward_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_backward_hook", false]], "register_buffer() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_buffer", false]], "register_forward_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_forward_hook", false]], "register_forward_pre_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_forward_pre_hook", false]], "register_full_backward_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_full_backward_hook", false]], "register_full_backward_pre_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_full_backward_pre_hook", false]], "register_load_state_dict_post_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_load_state_dict_post_hook", false]], "register_load_state_dict_pre_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_load_state_dict_pre_hook", false]], "register_module() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_module", false]], "register_parameter() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_parameter", false]], "register_state_dict_post_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_state_dict_post_hook", false]], "register_state_dict_pre_hook() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.register_state_dict_pre_hook", false]], "regularspace (class in deeptime.clustering)": [[15, "deeptime.clustering.RegularSpace", false]], "relaxation() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.relaxation", false]], "relaxation() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.relaxation", false]], "relaxation() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.relaxation", false]], "relaxation() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.relaxation", false]], "relaxation() (in module deeptime.markov.tools.analysis)": [[143, "deeptime.markov.tools.analysis.relaxation", false]], "relaxation_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.relaxation_obs", false]], "remove_data_mean (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.remove_data_mean", false]], "requires_grad_() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.requires_grad_", false]], "restrict_to_largest_connected_set() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.restrict_to_largest_connected_set", false]], "restrict_to_submodel() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.restrict_to_submodel", false]], "reversible (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.reversible", false]], "reversible (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.reversible", false]], "reversible (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.reversible", false]], "reversible (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.reversible", false]], "reversible (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.reversible", false]], "reversible (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.reversible", false]], "reversible (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.reversible", false]], "reversible (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.reversible", false]], "reversible (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.reversible", false]], "reversible (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.reversible", false]], "reversible (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.reversible", false]], "reversible (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.reversible", false]], "run() (deeptime.data.pbfsimulator method)": [[242, "deeptime.data.PBFSimulator.run", false]], "sample() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.sample", false]], "sample() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.sample", false]], "sample() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.sample", false]], "sample() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.sample", false]], "sample_by_observation_probabilities() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.sample_by_observation_probabilities", false]], "samples (deeptime.markov.hmm.bayesianhmmposterior property)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.samples", false]], "samples (deeptime.markov.msm.bayesianmsmposterior property)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.samples", false]], "samples_for_process() (deeptime.util.validation.impliedtimescales method)": [[227, "deeptime.util.validation.ImpliedTimescales.samples_for_process", false]], "scaling (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.scaling", false]], "scaling (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.scaling", false]], "scaling (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.scaling", false]], "schatten_norm() (in module deeptime.numeric)": [[181, "deeptime.numeric.schatten_norm", false]], "score() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.score", false]], "score() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.score", false]], "score() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.score", false]], "score() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.score", false]], "score() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.score", false]], "score() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.score", false]], "score() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.score", false]], "score() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.score", false]], "score_method (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.score_method", false]], "seed (deeptime.data.ellipsoids property)": [[241, "deeptime.data.Ellipsoids.seed", false]], "select() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.select", false]], "selected_count_fraction (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.selected_count_fraction", false]], "selected_state_fraction (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.selected_state_fraction", false]], "set_extra_state() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.set_extra_state", false]], "set_fit_request() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.set_fit_request", false]], "set_params() (deeptime.base.estimator method)": [[1, "deeptime.base.Estimator.set_params", false]], "set_params() (deeptime.base.model method)": [[2, "deeptime.base.Model.set_params", false]], "set_params() (deeptime.clustering.boxdiscretization method)": [[8, "deeptime.clustering.BoxDiscretization.set_params", false]], "set_params() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.set_params", false]], "set_params() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.set_params", false]], "set_params() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.set_params", false]], "set_params() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.set_params", false]], "set_params() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.set_params", false]], "set_params() (deeptime.clustering.regularspace method)": [[15, "deeptime.clustering.RegularSpace.set_params", false]], "set_params() (deeptime.covariance.covariance method)": [[18, "deeptime.covariance.Covariance.set_params", false]], "set_params() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.set_params", false]], "set_params() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.set_params", false]], "set_params() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.set_params", false]], "set_params() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.set_params", false]], "set_params() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.set_params", false]], "set_params() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.set_params", false]], "set_params() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.set_params", false]], "set_params() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.set_params", false]], "set_params() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.set_params", false]], "set_params() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.set_params", false]], "set_params() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.set_params", false]], "set_params() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.set_params", false]], "set_params() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.set_params", false]], "set_params() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.set_params", false]], "set_params() (deeptime.decomposition.kernelcca method)": [[51, "deeptime.decomposition.KernelCCA.set_params", false]], "set_params() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.set_params", false]], "set_params() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.set_params", false]], "set_params() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.set_params", false]], "set_params() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.set_params", false]], "set_params() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.set_params", false]], "set_params() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.set_params", false]], "set_params() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.set_params", false]], "set_params() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.set_params", false]], "set_params() (deeptime.markov.hmm.bayesianhmm method)": [[91, "deeptime.markov.hmm.BayesianHMM.set_params", false]], "set_params() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.set_params", false]], "set_params() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.set_params", false]], "set_params() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.set_params", false]], "set_params() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.set_params", false]], "set_params() (deeptime.markov.hmm.maximumlikelihoodhmm method)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.set_params", false]], "set_params() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.set_params", false]], "set_params() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.set_params", false]], "set_params() (deeptime.markov.msm.augmentedmsmestimator method)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.set_params", false]], "set_params() (deeptime.markov.msm.bayesianmsm method)": [[104, "deeptime.markov.msm.BayesianMSM.set_params", false]], "set_params() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.set_params", false]], "set_params() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.set_params", false]], "set_params() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.set_params", false]], "set_params() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.set_params", false]], "set_params() (deeptime.markov.msm.maximumlikelihoodmsm method)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.set_params", false]], "set_params() (deeptime.markov.msm.oomreweightedmsm method)": [[110, "deeptime.markov.msm.OOMReweightedMSM.set_params", false]], "set_params() (deeptime.markov.msm.tram method)": [[111, "deeptime.markov.msm.TRAM.set_params", false]], "set_params() (deeptime.markov.msm.trammodel method)": [[113, "deeptime.markov.msm.TRAMModel.set_params", false]], "set_params() (deeptime.markov.pccamodel method)": [[83, "deeptime.markov.PCCAModel.set_params", false]], "set_params() (deeptime.markov.reactiveflux method)": [[84, "deeptime.markov.ReactiveFlux.set_params", false]], "set_params() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.set_params", false]], "set_params() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.set_params", false]], "set_params() (deeptime.sindy.sindy method)": [[198, "deeptime.sindy.SINDy.set_params", false]], "set_params() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.set_params", false]], "set_params() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.set_params", false]], "set_score_request() (deeptime.sindy.stlsq method)": [[200, "deeptime.sindy.STLSQ.set_score_request", false]], "set_submodule() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.set_submodule", false]], "setflags() (deeptime.base.dataset method)": [[0, "deeptime.base.Dataset.setflags", false]], "setflags() (deeptime.markov.msm.tramdataset method)": [[112, "deeptime.markov.msm.TRAMDataset.setflags", false]], "setflags() (deeptime.util.data.concatdataset method)": [[206, "deeptime.util.data.ConcatDataset.setflags", false]], "setflags() (deeptime.util.data.timelaggedconcatdataset method)": [[207, "deeptime.util.data.TimeLaggedConcatDataset.setflags", false]], "setflags() (deeptime.util.data.timelaggeddataset method)": [[208, "deeptime.util.data.TimeLaggedDataset.setflags", false]], "setflags() (deeptime.util.data.trajectoriesdataset method)": [[209, "deeptime.util.data.TrajectoriesDataset.setflags", false]], "setflags() (deeptime.util.data.trajectorydataset method)": [[210, "deeptime.util.data.TrajectoryDataset.setflags", false]], "sets (deeptime.markov.pccamodel property)": [[83, "deeptime.markov.PCCAModel.sets", false]], "setter() (deeptime.util.decorators.cached_property method)": [[213, "deeptime.util.decorators.cached_property.setter", false]], "setup_optimizer() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.setup_optimizer", false]], "setup_optimizer() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.setup_optimizer", false]], "setup_optimizer() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.setup_optimizer", false]], "share_memory() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.share_memory", false]], "sigma (deeptime.kernels.gaussiankernel property)": [[76, "deeptime.kernels.GaussianKernel.sigma", false]], "sigma (deeptime.kernels.torchgaussiankernel property)": [[81, "deeptime.kernels.TorchGaussianKernel.sigma", false]], "sigmas (deeptime.markov.hmm.gaussianoutputmodel property)": [[94, "deeptime.markov.hmm.GaussianOutputModel.sigmas", false]], "simulate() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.simulate", false]], "simulate() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.simulate", false]], "simulate() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.simulate", false]], "simulate() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.simulate", false]], "simulate() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.simulate", false]], "simulate() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.simulate", false]], "simulate_oscillatory_force() (deeptime.data.pbfsimulator method)": [[242, "deeptime.data.PBFSimulator.simulate_oscillatory_force", false]], "simulate_trajectories() (deeptime.data.doublewelldiscrete method)": [[239, "deeptime.data.DoubleWellDiscrete.simulate_trajectories", false]], "simulate_trajectory() (deeptime.data.doublewelldiscrete method)": [[239, "deeptime.data.DoubleWellDiscrete.simulate_trajectory", false]], "sindy (class in deeptime.sindy)": [[198, "deeptime.sindy.SINDy", false]], "sindymodel (class in deeptime.sindy)": [[199, "deeptime.sindy.SINDyModel", false]], "singular_values (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.singular_values", false]], "singular_vectors_left (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.singular_vectors_left", false]], "singular_vectors_right (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.singular_vectors_right", false]], "sliding_window() (in module deeptime.util.data)": [[211, "deeptime.util.data.sliding_window", false]], "sort_eigs() (in module deeptime.numeric)": [[182, "deeptime.numeric.sort_eigs", false]], "source_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.source_states", false]], "sparse (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.sparse", false]], "sparse (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.sparse", false]], "sparse (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.sparse", false]], "sparse (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.sparse", false]], "sparse (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.sparse", false]], "sparse (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.sparse", false]], "sparse (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.sparse", false]], "sparse (deeptime.markov.msm.oomreweightedmsm property)": [[110, "deeptime.markov.msm.OOMReweightedMSM.sparse", false]], "sparse (deeptime.markov.msm.tram property)": [[111, "deeptime.markov.msm.TRAM.sparse", false]], "sparse (deeptime.markov.transitioncountestimator property)": [[85, "deeptime.markov.TransitionCountEstimator.sparse", false]], "sparse_mode (deeptime.covariance.covariance property)": [[18, "deeptime.covariance.Covariance.sparse_mode", false]], "spd_eig() (in module deeptime.numeric)": [[183, "deeptime.numeric.spd_eig", false]], "spd_inv() (in module deeptime.numeric)": [[184, "deeptime.numeric.spd_inv", false]], "spd_inv_split() (in module deeptime.numeric)": [[185, "deeptime.numeric.spd_inv_split", false]], "spd_inv_sqrt() (in module deeptime.numeric)": [[186, "deeptime.numeric.spd_inv_sqrt", false]], "spd_truncated_svd() (in module deeptime.numeric)": [[187, "deeptime.numeric.spd_truncated_svd", false]], "sqrt_model() (in module deeptime.data)": [[37, "deeptime.data.sqrt_model", false]], "state_colors (deeptime.plots.network property)": [[189, "deeptime.plots.Network.state_colors", false]], "state_counts (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.state_counts", false]], "state_dict() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.state_dict", false]], "state_fraction (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.state_fraction", false]], "state_fractions (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.state_fractions", false]], "state_histogram (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_histogram", false]], "state_histogram_full (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_histogram_full", false]], "state_labels (deeptime.plots.network property)": [[189, "deeptime.plots.Network.state_labels", false]], "state_probabilities (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.state_probabilities", false]], "state_sizes (deeptime.plots.network property)": [[189, "deeptime.plots.Network.state_sizes", false]], "state_symbols (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_symbols", false]], "state_symbols() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.state_symbols", false]], "state_symbols_with_blank (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.state_symbols_with_blank", false]], "state_to_coordinate() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.state_to_coordinate", false]], "states (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.states", false]], "states_largest() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.states_largest", false]], "states_populous() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.states_populous", false]], "states_to_symbols() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.states_to_symbols", false]], "stationary (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.stationary", false]], "stationary (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.stationary", false]], "stationary (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.stationary", false]], "stationary (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.stationary", false]], "stationary (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.stationary", false]], "stationary (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.stationary", false]], "stationary_distribution (deeptime.data.birthdeathchain property)": [[237, "deeptime.data.BirthDeathChain.stationary_distribution", false]], "stationary_distribution (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.stationary_distribution", false]], "stationary_distribution (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.stationary_distribution", false]], "stationary_distribution (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.stationary_distribution", false]], "stationary_distribution (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.stationary_distribution", false]], "stationary_distribution (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.stationary_distribution", false]], "stationary_distribution() (in module deeptime.markov.tools.analysis)": [[144, "deeptime.markov.tools.analysis.stationary_distribution", false]], "stationary_distribution_constraint (deeptime.markov.msm.bayesianmsm property)": [[104, "deeptime.markov.msm.BayesianMSM.stationary_distribution_constraint", false]], "stationary_distribution_constraint (deeptime.markov.msm.maximumlikelihoodmsm property)": [[109, "deeptime.markov.msm.MaximumLikelihoodMSM.stationary_distribution_constraint", false]], "stationary_distribution_obs (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.stationary_distribution_obs", false]], "stationary_distribution_sensitivity() (in module deeptime.markov.tools.analysis)": [[145, "deeptime.markov.tools.analysis.stationary_distribution_sensitivity", false]], "std (deeptime.util.quantitystatistics property)": [[202, "deeptime.util.QuantityStatistics.std", false]], "stlsq (class in deeptime.sindy)": [[200, "deeptime.sindy.STLSQ", false]], "store_hidden (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.store_hidden", false]], "stride (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.stride", false]], "stride (deeptime.markov.hmm.maximumlikelihoodhmm property)": [[96, "deeptime.markov.hmm.MaximumLikelihoodHMM.stride", false]], "submodel() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.submodel", false]], "submodel() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.submodel", false]], "submodel() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.submodel", false]], "submodel() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel", false]], "submodel() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.submodel", false]], "submodel() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.submodel", false]], "submodel() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.submodel", false]], "submodel() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.submodel", false]], "submodel() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.submodel", false]], "submodel() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.submodel", false]], "submodel() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.submodel", false]], "submodel_disconnect() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel_disconnect", false]], "submodel_largest() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.submodel_largest", false]], "submodel_largest() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel_largest", false]], "submodel_largest() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.submodel_largest", false]], "submodel_populous() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.submodel_populous", false]], "submodel_populous() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.submodel_populous", false]], "subsets (deeptime.util.data.concatdataset property)": [[206, "deeptime.util.data.ConcatDataset.subsets", false]], "subsets (deeptime.util.data.timelaggedconcatdataset property)": [[207, "deeptime.util.data.TimeLaggedConcatDataset.subsets", false]], "subsets (deeptime.util.data.trajectoriesdataset property)": [[209, "deeptime.util.data.TrajectoriesDataset.subsets", false]], "support_confidence (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.support_confidence", false]], "supports_progress_interface() (in module deeptime.util.callbacks)": [[204, "deeptime.util.callbacks.supports_progress_interface", false]], "swissroll_model() (in module deeptime.data)": [[38, "deeptime.data.swissroll_model", false]], "sym_inverse() (in module deeptime.decomposition.deep)": [[70, "deeptime.decomposition.deep.sym_inverse", false]], "symbols_to_states() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.symbols_to_states", false]], "symmetrized (deeptime.covariance.covariancemodel property)": [[19, "deeptime.covariance.CovarianceModel.symmetrized", false]], "tae (class in deeptime.decomposition.deep)": [[60, "deeptime.decomposition.deep.TAE", false]], "taemodel (class in deeptime.decomposition.deep)": [[61, "deeptime.decomposition.deep.TAEModel", false]], "target_states (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.target_states", false]], "therm_state_energies (deeptime.markov.msm.trammodel property)": [[113, "deeptime.markov.msm.TRAMModel.therm_state_energies", false]], "thomas_attractor() (in module deeptime.data)": [[39, "deeptime.data.thomas_attractor", false]], "tica (class in deeptime.decomposition)": [[55, "deeptime.decomposition.TICA", false]], "time_dependent (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.time_dependent", false]], "time_dependent (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.time_dependent", false]], "time_dependent (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.time_dependent", false]], "time_dependent (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.time_dependent", false]], "time_dependent_quintuple_well() (in module deeptime.data)": [[40, "deeptime.data.time_dependent_quintuple_well", false]], "timedependentsystem (class in deeptime.data)": [[243, "deeptime.data.TimeDependentSystem", false]], "timeindependentsystem (class in deeptime.data)": [[244, "deeptime.data.TimeIndependentSystem", false]], "timelagged_coefficients (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.timelagged_coefficients", false]], "timelagged_obs (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.timelagged_obs", false]], "timelagged_obs (deeptime.decomposition.edmdmodel property)": [[48, "deeptime.decomposition.EDMDModel.timelagged_obs", false]], "timelagged_obs (deeptime.decomposition.kernelccamodel property)": [[52, "deeptime.decomposition.KernelCCAModel.timelagged_obs", false]], "timelagged_obs (deeptime.decomposition.kerneledmdmodel property)": [[54, "deeptime.decomposition.KernelEDMDModel.timelagged_obs", false]], "timelagged_obs (deeptime.decomposition.kvadmodel property)": [[50, "deeptime.decomposition.KVADModel.timelagged_obs", false]], "timelagged_obs (deeptime.decomposition.transferoperatormodel property)": [[56, "deeptime.decomposition.TransferOperatorModel.timelagged_obs", false]], "timelaggedconcatdataset (class in deeptime.util.data)": [[207, "deeptime.util.data.TimeLaggedConcatDataset", false]], "timelaggeddataset (class in deeptime.util.data)": [[208, "deeptime.util.data.TimeLaggedDataset", false]], "timescale_sensitivity() (in module deeptime.markov.tools.analysis)": [[146, "deeptime.markov.tools.analysis.timescale_sensitivity", false]], "timescales() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.timescales", false]], "timescales() (deeptime.markov.hmm.bayesianhmmposterior method)": [[92, "deeptime.markov.hmm.BayesianHMMPosterior.timescales", false]], "timescales() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.timescales", false]], "timescales() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.timescales", false]], "timescales() (deeptime.markov.msm.bayesianmsmposterior method)": [[105, "deeptime.markov.msm.BayesianMSMPosterior.timescales", false]], "timescales() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.timescales", false]], "timescales() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.timescales", false]], "timescales() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.timescales", false]], "timescales() (in module deeptime.markov.tools.analysis)": [[147, "deeptime.markov.tools.analysis.timescales", false]], "timescales_for_process() (deeptime.util.validation.impliedtimescales method)": [[227, "deeptime.util.validation.ImpliedTimescales.timescales_for_process", false]], "timeshifted_split() (in module deeptime.util.data)": [[212, "deeptime.util.data.timeshifted_split", false]], "tmatrix_cov() (in module deeptime.markov.tools.estimation)": [[162, "deeptime.markov.tools.estimation.tmatrix_cov", false]], "tmatrix_metropolis1d() (in module deeptime.data)": [[41, "deeptime.data.tmatrix_metropolis1d", false]], "tmatrix_sampler() (in module deeptime.markov.tools.estimation)": [[163, "deeptime.markov.tools.estimation.tmatrix_sampler", false]], "to() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.to", false]], "to_3d() (deeptime.data.bickleyjet static method)": [[236, "deeptime.data.BickleyJet.to_3d", false]], "to_dataset() (in module deeptime.util.types)": [[225, "deeptime.util.types.to_dataset", false]], "to_empty() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.to_empty", false]], "to_koopman_model() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.to_koopman_model", false]], "to_koopman_model() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.to_koopman_model", false]], "to_koopman_model() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.to_koopman_model", false]], "to_koopman_model() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.to_koopman_model", false]], "to_netflux() (in module deeptime.markov.tools.flux)": [[173, "deeptime.markov.tools.flux.to_netflux", false]], "to_state_probability_trajectory() (deeptime.markov.hmm.discreteoutputmodel method)": [[93, "deeptime.markov.hmm.DiscreteOutputModel.to_state_probability_trajectory", false]], "to_state_probability_trajectory() (deeptime.markov.hmm.gaussianoutputmodel method)": [[94, "deeptime.markov.hmm.GaussianOutputModel.to_state_probability_trajectory", false]], "to_state_probability_trajectory() (deeptime.markov.hmm.outputmodel method)": [[97, "deeptime.markov.hmm.OutputModel.to_state_probability_trajectory", false]], "tolerance (deeptime.clustering.kmeans property)": [[11, "deeptime.clustering.KMeans.tolerance", false]], "tolerance (deeptime.clustering.kmeansmodel property)": [[12, "deeptime.clustering.KMeansModel.tolerance", false]], "tolerance (deeptime.clustering.minibatchkmeans property)": [[14, "deeptime.clustering.MiniBatchKMeans.tolerance", false]], "torchgaussiankernel (class in deeptime.kernels)": [[81, "deeptime.kernels.TorchGaussianKernel", false]], "total_count (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.total_count", false]], "total_flux (deeptime.markov.reactiveflux property)": [[84, "deeptime.markov.ReactiveFlux.total_flux", false]], "total_flux() (in module deeptime.markov.tools.flux)": [[174, "deeptime.markov.tools.flux.total_flux", false]], "totalflux() (deeptime.data.birthdeathchain method)": [[237, "deeptime.data.BirthDeathChain.totalflux", false]], "train() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.train", false]], "train_losses (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.train_losses", false]], "train_losses (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.train_losses", false]], "train_scores (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.train_scores", false]], "trajectories (deeptime.util.data.trajectoriesdataset property)": [[209, "deeptime.util.data.TrajectoriesDataset.trajectories", false]], "trajectoriesdataset (class in deeptime.util.data)": [[209, "deeptime.util.data.TrajectoriesDataset", false]], "trajectory() (deeptime.data.bickleyjet method)": [[236, "deeptime.data.BickleyJet.trajectory", false]], "trajectory() (deeptime.data.customsystem method)": [[238, "deeptime.data.CustomSystem.trajectory", false]], "trajectory() (deeptime.data.timedependentsystem method)": [[243, "deeptime.data.TimeDependentSystem.trajectory", false]], "trajectory() (deeptime.data.timeindependentsystem method)": [[244, "deeptime.data.TimeIndependentSystem.trajectory", false]], "trajectorydataset (class in deeptime.util.data)": [[210, "deeptime.util.data.TrajectoryDataset", false]], "tram (class in deeptime.markov.msm)": [[111, "deeptime.markov.msm.TRAM", false]], "tram_input (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.tram_input", false]], "tramdataset (class in deeptime.markov.msm)": [[112, "deeptime.markov.msm.TRAMDataset", false]], "trammodel (class in deeptime.markov.msm)": [[113, "deeptime.markov.msm.TRAMModel", false]], "transferoperatormodel (class in deeptime.decomposition)": [[56, "deeptime.decomposition.TransferOperatorModel", false]], "transform() (deeptime.base.transformer method)": [[3, "deeptime.base.Transformer.transform", false]], "transform() (deeptime.basis.concatenation method)": [[4, "deeptime.basis.Concatenation.transform", false]], "transform() (deeptime.basis.identity method)": [[5, "deeptime.basis.Identity.transform", false]], "transform() (deeptime.basis.monomials method)": [[6, "deeptime.basis.Monomials.transform", false]], "transform() (deeptime.basis.observable method)": [[7, "deeptime.basis.Observable.transform", false]], "transform() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.transform", false]], "transform() (deeptime.clustering.clustermodel method)": [[10, "deeptime.clustering.ClusterModel.transform", false]], "transform() (deeptime.clustering.kmeans method)": [[11, "deeptime.clustering.KMeans.transform", false]], "transform() (deeptime.clustering.kmeansmodel method)": [[12, "deeptime.clustering.KMeansModel.transform", false]], "transform() (deeptime.clustering.minibatchkmeans method)": [[14, "deeptime.clustering.MiniBatchKMeans.transform", false]], "transform() (deeptime.covariance.koopmanweightingestimator method)": [[20, "deeptime.covariance.KoopmanWeightingEstimator.transform", false]], "transform() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.transform", false]], "transform() (deeptime.covariance.whiteningtransform method)": [[230, "deeptime.covariance.WhiteningTransform.transform", false]], "transform() (deeptime.decomposition.covariancekoopmanmodel method)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.transform", false]], "transform() (deeptime.decomposition.deep.tae method)": [[60, "deeptime.decomposition.deep.TAE.transform", false]], "transform() (deeptime.decomposition.deep.taemodel method)": [[61, "deeptime.decomposition.deep.TAEModel.transform", false]], "transform() (deeptime.decomposition.deep.tvae method)": [[62, "deeptime.decomposition.deep.TVAE.transform", false]], "transform() (deeptime.decomposition.deep.tvaemodel method)": [[64, "deeptime.decomposition.deep.TVAEModel.transform", false]], "transform() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.transform", false]], "transform() (deeptime.decomposition.deep.vampnetmodel method)": [[66, "deeptime.decomposition.deep.VAMPNetModel.transform", false]], "transform() (deeptime.decomposition.dmd method)": [[45, "deeptime.decomposition.DMD.transform", false]], "transform() (deeptime.decomposition.dmdmodel method)": [[46, "deeptime.decomposition.DMDModel.transform", false]], "transform() (deeptime.decomposition.edmd method)": [[47, "deeptime.decomposition.EDMD.transform", false]], "transform() (deeptime.decomposition.edmdmodel method)": [[48, "deeptime.decomposition.EDMDModel.transform", false]], "transform() (deeptime.decomposition.kernelccamodel method)": [[52, "deeptime.decomposition.KernelCCAModel.transform", false]], "transform() (deeptime.decomposition.kerneledmd method)": [[53, "deeptime.decomposition.KernelEDMD.transform", false]], "transform() (deeptime.decomposition.kerneledmdmodel method)": [[54, "deeptime.decomposition.KernelEDMDModel.transform", false]], "transform() (deeptime.decomposition.kvad method)": [[49, "deeptime.decomposition.KVAD.transform", false]], "transform() (deeptime.decomposition.kvadmodel method)": [[50, "deeptime.decomposition.KVADModel.transform", false]], "transform() (deeptime.decomposition.tica method)": [[55, "deeptime.decomposition.TICA.transform", false]], "transform() (deeptime.decomposition.transferoperatormodel method)": [[56, "deeptime.decomposition.TransferOperatorModel.transform", false]], "transform() (deeptime.decomposition.vamp method)": [[57, "deeptime.decomposition.VAMP.transform", false]], "transform() (deeptime.markov.transitioncountestimator method)": [[85, "deeptime.markov.TransitionCountEstimator.transform", false]], "transform() (deeptime.sindy.sindymodel method)": [[199, "deeptime.sindy.SINDyModel.transform", false]], "transform_discrete_trajectories_to_observed_symbols() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transform_discrete_trajectories_to_observed_symbols", false]], "transform_discrete_trajectories_to_submodel() (deeptime.markov.transitioncountmodel method)": [[86, "deeptime.markov.TransitionCountModel.transform_discrete_trajectories_to_submodel", false]], "transform_onehot() (deeptime.clustering.boxdiscretizationmodel method)": [[9, "deeptime.clustering.BoxDiscretizationModel.transform_onehot", false]], "transform_to_density() (deeptime.data.pbfsimulator method)": [[242, "deeptime.data.PBFSimulator.transform_to_density", false]], "transformer (class in deeptime.base)": [[3, "deeptime.base.Transformer", false]], "transition_counts (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transition_counts", false]], "transition_counts (deeptime.markov.msm.tramdataset property)": [[112, "deeptime.markov.msm.TRAMDataset.transition_counts", false]], "transition_matrix (deeptime.data.birthdeathchain property)": [[237, "deeptime.data.BirthDeathChain.transition_matrix", false]], "transition_matrix (deeptime.data.doublewelldiscrete property)": [[239, "deeptime.data.DoubleWellDiscrete.transition_matrix", false]], "transition_matrix (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.transition_matrix", false]], "transition_matrix (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.transition_matrix", false]], "transition_matrix (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.transition_matrix", false]], "transition_matrix (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.transition_matrix", false]], "transition_matrix() (in module deeptime.markov.tools.estimation)": [[164, "deeptime.markov.tools.estimation.transition_matrix", false]], "transition_matrix_obs() (deeptime.markov.hmm.hiddenmarkovmodel method)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transition_matrix_obs", false]], "transition_matrix_prior (deeptime.markov.hmm.bayesianhmm property)": [[91, "deeptime.markov.hmm.BayesianHMM.transition_matrix_prior", false]], "transition_matrix_tolerance (deeptime.markov.msm.augmentedmsm property)": [[102, "deeptime.markov.msm.AugmentedMSM.transition_matrix_tolerance", false]], "transition_matrix_tolerance (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.transition_matrix_tolerance", false]], "transition_matrix_tolerance (deeptime.markov.msm.markovstatemodel property)": [[107, "deeptime.markov.msm.MarkovStateModel.transition_matrix_tolerance", false]], "transition_matrix_tolerance (deeptime.markov.msm.markovstatemodelcollection property)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.transition_matrix_tolerance", false]], "transition_model (deeptime.markov.hmm.hiddenmarkovmodel property)": [[95, "deeptime.markov.hmm.HiddenMarkovModel.transition_model", false]], "transitioncountestimator (class in deeptime.markov)": [[85, "deeptime.markov.TransitionCountEstimator", false]], "transitioncountmodel (class in deeptime.markov)": [[86, "deeptime.markov.TransitionCountModel", false]], "triple_well_1d() (in module deeptime.data)": [[42, "deeptime.data.triple_well_1d", false]], "triple_well_2d() (in module deeptime.data)": [[43, "deeptime.data.triple_well_2d", false]], "tv_derivative() (in module deeptime.util.diff)": [[218, "deeptime.util.diff.tv_derivative", false]], "tvae (class in deeptime.decomposition.deep)": [[62, "deeptime.decomposition.deep.TVAE", false]], "tvaeencoder (class in deeptime.decomposition.deep)": [[63, "deeptime.decomposition.deep.TVAEEncoder", false]], "tvaemodel (class in deeptime.decomposition.deep)": [[64, "deeptime.decomposition.deep.TVAEModel", false]], "twostep_count_matrices (deeptime.markov.msm.koopmanreweightedmsm property)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.twostep_count_matrices", false]], "type() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.type", false]], "u0 (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.U0", false]], "uncertainties (deeptime.markov.msm.augmentedmsmestimator property)": [[103, "deeptime.markov.msm.AugmentedMSMEstimator.uncertainties", false]], "update_stationary_distribution() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.update_stationary_distribution", false]], "update_stationary_distribution() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.update_stationary_distribution", false]], "update_stationary_distribution() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.update_stationary_distribution", false]], "update_stationary_distribution() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.update_stationary_distribution", false]], "update_transition_matrix() (deeptime.markov.msm.augmentedmsm method)": [[102, "deeptime.markov.msm.AugmentedMSM.update_transition_matrix", false]], "update_transition_matrix() (deeptime.markov.msm.koopmanreweightedmsm method)": [[106, "deeptime.markov.msm.KoopmanReweightedMSM.update_transition_matrix", false]], "update_transition_matrix() (deeptime.markov.msm.markovstatemodel method)": [[107, "deeptime.markov.msm.MarkovStateModel.update_transition_matrix", false]], "update_transition_matrix() (deeptime.markov.msm.markovstatemodelcollection method)": [[108, "deeptime.markov.msm.MarkovStateModelCollection.update_transition_matrix", false]], "valid_impls (deeptime.kernels.gaussiankernel attribute)": [[76, "deeptime.kernels.GaussianKernel.valid_impls", false]], "valid_impls (deeptime.kernels.torchgaussiankernel attribute)": [[81, "deeptime.kernels.TorchGaussianKernel.valid_impls", false]], "validate() (deeptime.decomposition.deep.vampnet method)": [[65, "deeptime.decomposition.deep.VAMPNet.validate", false]], "validation_losses (deeptime.decomposition.deep.tae property)": [[60, "deeptime.decomposition.deep.TAE.validation_losses", false]], "validation_losses (deeptime.decomposition.deep.tvae property)": [[62, "deeptime.decomposition.deep.TVAE.validation_losses", false]], "validation_scores (deeptime.decomposition.deep.vampnet property)": [[65, "deeptime.decomposition.deep.VAMPNet.validation_scores", false]], "vamp (class in deeptime.decomposition)": [[57, "deeptime.decomposition.VAMP", false]], "vamp_score() (in module deeptime.decomposition)": [[73, "deeptime.decomposition.vamp_score", false]], "vamp_score() (in module deeptime.decomposition.deep)": [[71, "deeptime.decomposition.deep.vamp_score", false]], "vamp_score_cv() (in module deeptime.decomposition)": [[74, "deeptime.decomposition.vamp_score_cv", false]], "vamp_score_data() (in module deeptime.decomposition)": [[75, "deeptime.decomposition.vamp_score_data", false]], "vampnet (class in deeptime.decomposition.deep)": [[65, "deeptime.decomposition.deep.VAMPNet", false]], "vampnet_loss() (in module deeptime.decomposition.deep)": [[72, "deeptime.decomposition.deep.vampnet_loss", false]], "vampnetmodel (class in deeptime.decomposition.deep)": [[66, "deeptime.decomposition.deep.VAMPNetModel", false]], "var_cutoff (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.var_cutoff", false]], "var_cutoff (deeptime.decomposition.tica property)": [[55, "deeptime.decomposition.TICA.var_cutoff", false]], "var_cutoff (deeptime.decomposition.vamp property)": [[57, "deeptime.decomposition.VAMP.var_cutoff", false]], "vectorized_f (deeptime.data.bickleyjet property)": [[236, "deeptime.data.BickleyJet.vectorized_f", false]], "vectorized_f (deeptime.data.customsystem property)": [[238, "deeptime.data.CustomSystem.vectorized_f", false]], "vectorized_f (deeptime.data.timedependentsystem property)": [[243, "deeptime.data.TimeDependentSystem.vectorized_f", false]], "vectorized_f (deeptime.data.timeindependentsystem property)": [[244, "deeptime.data.TimeIndependentSystem.vectorized_f", false]], "visited_set (deeptime.markov.transitioncountmodel property)": [[86, "deeptime.markov.TransitionCountModel.visited_set", false]], "walk() (deeptime.data.drunkardswalk method)": [[240, "deeptime.data.DrunkardsWalk.walk", false]], "weights() (deeptime.covariance.koopmanweightingmodel method)": [[21, "deeptime.covariance.KoopmanWeightingModel.weights", false]], "weights_input (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.weights_input", false]], "whiten() (deeptime.covariance.covariancemodel method)": [[19, "deeptime.covariance.CovarianceModel.whiten", false]], "whitening_rank_0 (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.whitening_rank_0", false]], "whitening_rank_t (deeptime.decomposition.covariancekoopmanmodel property)": [[44, "deeptime.decomposition.CovarianceKoopmanModel.whitening_rank_t", false]], "whitening_transformation (deeptime.covariance.koopmanweightingmodel property)": [[21, "deeptime.covariance.KoopmanWeightingModel.whitening_transformation", false]], "whiteningtransform (class in deeptime.covariance)": [[230, "deeptime.covariance.WhiteningTransform", false]], "with_traceback() (deeptime.numeric.zerorankerror method)": [[175, "deeptime.numeric.ZeroRankError.with_traceback", false]], "xpu() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.xpu", false]], "zero_grad() (deeptime.decomposition.deep.tvaeencoder method)": [[63, "deeptime.decomposition.deep.TVAEEncoder.zero_grad", false]], "zerorankerror": [[175, "deeptime.numeric.ZeroRankError", false]]}, "objects": {"deeptime": [[246, 3, 0, "-", "basis"], [247, 3, 0, "-", "clustering"], [248, 3, 0, "-", "covariance"], [249, 3, 0, "-", "data"], [250, 3, 0, "-", "decomposition"], [251, 3, 0, "-", "kernels"], [255, 3, 0, "-", "numeric"], [256, 3, 0, "-", "plots"], [257, 3, 0, "-", "sindy"], [258, 3, 0, "-", "util"]], "deeptime.base": [[0, 0, 1, "", "Dataset"], [1, 0, 1, "", "Estimator"], [2, 0, 1, "", "Model"], [3, 0, 1, "", "Transformer"]], "deeptime.base.Dataset": [[0, 1, 1, "", "setflags"]], "deeptime.base.Estimator": [[1, 1, 1, "", "fetch_model"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "fit_fetch"], [1, 1, 1, "", "get_params"], [1, 2, 1, "", "has_model"], [1, 2, 1, "", "model"], [1, 1, 1, "", "set_params"]], "deeptime.base.Model": [[2, 1, 1, "", "copy"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "set_params"]], "deeptime.base.Transformer": [[3, 1, 1, "", "__call__"], [3, 1, 1, "", "transform"]], "deeptime.basis": [[4, 0, 1, "", "Concatenation"], [5, 0, 1, "", "Identity"], [6, 0, 1, "", "Monomials"], [7, 0, 1, "", "Observable"]], "deeptime.basis.Concatenation": [[4, 1, 1, "", "__call__"], [4, 1, 1, "", "transform"]], "deeptime.basis.Identity": [[5, 1, 1, "", "__call__"], [5, 1, 1, "", "transform"]], "deeptime.basis.Monomials": [[6, 1, 1, "", "__call__"], [6, 1, 1, "", "get_feature_names"], [6, 1, 1, "", "get_feature_names_out"], [6, 1, 1, "", "transform"]], "deeptime.basis.Observable": [[7, 1, 1, "", "__call__"], [7, 1, 1, "", "transform"]], "deeptime.clustering": [[8, 0, 1, "", "BoxDiscretization"], [9, 0, 1, "", "BoxDiscretizationModel"], [10, 0, 1, "", "ClusterModel"], [11, 0, 1, "", "KMeans"], [12, 0, 1, "", "KMeansModel"], [13, 0, 1, "", "MetricRegistry"], [14, 0, 1, "", "MiniBatchKMeans"], [15, 0, 1, "", "RegularSpace"], [16, 4, 1, "", "kmeans_plusplus"], [17, 5, 1, "", "metrics"]], "deeptime.clustering.BoxDiscretization": [[8, 1, 1, "", "fetch_model"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "fit_fetch"], [8, 1, 1, "", "get_params"], [8, 2, 1, "", "has_model"], [8, 2, 1, "", "model"], [8, 1, 1, "", "set_params"]], "deeptime.clustering.BoxDiscretizationModel": [[9, 1, 1, "", "__call__"], [9, 2, 1, "", "cluster_centers"], [9, 2, 1, "", "converged"], [9, 1, 1, "", "copy"], [9, 1, 1, "", "get_params"], [9, 2, 1, "", "metric"], [9, 2, 1, "", "n_clusters"], [9, 1, 1, "", "set_params"], [9, 1, 1, "", "transform"], [9, 1, 1, "", "transform_onehot"]], "deeptime.clustering.ClusterModel": [[10, 1, 1, "", "__call__"], [10, 2, 1, "", "cluster_centers"], [10, 2, 1, "", "converged"], [10, 1, 1, "", "copy"], [10, 1, 1, "", "get_params"], [10, 2, 1, "", "metric"], [10, 2, 1, "", "n_clusters"], [10, 1, 1, "", "set_params"], [10, 1, 1, "", "transform"]], "deeptime.clustering.KMeans": [[11, 1, 1, "", "__call__"], [11, 1, 1, "", "fetch_model"], [11, 1, 1, "", "fit"], [11, 1, 1, "", "fit_fetch"], [11, 1, 1, "", "fit_transform"], [11, 2, 1, "", "fixed_seed"], [11, 1, 1, "", "get_params"], [11, 2, 1, "", "has_model"], [11, 2, 1, "", "init_strategy"], [11, 2, 1, "", "initial_centers"], [11, 2, 1, "", "max_iter"], [11, 2, 1, "", "metric"], [11, 2, 1, "", "model"], [11, 2, 1, "", "n_clusters"], [11, 2, 1, "", "n_jobs"], [11, 1, 1, "", "set_params"], [11, 2, 1, "", "tolerance"], [11, 1, 1, "", "transform"]], "deeptime.clustering.KMeansModel": [[12, 1, 1, "", "__call__"], [12, 2, 1, "", "cluster_centers"], [12, 2, 1, "", "converged"], [12, 1, 1, "", "copy"], [12, 1, 1, "", "get_params"], [12, 2, 1, "", "inertia"], [12, 2, 1, "", "inertias"], [12, 2, 1, "", "metric"], [12, 2, 1, "", "n_clusters"], [12, 1, 1, "", "score"], [12, 1, 1, "", "set_params"], [12, 2, 1, "", "tolerance"], [12, 1, 1, "", "transform"]], "deeptime.clustering.MetricRegistry": [[13, 2, 1, "", "available"], [13, 1, 1, "", "register"]], "deeptime.clustering.MiniBatchKMeans": [[14, 1, 1, "", "__call__"], [14, 1, 1, "", "fetch_model"], [14, 1, 1, "", "fit"], [14, 1, 1, "", "fit_fetch"], [14, 1, 1, "", "fit_transform"], [14, 2, 1, "", "fixed_seed"], [14, 1, 1, "", "get_params"], [14, 2, 1, "", "has_model"], [14, 2, 1, "", "init_strategy"], [14, 2, 1, "", "initial_centers"], [14, 2, 1, "", "max_iter"], [14, 2, 1, "", "metric"], [14, 2, 1, "", "model"], [14, 2, 1, "", "n_clusters"], [14, 2, 1, "", "n_jobs"], [14, 1, 1, "", "partial_fit"], [14, 1, 1, "", "set_params"], [14, 2, 1, "", "tolerance"], [14, 1, 1, "", "transform"]], "deeptime.clustering.RegularSpace": [[15, 2, 1, "", "dmin"], [15, 1, 1, "", "fetch_model"], [15, 1, 1, "", "fit"], [15, 1, 1, "", "fit_fetch"], [15, 1, 1, "", "get_params"], [15, 2, 1, "", "has_model"], [15, 2, 1, "", "max_centers"], [15, 2, 1, "", "metric"], [15, 2, 1, "", "model"], [15, 2, 1, "", "n_clusters"], [15, 2, 1, "", "n_jobs"], [15, 1, 1, "", "partial_fit"], [15, 1, 1, "", "set_params"]], "deeptime.covariance": [[18, 0, 1, "", "Covariance"], [19, 0, 1, "", "CovarianceModel"], [20, 0, 1, "", "KoopmanWeightingEstimator"], [21, 0, 1, "", "KoopmanWeightingModel"], [230, 0, 1, "", "WhiteningTransform"], [231, 4, 1, "", "covar"], [232, 4, 1, "", "covars"], [233, 4, 1, "", "moments_XX"], [234, 4, 1, "", "moments_XXXY"], [235, 4, 1, "", "moments_block"]], "deeptime.covariance.Covariance": [[18, 2, 1, "", "bessels_correction"], [18, 2, 1, "", "compute_c00"], [18, 2, 1, "", "compute_c0t"], [18, 2, 1, "", "compute_ctt"], [18, 2, 1, "", "diag_only"], [18, 1, 1, "", "fetch_model"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "fit_fetch"], [18, 1, 1, "", "get_params"], [18, 2, 1, "", "has_model"], [18, 2, 1, "", "is_lagged"], [18, 2, 1, "", "lagtime"], [18, 2, 1, "", "model"], [18, 2, 1, "", "ncov"], [18, 1, 1, "", "partial_fit"], [18, 2, 1, "", "remove_data_mean"], [18, 2, 1, "", "reversible"], [18, 1, 1, "", "set_params"], [18, 2, 1, "", "sparse_mode"]], "deeptime.covariance.CovarianceModel": [[19, 2, 1, "", "bessels_correction"], [19, 1, 1, "", "copy"], [19, 2, 1, "", "cov_00"], [19, 2, 1, "", "cov_0t"], [19, 2, 1, "", "cov_tt"], [19, 2, 1, "", "data_mean_removed"], [19, 1, 1, "", "get_params"], [19, 2, 1, "", "lagtime"], [19, 2, 1, "", "mean_0"], [19, 2, 1, "", "mean_t"], [19, 1, 1, "", "set_params"], [19, 2, 1, "", "symmetrized"], [19, 1, 1, "", "whiten"]], "deeptime.covariance.KoopmanWeightingEstimator": [[20, 1, 1, "", "__call__"], [20, 1, 1, "", "fetch_model"], [20, 1, 1, "", "fit"], [20, 1, 1, "", "fit_fetch"], [20, 1, 1, "", "fit_transform"], [20, 1, 1, "", "get_params"], [20, 2, 1, "", "has_model"], [20, 2, 1, "", "lagtime"], [20, 2, 1, "", "model"], [20, 1, 1, "", "partial_fit"], [20, 1, 1, "", "set_params"], [20, 1, 1, "", "transform"]], "deeptime.covariance.KoopmanWeightingModel": [[21, 1, 1, "", "__call__"], [21, 2, 1, "", "const_weight_input"], [21, 1, 1, "", "copy"], [21, 2, 1, "", "covariances"], [21, 1, 1, "", "get_params"], [21, 2, 1, "", "koopman_operator"], [21, 1, 1, "", "set_params"], [21, 1, 1, "", "transform"], [21, 1, 1, "", "weights"], [21, 2, 1, "", "weights_input"], [21, 2, 1, "", "whitening_transformation"]], "deeptime.covariance.WhiteningTransform": [[230, 1, 1, "", "__call__"], [230, 1, 1, "", "transform"]], "deeptime.data": [[236, 0, 1, "", "BickleyJet"], [237, 0, 1, "", "BirthDeathChain"], [238, 0, 1, "", "CustomSystem"], [239, 0, 1, "", "DoubleWellDiscrete"], [240, 0, 1, "", "DrunkardsWalk"], [241, 0, 1, "", "Ellipsoids"], [242, 0, 1, "", "PBFSimulator"], [243, 0, 1, "", "TimeDependentSystem"], [244, 0, 1, "", "TimeIndependentSystem"], [22, 4, 1, "", "abc_flow"], [23, 4, 1, "", "bickley_jet"], [24, 4, 1, "", "birth_death_chain"], [25, 4, 1, "", "custom_ode"], [26, 4, 1, "", "custom_sde"], [27, 4, 1, "", "double_well_2d"], [28, 4, 1, "", "double_well_discrete"], [29, 4, 1, "", "drunkards_walk"], [30, 4, 1, "", "ellipsoids"], [31, 4, 1, "", "lorenz_system"], [32, 4, 1, "", "ornstein_uhlenbeck"], [33, 4, 1, "", "position_based_fluids"], [34, 4, 1, "", "prinz_potential"], [35, 4, 1, "", "quadruple_well"], [36, 4, 1, "", "quadruple_well_asymmetric"], [37, 4, 1, "", "sqrt_model"], [38, 4, 1, "", "swissroll_model"], [39, 4, 1, "", "thomas_attractor"], [40, 4, 1, "", "time_dependent_quintuple_well"], [41, 4, 1, "", "tmatrix_metropolis1d"], [42, 4, 1, "", "triple_well_1d"], [43, 4, 1, "", "triple_well_2d"]], "deeptime.data.BickleyJet": [[236, 2, 1, "", "L0"], [236, 2, 1, "", "U0"], [236, 1, 1, "", "__call__"], [236, 1, 1, "", "apply_periodic_boundary_conditions"], [236, 2, 1, "", "c"], [236, 2, 1, "", "dimension"], [236, 2, 1, "", "eps"], [236, 2, 1, "", "f"], [236, 1, 1, "", "generate"], [236, 2, 1, "", "h"], [236, 2, 1, "", "has_potential_function"], [236, 2, 1, "", "integrator"], [236, 2, 1, "", "k"], [236, 2, 1, "", "n_steps"], [236, 2, 1, "", "periodic_bc"], [236, 1, 1, "", "potential"], [236, 2, 1, "", "r0"], [236, 2, 1, "", "time_dependent"], [236, 1, 1, "", "to_3d"], [236, 1, 1, "", "trajectory"], [236, 2, 1, "", "vectorized_f"]], "deeptime.data.BirthDeathChain": [[237, 1, 1, "", "committor_backward"], [237, 1, 1, "", "committor_forward"], [237, 1, 1, "", "flux"], [237, 2, 1, "", "msm"], [237, 1, 1, "", "netflux"], [237, 1, 1, "", "rate"], [237, 2, 1, "", "stationary_distribution"], [237, 1, 1, "", "totalflux"], [237, 2, 1, "", "transition_matrix"]], "deeptime.data.CustomSystem": [[238, 1, 1, "", "__call__"], [238, 2, 1, "", "dimension"], [238, 2, 1, "", "f"], [238, 2, 1, "", "h"], [238, 2, 1, "", "has_potential_function"], [238, 2, 1, "", "integrator"], [238, 2, 1, "", "n_steps"], [238, 1, 1, "", "potential"], [238, 2, 1, "", "time_dependent"], [238, 1, 1, "", "trajectory"], [238, 2, 1, "", "vectorized_f"]], "deeptime.data.DoubleWellDiscrete": [[239, 2, 1, "", "analytic_msm"], [239, 2, 1, "", "dtraj"], [239, 1, 1, "", "dtraj_n"], [239, 1, 1, "", "dtraj_n2"], [239, 2, 1, "", "dtraj_n2bad"], [239, 2, 1, "", "dtraj_n2good"], [239, 2, 1, "", "dtraj_n6good"], [239, 1, 1, "", "simulate_trajectories"], [239, 1, 1, "", "simulate_trajectory"], [239, 2, 1, "", "transition_matrix"]], "deeptime.data.DrunkardsWalk": [[240, 1, 1, "", "add_barrier"], [240, 1, 1, "", "coordinate_to_state"], [240, 1, 1, "", "is_valid_coordinate"], [240, 2, 1, "", "msm"], [240, 1, 1, "", "plot_2d_map"], [240, 1, 1, "", "plot_network"], [240, 1, 1, "", "plot_path"], [240, 1, 1, "", "state_to_coordinate"], [240, 1, 1, "", "walk"]], "deeptime.data.Ellipsoids": [[241, 2, 1, "", "covariance_matrix"], [241, 1, 1, "", "discrete_trajectory"], [241, 1, 1, "", "map_discrete_to_observations"], [241, 2, 1, "", "msm"], [241, 1, 1, "", "observations"], [241, 2, 1, "", "random_state"], [241, 2, 1, "", "seed"]], "deeptime.data.PBFSimulator": [[242, 2, 1, "", "domain_size"], [242, 1, 1, "", "make_animation"], [242, 2, 1, "", "n_particles"], [242, 1, 1, "", "run"], [242, 1, 1, "", "simulate_oscillatory_force"], [242, 1, 1, "", "transform_to_density"]], "deeptime.data.TimeDependentSystem": [[243, 1, 1, "", "__call__"], [243, 2, 1, "", "dimension"], [243, 2, 1, "", "f"], [243, 2, 1, "", "h"], [243, 2, 1, "", "has_potential_function"], [243, 2, 1, "", "integrator"], [243, 2, 1, "", "n_steps"], [243, 1, 1, "", "potential"], [243, 2, 1, "", "time_dependent"], [243, 1, 1, "", "trajectory"], [243, 2, 1, "", "vectorized_f"]], "deeptime.data.TimeIndependentSystem": [[244, 1, 1, "", "__call__"], [244, 2, 1, "", "dimension"], [244, 2, 1, "", "f"], [244, 2, 1, "", "h"], [244, 2, 1, "", "has_potential_function"], [244, 2, 1, "", "integrator"], [244, 2, 1, "", "n_steps"], [244, 1, 1, "", "potential"], [244, 2, 1, "", "time_dependent"], [244, 1, 1, "", "trajectory"], [244, 2, 1, "", "vectorized_f"]], "deeptime.decomposition": [[44, 0, 1, "", "CovarianceKoopmanModel"], [45, 0, 1, "", "DMD"], [46, 0, 1, "", "DMDModel"], [47, 0, 1, "", "EDMD"], [48, 0, 1, "", "EDMDModel"], [49, 0, 1, "", "KVAD"], [50, 0, 1, "", "KVADModel"], [51, 0, 1, "", "KernelCCA"], [52, 0, 1, "", "KernelCCAModel"], [53, 0, 1, "", "KernelEDMD"], [54, 0, 1, "", "KernelEDMDModel"], [55, 0, 1, "", "TICA"], [56, 0, 1, "", "TransferOperatorModel"], [57, 0, 1, "", "VAMP"], [58, 4, 1, "", "blocksplit_trajs"], [59, 4, 1, "", "cvsplit_trajs"], [73, 4, 1, "", "vamp_score"], [74, 4, 1, "", "vamp_score_cv"], [75, 4, 1, "", "vamp_score_data"]], "deeptime.decomposition.CovarianceKoopmanModel": [[44, 1, 1, "", "__call__"], [44, 1, 1, "", "backward"], [44, 1, 1, "", "ck_test"], [44, 1, 1, "", "copy"], [44, 2, 1, "", "cov"], [44, 2, 1, "", "cov_00"], [44, 2, 1, "", "cov_0t"], [44, 2, 1, "", "cov_tt"], [44, 2, 1, "", "cumulative_kinetic_variance"], [44, 2, 1, "", "dim"], [44, 1, 1, "", "effective_output_dimension"], [44, 2, 1, "", "epsilon"], [44, 1, 1, "", "expectation"], [44, 2, 1, "", "feature_component_correlation"], [44, 1, 1, "", "forward"], [44, 1, 1, "", "get_params"], [44, 2, 1, "", "instantaneous_coefficients"], [44, 2, 1, "", "instantaneous_obs"], [44, 2, 1, "", "koopman_matrix"], [44, 2, 1, "", "lagtime"], [44, 2, 1, "", "mean_0"], [44, 2, 1, "", "mean_t"], [44, 2, 1, "", "operator"], [44, 2, 1, "", "operator_inverse"], [44, 2, 1, "", "output_dimension"], [44, 1, 1, "", "propagate"], [44, 2, 1, "", "scaling"], [44, 1, 1, "", "score"], [44, 1, 1, "", "set_params"], [44, 2, 1, "", "singular_values"], [44, 2, 1, "", "singular_vectors_left"], [44, 2, 1, "", "singular_vectors_right"], [44, 2, 1, "", "timelagged_coefficients"], [44, 2, 1, "", "timelagged_obs"], [44, 1, 1, "", "timescales"], [44, 1, 1, "", "transform"], [44, 2, 1, "", "var_cutoff"], [44, 2, 1, "", "whitening_rank_0"], [44, 2, 1, "", "whitening_rank_t"]], "deeptime.decomposition.DMD": [[45, 1, 1, "", "__call__"], [45, 6, 1, "", "available_drivers"], [45, 6, 1, "", "available_modes"], [45, 1, 1, "", "fetch_model"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_fetch"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_params"], [45, 2, 1, "", "has_model"], [45, 2, 1, "", "model"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "deeptime.decomposition.DMDModel": [[46, 1, 1, "", "__call__"], [46, 1, 1, "", "copy"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "deeptime.decomposition.EDMD": [[47, 1, 1, "", "__call__"], [47, 6, 1, "", "available_operators"], [47, 1, 1, "", "fetch_model"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_fetch"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_params"], [47, 2, 1, "", "has_model"], [47, 2, 1, "", "model"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "deeptime.decomposition.EDMDModel": [[48, 1, 1, "", "__call__"], [48, 1, 1, "", "backward"], [48, 1, 1, "", "copy"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "get_params"], [48, 2, 1, "", "instantaneous_obs"], [48, 2, 1, "", "koopman_matrix"], [48, 2, 1, "", "operator"], [48, 2, 1, "", "operator_inverse"], [48, 2, 1, "", "output_dimension"], [48, 1, 1, "", "set_params"], [48, 2, 1, "", "timelagged_obs"], [48, 1, 1, "", "transform"]], "deeptime.decomposition.KVAD": [[49, 1, 1, "", "__call__"], [49, 2, 1, "", "dim"], [49, 2, 1, "", "epsilon"], [49, 1, 1, "", "fetch_model"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_fetch"], [49, 1, 1, "", "fit_transform"], [49, 1, 1, "", "get_params"], [49, 2, 1, "", "has_model"], [49, 2, 1, "", "model"], [49, 2, 1, "", "observable_transform"], [49, 1, 1, "", "set_params"], [49, 1, 1, "", "transform"]], "deeptime.decomposition.KVADModel": [[50, 1, 1, "", "__call__"], [50, 1, 1, "", "backward"], [50, 1, 1, "", "copy"], [50, 1, 1, "", "forward"], [50, 1, 1, "", "get_params"], [50, 2, 1, "", "instantaneous_obs"], [50, 2, 1, "", "koopman_matrix"], [50, 2, 1, "", "operator"], [50, 2, 1, "", "operator_inverse"], [50, 2, 1, "", "output_dimension"], [50, 1, 1, "", "set_params"], [50, 2, 1, "", "timelagged_obs"], [50, 1, 1, "", "transform"]], "deeptime.decomposition.KernelCCA": [[51, 1, 1, "", "fetch_model"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_fetch"], [51, 1, 1, "", "get_params"], [51, 2, 1, "", "has_model"], [51, 2, 1, "", "model"], [51, 1, 1, "", "set_params"]], "deeptime.decomposition.KernelCCAModel": [[52, 1, 1, "", "__call__"], [52, 1, 1, "", "backward"], [52, 1, 1, "", "copy"], [52, 1, 1, "", "forward"], [52, 1, 1, "", "get_params"], [52, 2, 1, "", "instantaneous_obs"], [52, 2, 1, "", "kernel"], [52, 2, 1, "", "koopman_matrix"], [52, 2, 1, "", "operator"], [52, 2, 1, "", "operator_inverse"], [52, 2, 1, "", "output_dimension"], [52, 1, 1, "", "set_params"], [52, 2, 1, "", "timelagged_obs"], [52, 1, 1, "", "transform"]], "deeptime.decomposition.KernelEDMD": [[53, 1, 1, "", "__call__"], [53, 1, 1, "", "fetch_model"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_fetch"], [53, 1, 1, "", "fit_transform"], [53, 1, 1, "", "get_params"], [53, 2, 1, "", "has_model"], [53, 2, 1, "", "model"], [53, 1, 1, "", "set_params"], [53, 1, 1, "", "transform"]], "deeptime.decomposition.KernelEDMDModel": [[54, 1, 1, "", "__call__"], [54, 1, 1, "", "backward"], [54, 1, 1, "", "copy"], [54, 1, 1, "", "forward"], [54, 1, 1, "", "get_params"], [54, 2, 1, "", "instantaneous_obs"], [54, 2, 1, "", "koopman_matrix"], [54, 2, 1, "", "operator"], [54, 2, 1, "", "operator_inverse"], [54, 2, 1, "", "output_dimension"], [54, 1, 1, "", "set_params"], [54, 2, 1, "", "timelagged_obs"], [54, 1, 1, "", "transform"]], "deeptime.decomposition.TICA": [[55, 1, 1, "", "__call__"], [55, 1, 1, "", "covariance_estimator"], [55, 2, 1, "", "dim"], [55, 2, 1, "", "epsilon"], [55, 1, 1, "", "fetch_model"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_fetch"], [55, 1, 1, "", "fit_from_covariances"], [55, 1, 1, "", "fit_from_timeseries"], [55, 1, 1, "", "fit_transform"], [55, 1, 1, "", "get_params"], [55, 2, 1, "", "has_model"], [55, 2, 1, "", "lagtime"], [55, 2, 1, "", "model"], [55, 1, 1, "", "partial_fit"], [55, 2, 1, "", "scaling"], [55, 1, 1, "", "set_params"], [55, 1, 1, "", "transform"], [55, 2, 1, "", "var_cutoff"]], "deeptime.decomposition.TransferOperatorModel": [[56, 1, 1, "", "__call__"], [56, 1, 1, "", "backward"], [56, 1, 1, "", "copy"], [56, 1, 1, "", "forward"], [56, 1, 1, "", "get_params"], [56, 2, 1, "", "instantaneous_obs"], [56, 2, 1, "", "koopman_matrix"], [56, 2, 1, "", "operator"], [56, 2, 1, "", "operator_inverse"], [56, 2, 1, "", "output_dimension"], [56, 1, 1, "", "set_params"], [56, 2, 1, "", "timelagged_obs"], [56, 1, 1, "", "transform"]], "deeptime.decomposition.VAMP": [[57, 1, 1, "", "__call__"], [57, 1, 1, "", "covariance_estimator"], [57, 2, 1, "", "dim"], [57, 2, 1, "", "epsilon"], [57, 1, 1, "", "fetch_model"], [57, 1, 1, "", "fit"], [57, 1, 1, "", "fit_fetch"], [57, 1, 1, "", "fit_from_covariances"], [57, 1, 1, "", "fit_from_timeseries"], [57, 1, 1, "", "fit_transform"], [57, 1, 1, "", "get_params"], [57, 2, 1, "", "has_model"], [57, 2, 1, "", "lagtime"], [57, 2, 1, "", "model"], [57, 1, 1, "", "partial_fit"], [57, 2, 1, "", "scaling"], [57, 1, 1, "", "set_params"], [57, 1, 1, "", "transform"], [57, 2, 1, "", "var_cutoff"]], "deeptime.decomposition.deep": [[60, 0, 1, "", "TAE"], [61, 0, 1, "", "TAEModel"], [62, 0, 1, "", "TVAE"], [63, 0, 1, "", "TVAEEncoder"], [64, 0, 1, "", "TVAEModel"], [65, 0, 1, "", "VAMPNet"], [66, 0, 1, "", "VAMPNetModel"], [67, 4, 1, "", "covariances"], [68, 4, 1, "", "koopman_matrix"], [69, 4, 1, "", "kvad_score"], [70, 4, 1, "", "sym_inverse"], [71, 4, 1, "", "vamp_score"], [72, 4, 1, "", "vampnet_loss"]], "deeptime.decomposition.deep.TAE": [[60, 1, 1, "", "__call__"], [60, 2, 1, "", "device"], [60, 2, 1, "", "dtype"], [60, 1, 1, "", "evaluate_loss"], [60, 1, 1, "", "fetch_model"], [60, 1, 1, "", "fit"], [60, 1, 1, "", "fit_fetch"], [60, 1, 1, "", "fit_transform"], [60, 1, 1, "", "get_params"], [60, 2, 1, "", "has_model"], [60, 2, 1, "", "learning_rate"], [60, 2, 1, "", "model"], [60, 2, 1, "", "optimizer"], [60, 1, 1, "", "set_params"], [60, 1, 1, "", "setup_optimizer"], [60, 2, 1, "", "train_losses"], [60, 1, 1, "", "transform"], [60, 2, 1, "", "validation_losses"]], "deeptime.decomposition.deep.TAEModel": [[61, 1, 1, "", "__call__"], [61, 1, 1, "", "copy"], [61, 2, 1, "", "decoder"], [61, 2, 1, "", "encoder"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"], [61, 1, 1, "", "transform"]], "deeptime.decomposition.deep.TVAE": [[62, 1, 1, "", "__call__"], [62, 2, 1, "", "device"], [62, 2, 1, "", "dtype"], [62, 1, 1, "", "evaluate_loss"], [62, 1, 1, "", "fetch_model"], [62, 1, 1, "", "fit"], [62, 1, 1, "", "fit_fetch"], [62, 1, 1, "", "fit_transform"], [62, 1, 1, "", "get_params"], [62, 2, 1, "", "has_model"], [62, 2, 1, "", "learning_rate"], [62, 2, 1, "", "model"], [62, 2, 1, "", "optimizer"], [62, 1, 1, "", "set_params"], [62, 1, 1, "", "setup_optimizer"], [62, 2, 1, "", "train_losses"], [62, 1, 1, "", "transform"], [62, 2, 1, "", "validation_losses"]], "deeptime.decomposition.deep.TVAEEncoder": [[63, 1, 1, "", "__call__"], [63, 1, 1, "", "add_module"], [63, 1, 1, "", "apply"], [63, 1, 1, "", "bfloat16"], [63, 1, 1, "", "buffers"], [63, 1, 1, "", "children"], [63, 1, 1, "", "compile"], [63, 1, 1, "", "cpu"], [63, 1, 1, "", "cuda"], [63, 1, 1, "", "double"], [63, 1, 1, "", "eval"], [63, 1, 1, "", "extra_repr"], [63, 1, 1, "", "float"], [63, 1, 1, "", "forward"], [63, 1, 1, "", "get_buffer"], [63, 1, 1, "", "get_extra_state"], [63, 1, 1, "", "get_parameter"], [63, 1, 1, "", "get_submodule"], [63, 1, 1, "", "half"], [63, 1, 1, "", "ipu"], [63, 1, 1, "", "load_state_dict"], [63, 1, 1, "", "modules"], [63, 1, 1, "", "mtia"], [63, 1, 1, "", "named_buffers"], [63, 1, 1, "", "named_children"], [63, 1, 1, "", "named_modules"], [63, 1, 1, "", "named_parameters"], [63, 1, 1, "", "parameters"], [63, 1, 1, "", "register_backward_hook"], [63, 1, 1, "", "register_buffer"], [63, 1, 1, "", "register_forward_hook"], [63, 1, 1, "", "register_forward_pre_hook"], [63, 1, 1, "", "register_full_backward_hook"], [63, 1, 1, "", "register_full_backward_pre_hook"], [63, 1, 1, "", "register_load_state_dict_post_hook"], [63, 1, 1, "", "register_load_state_dict_pre_hook"], [63, 1, 1, "", "register_module"], [63, 1, 1, "", "register_parameter"], [63, 1, 1, "", "register_state_dict_post_hook"], [63, 1, 1, "", "register_state_dict_pre_hook"], [63, 1, 1, "", "requires_grad_"], [63, 1, 1, "", "set_extra_state"], [63, 1, 1, "", "set_submodule"], [63, 1, 1, "", "share_memory"], [63, 1, 1, "", "state_dict"], [63, 1, 1, "", "to"], [63, 1, 1, "", "to_empty"], [63, 1, 1, "", "train"], [63, 1, 1, "", "type"], [63, 1, 1, "", "xpu"], [63, 1, 1, "", "zero_grad"]], "deeptime.decomposition.deep.TVAEModel": [[64, 1, 1, "", "__call__"], [64, 1, 1, "", "copy"], [64, 2, 1, "", "decoder"], [64, 2, 1, "", "encoder"], [64, 1, 1, "", "get_params"], [64, 1, 1, "", "set_params"], [64, 1, 1, "", "transform"]], "deeptime.decomposition.deep.VAMPNet": [[65, 1, 1, "", "__call__"], [65, 2, 1, "", "device"], [65, 2, 1, "", "dtype"], [65, 2, 1, "", "epsilon"], [65, 1, 1, "", "fetch_model"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "fit_fetch"], [65, 1, 1, "", "fit_transform"], [65, 1, 1, "", "get_params"], [65, 2, 1, "", "has_model"], [65, 2, 1, "", "learning_rate"], [65, 2, 1, "", "lobe"], [65, 2, 1, "", "lobe_timelagged"], [65, 2, 1, "", "model"], [65, 2, 1, "", "optimizer"], [65, 1, 1, "", "partial_fit"], [65, 2, 1, "", "score_method"], [65, 1, 1, "", "set_params"], [65, 1, 1, "", "setup_optimizer"], [65, 2, 1, "", "train_scores"], [65, 1, 1, "", "transform"], [65, 1, 1, "", "validate"], [65, 2, 1, "", "validation_scores"]], "deeptime.decomposition.deep.VAMPNetModel": [[66, 1, 1, "", "__call__"], [66, 1, 1, "", "copy"], [66, 1, 1, "", "get_params"], [66, 2, 1, "", "lobe"], [66, 2, 1, "", "lobe_timelagged"], [66, 1, 1, "", "set_params"], [66, 1, 1, "", "transform"]], "deeptime.kernels": [[76, 0, 1, "", "GaussianKernel"], [77, 0, 1, "", "GeneralizedGaussianKernel"], [78, 0, 1, "", "Kernel"], [79, 0, 1, "", "LaplacianKernel"], [80, 0, 1, "", "PolynomialKernel"], [81, 0, 1, "", "TorchGaussianKernel"], [82, 4, 1, "", "is_torch_kernel"]], "deeptime.kernels.GaussianKernel": [[76, 1, 1, "", "__call__"], [76, 1, 1, "", "apply"], [76, 1, 1, "", "gram"], [76, 2, 1, "", "sigma"], [76, 6, 1, "", "valid_impls"]], "deeptime.kernels.GeneralizedGaussianKernel": [[77, 1, 1, "", "__call__"], [77, 1, 1, "", "apply"], [77, 1, 1, "", "gram"]], "deeptime.kernels.Kernel": [[78, 1, 1, "", "__call__"], [78, 1, 1, "", "apply"], [78, 1, 1, "", "gram"]], "deeptime.kernels.LaplacianKernel": [[79, 1, 1, "", "__call__"], [79, 1, 1, "", "apply"], [79, 1, 1, "", "gram"]], "deeptime.kernels.PolynomialKernel": [[80, 1, 1, "", "__call__"], [80, 1, 1, "", "apply"], [80, 1, 1, "", "gram"]], "deeptime.kernels.TorchGaussianKernel": [[81, 1, 1, "", "__call__"], [81, 1, 1, "", "apply"], [81, 1, 1, "", "gram"], [81, 2, 1, "", "sigma"], [81, 6, 1, "", "valid_impls"]], "deeptime.markov": [[83, 0, 1, "", "PCCAModel"], [84, 0, 1, "", "ReactiveFlux"], [85, 0, 1, "", "TransitionCountEstimator"], [86, 0, 1, "", "TransitionCountModel"], [87, 4, 1, "", "compute_connected_sets"], [88, 4, 1, "", "compute_dtrajs_effective"], [89, 4, 1, "", "compute_effective_stride"], [90, 4, 1, "", "count_states"], [114, 4, 1, "", "number_of_states"], [115, 4, 1, "", "pcca"], [116, 4, 1, "", "reactive_flux"]], "deeptime.markov.PCCAModel": [[83, 2, 1, "", "assignments"], [83, 2, 1, "", "coarse_grained_stationary_probability"], [83, 2, 1, "", "coarse_grained_transition_matrix"], [83, 1, 1, "", "copy"], [83, 1, 1, "", "get_params"], [83, 2, 1, "", "memberships"], [83, 2, 1, "", "metastable_distributions"], [83, 2, 1, "", "n_metastable"], [83, 1, 1, "", "set_params"], [83, 2, 1, "", "sets"]], "deeptime.markov.ReactiveFlux": [[84, 2, 1, "", "backward_committor"], [84, 1, 1, "", "coarse_grain"], [84, 1, 1, "", "copy"], [84, 2, 1, "", "forward_committor"], [84, 1, 1, "", "get_params"], [84, 2, 1, "", "gross_flux"], [84, 2, 1, "", "intermediate_states"], [84, 1, 1, "", "major_flux"], [84, 2, 1, "", "mfpt"], [84, 2, 1, "", "n_states"], [84, 2, 1, "", "net_flux"], [84, 1, 1, "", "pathways"], [84, 2, 1, "", "rate"], [84, 1, 1, "", "set_params"], [84, 2, 1, "", "source_states"], [84, 2, 1, "", "stationary_distribution"], [84, 2, 1, "", "target_states"], [84, 2, 1, "", "total_flux"]], "deeptime.markov.TransitionCountEstimator": [[85, 1, 1, "", "__call__"], [85, 1, 1, "", "count"], [85, 2, 1, "", "count_mode"], [85, 1, 1, "", "fetch_model"], [85, 1, 1, "", "fit"], [85, 1, 1, "", "fit_fetch"], [85, 1, 1, "", "fit_transform"], [85, 1, 1, "", "get_params"], [85, 2, 1, "", "has_model"], [85, 2, 1, "", "lagtime"], [85, 2, 1, "", "model"], [85, 2, 1, "", "n_states"], [85, 1, 1, "", "set_params"], [85, 2, 1, "", "sparse"], [85, 1, 1, "", "transform"]], "deeptime.markov.TransitionCountModel": [[86, 1, 1, "", "connected_sets"], [86, 1, 1, "", "copy"], [86, 2, 1, "", "count_matrix"], [86, 2, 1, "", "count_matrix_full"], [86, 1, 1, "", "count_matrix_histogram"], [86, 2, 1, "", "counting_mode"], [86, 1, 1, "", "get_params"], [86, 1, 1, "", "is_connected"], [86, 2, 1, "", "is_full_model"], [86, 2, 1, "", "lagtime"], [86, 2, 1, "", "n_states"], [86, 2, 1, "", "n_states_full"], [86, 2, 1, "", "selected_count_fraction"], [86, 2, 1, "", "selected_state_fraction"], [86, 1, 1, "", "set_params"], [86, 2, 1, "", "state_histogram"], [86, 2, 1, "", "state_histogram_full"], [86, 2, 1, "", "state_symbols"], [86, 2, 1, "", "state_symbols_with_blank"], [86, 2, 1, "", "states"], [86, 1, 1, "", "states_to_symbols"], [86, 1, 1, "", "submodel"], [86, 1, 1, "", "submodel_largest"], [86, 1, 1, "", "symbols_to_states"], [86, 2, 1, "", "total_count"], [86, 1, 1, "", "transform_discrete_trajectories_to_submodel"], [86, 2, 1, "", "visited_set"]], "deeptime.markov.hmm": [[91, 0, 1, "", "BayesianHMM"], [92, 0, 1, "", "BayesianHMMPosterior"], [93, 0, 1, "", "DiscreteOutputModel"], [94, 0, 1, "", "GaussianOutputModel"], [95, 0, 1, "", "HiddenMarkovModel"], [96, 0, 1, "", "MaximumLikelihoodHMM"], [97, 0, 1, "", "OutputModel"]], "deeptime.markov.hmm.BayesianHMM": [[91, 1, 1, "", "default"], [91, 1, 1, "", "fetch_model"], [91, 1, 1, "", "fit"], [91, 1, 1, "", "fit_fetch"], [91, 1, 1, "", "get_params"], [91, 2, 1, "", "has_model"], [91, 2, 1, "", "initial_distribution_prior"], [91, 2, 1, "", "initial_hmm"], [91, 2, 1, "", "model"], [91, 2, 1, "", "n_samples"], [91, 2, 1, "", "reversible"], [91, 1, 1, "", "set_params"], [91, 2, 1, "", "stationary"], [91, 2, 1, "", "store_hidden"], [91, 2, 1, "", "transition_matrix_prior"]], "deeptime.markov.hmm.BayesianHMMPosterior": [[92, 1, 1, "", "ck_test"], [92, 1, 1, "", "copy"], [92, 1, 1, "", "evaluate_samples"], [92, 1, 1, "", "gather_stats"], [92, 1, 1, "", "get_params"], [92, 2, 1, "", "hidden_state_trajectories_samples"], [92, 2, 1, "", "lagtime"], [92, 2, 1, "", "prior"], [92, 2, 1, "", "samples"], [92, 1, 1, "", "set_params"], [92, 1, 1, "", "submodel"], [92, 1, 1, "", "submodel_largest"], [92, 1, 1, "", "submodel_populous"], [92, 1, 1, "", "timescales"]], "deeptime.markov.hmm.DiscreteOutputModel": [[93, 1, 1, "", "copy"], [93, 1, 1, "", "fit"], [93, 1, 1, "", "generate_observation_trajectory"], [93, 1, 1, "", "get_params"], [93, 2, 1, "", "ignore_outliers"], [93, 1, 1, "", "map_observations_to_submodel"], [93, 2, 1, "", "n_hidden_states"], [93, 2, 1, "", "n_observable_states"], [93, 1, 1, "", "normalize"], [93, 2, 1, "", "output_probabilities"], [93, 2, 1, "", "prior"], [93, 1, 1, "", "sample"], [93, 1, 1, "", "set_params"], [93, 1, 1, "", "submodel"], [93, 1, 1, "", "to_state_probability_trajectory"]], "deeptime.markov.hmm.GaussianOutputModel": [[94, 1, 1, "", "copy"], [94, 1, 1, "", "fit"], [94, 1, 1, "", "generate_observation_trajectory"], [94, 1, 1, "", "get_params"], [94, 2, 1, "", "ignore_outliers"], [94, 2, 1, "", "means"], [94, 2, 1, "", "n_hidden_states"], [94, 2, 1, "", "n_observable_states"], [94, 1, 1, "", "sample"], [94, 1, 1, "", "set_params"], [94, 2, 1, "", "sigmas"], [94, 1, 1, "", "submodel"], [94, 1, 1, "", "to_state_probability_trajectory"]], "deeptime.markov.hmm.HiddenMarkovModel": [[95, 1, 1, "", "ck_test"], [95, 1, 1, "", "collect_observations_in_state"], [95, 1, 1, "", "compute_observation_likelihood"], [95, 1, 1, "", "compute_viterbi_paths"], [95, 1, 1, "", "copy"], [95, 1, 1, "", "correlation_obs"], [95, 2, 1, "", "count_model"], [95, 2, 1, "", "eigenvectors_left_obs"], [95, 2, 1, "", "eigenvectors_right_obs"], [95, 1, 1, "", "expectation_obs"], [95, 1, 1, "", "fingerprint_correlation_obs"], [95, 1, 1, "", "fingerprint_relaxation_obs"], [95, 1, 1, "", "get_params"], [95, 2, 1, "", "hidden_state_trajectories"], [95, 2, 1, "", "initial_count"], [95, 2, 1, "", "initial_distribution"], [95, 2, 1, "", "lagtime"], [95, 2, 1, "", "lifetimes"], [95, 2, 1, "", "likelihood"], [95, 2, 1, "", "likelihoods"], [95, 2, 1, "", "metastable_assignments"], [95, 2, 1, "", "metastable_distributions"], [95, 2, 1, "", "metastable_memberships"], [95, 2, 1, "", "metastable_sets"], [95, 2, 1, "", "n_hidden_states"], [95, 2, 1, "", "n_observation_states"], [95, 1, 1, "", "nonempty_obs"], [95, 2, 1, "", "observation_symbols"], [95, 2, 1, "", "observation_symbols_full"], [95, 2, 1, "", "output_model"], [95, 2, 1, "", "output_probabilities"], [95, 1, 1, "", "propagate"], [95, 1, 1, "", "relaxation_obs"], [95, 1, 1, "", "sample_by_observation_probabilities"], [95, 1, 1, "", "set_params"], [95, 1, 1, "", "simulate"], [95, 2, 1, "", "state_probabilities"], [95, 1, 1, "", "states_largest"], [95, 1, 1, "", "states_populous"], [95, 2, 1, "", "stationary_distribution_obs"], [95, 2, 1, "", "stride"], [95, 1, 1, "", "submodel"], [95, 1, 1, "", "submodel_disconnect"], [95, 1, 1, "", "submodel_largest"], [95, 1, 1, "", "submodel_populous"], [95, 1, 1, "", "timescales"], [95, 1, 1, "", "transform_discrete_trajectories_to_observed_symbols"], [95, 2, 1, "", "transition_counts"], [95, 1, 1, "", "transition_matrix_obs"], [95, 2, 1, "", "transition_model"]], "deeptime.markov.hmm.MaximumLikelihoodHMM": [[96, 2, 1, "", "accuracy"], [96, 1, 1, "", "fetch_model"], [96, 1, 1, "", "fit"], [96, 1, 1, "", "fit_fetch"], [96, 2, 1, "", "fixed_initial_distribution"], [96, 2, 1, "", "fixed_stationary_distribution"], [96, 1, 1, "", "get_params"], [96, 2, 1, "", "has_model"], [96, 2, 1, "", "initial_model"], [96, 2, 1, "", "lagtime"], [96, 2, 1, "", "maxit"], [96, 2, 1, "", "maxit_reversible"], [96, 2, 1, "", "model"], [96, 2, 1, "", "n_hidden_states"], [96, 2, 1, "", "reversible"], [96, 1, 1, "", "set_params"], [96, 2, 1, "", "stationary"], [96, 2, 1, "", "stride"]], "deeptime.markov.hmm.OutputModel": [[97, 1, 1, "", "copy"], [97, 1, 1, "", "fit"], [97, 1, 1, "", "generate_observation_trajectory"], [97, 1, 1, "", "get_params"], [97, 2, 1, "", "ignore_outliers"], [97, 2, 1, "", "n_hidden_states"], [97, 2, 1, "", "n_observable_states"], [97, 1, 1, "", "sample"], [97, 1, 1, "", "set_params"], [97, 1, 1, "", "submodel"], [97, 1, 1, "", "to_state_probability_trajectory"]], "deeptime.markov.hmm.init.discrete": [[98, 4, 1, "", "metastable_from_data"], [99, 4, 1, "", "metastable_from_msm"], [100, 4, 1, "", "random_guess"]], "deeptime.markov.hmm.init.gaussian": [[101, 4, 1, "", "from_data"]], "deeptime.markov.msm": [[102, 0, 1, "", "AugmentedMSM"], [103, 0, 1, "", "AugmentedMSMEstimator"], [104, 0, 1, "", "BayesianMSM"], [105, 0, 1, "", "BayesianMSMPosterior"], [106, 0, 1, "", "KoopmanReweightedMSM"], [107, 0, 1, "", "MarkovStateModel"], [108, 0, 1, "", "MarkovStateModelCollection"], [109, 0, 1, "", "MaximumLikelihoodMSM"], [110, 0, 1, "", "OOMReweightedMSM"], [111, 0, 1, "", "TRAM"], [112, 0, 1, "", "TRAMDataset"], [113, 0, 1, "", "TRAMModel"]], "deeptime.markov.msm.AugmentedMSM": [[102, 1, 1, "", "ck_test"], [102, 1, 1, "", "committor_backward"], [102, 1, 1, "", "committor_forward"], [102, 1, 1, "", "compute_state_indices"], [102, 1, 1, "", "compute_trajectory_weights"], [102, 1, 1, "", "copy"], [102, 1, 1, "", "correlation"], [102, 2, 1, "", "count_model"], [102, 1, 1, "", "eigenvalues"], [102, 1, 1, "", "eigenvectors_left"], [102, 1, 1, "", "eigenvectors_right"], [102, 2, 1, "", "empirical_koopman_model"], [102, 1, 1, "", "expectation"], [102, 1, 1, "", "fingerprint_correlation"], [102, 1, 1, "", "fingerprint_relaxation"], [102, 1, 1, "", "get_params"], [102, 2, 1, "", "has_count_model"], [102, 1, 1, "", "hmm"], [102, 2, 1, "", "is_real"], [102, 2, 1, "", "koopman_model"], [102, 2, 1, "", "lagtime"], [102, 1, 1, "", "mfpt"], [102, 2, 1, "", "n_eigenvalues"], [102, 2, 1, "", "n_states"], [102, 2, 1, "", "ncv"], [102, 2, 1, "", "optimizer_state"], [102, 1, 1, "", "pcca"], [102, 1, 1, "", "propagate"], [102, 1, 1, "", "reactive_flux"], [102, 1, 1, "", "relaxation"], [102, 2, 1, "", "reversible"], [102, 1, 1, "", "score"], [102, 1, 1, "", "set_params"], [102, 1, 1, "", "simulate"], [102, 2, 1, "", "sparse"], [102, 2, 1, "", "stationary"], [102, 2, 1, "", "stationary_distribution"], [102, 1, 1, "", "submodel"], [102, 1, 1, "", "timescales"], [102, 1, 1, "", "to_koopman_model"], [102, 2, 1, "", "transition_matrix"], [102, 2, 1, "", "transition_matrix_tolerance"], [102, 1, 1, "", "update_stationary_distribution"], [102, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.AugmentedMSMEstimator": [[103, 2, 1, "", "convergence_criterion_lagrange"], [103, 1, 1, "", "estimator_from_feature_trajectories"], [103, 2, 1, "", "expectations_by_state"], [103, 2, 1, "", "experimental_measurement_weights"], [103, 2, 1, "", "experimental_measurements"], [103, 1, 1, "", "fetch_model"], [103, 1, 1, "", "fit"], [103, 1, 1, "", "fit_fetch"], [103, 1, 1, "", "get_params"], [103, 2, 1, "", "has_model"], [103, 2, 1, "", "max_cache"], [103, 2, 1, "", "maxiter"], [103, 2, 1, "", "model"], [103, 2, 1, "", "reversible"], [103, 1, 1, "", "set_params"], [103, 2, 1, "", "sparse"], [103, 2, 1, "", "support_confidence"], [103, 2, 1, "", "uncertainties"]], "deeptime.markov.msm.BayesianMSM": [[104, 1, 1, "", "fetch_model"], [104, 1, 1, "", "fit"], [104, 1, 1, "", "fit_fetch"], [104, 1, 1, "", "fit_from_counts"], [104, 1, 1, "", "fit_from_discrete_timeseries"], [104, 1, 1, "", "fit_from_msm"], [104, 1, 1, "", "get_params"], [104, 2, 1, "", "has_model"], [104, 2, 1, "", "model"], [104, 2, 1, "", "reversible"], [104, 1, 1, "", "sample"], [104, 1, 1, "", "set_params"], [104, 2, 1, "", "sparse"], [104, 2, 1, "", "stationary_distribution_constraint"]], "deeptime.markov.msm.BayesianMSMPosterior": [[105, 1, 1, "", "ck_test"], [105, 1, 1, "", "copy"], [105, 1, 1, "", "evaluate_samples"], [105, 1, 1, "", "gather_stats"], [105, 1, 1, "", "get_params"], [105, 2, 1, "", "lagtime"], [105, 2, 1, "", "prior"], [105, 2, 1, "", "samples"], [105, 1, 1, "", "set_params"], [105, 1, 1, "", "submodel"], [105, 1, 1, "", "timescales"]], "deeptime.markov.msm.KoopmanReweightedMSM": [[106, 1, 1, "", "ck_test"], [106, 1, 1, "", "committor_backward"], [106, 1, 1, "", "committor_forward"], [106, 1, 1, "", "compute_state_indices"], [106, 1, 1, "", "compute_trajectory_weights"], [106, 1, 1, "", "copy"], [106, 1, 1, "", "correlation"], [106, 2, 1, "", "count_model"], [106, 1, 1, "", "eigenvalues"], [106, 1, 1, "", "eigenvectors_left"], [106, 1, 1, "", "eigenvectors_right"], [106, 2, 1, "", "empirical_koopman_model"], [106, 1, 1, "", "expectation"], [106, 1, 1, "", "fingerprint_correlation"], [106, 1, 1, "", "fingerprint_relaxation"], [106, 1, 1, "", "get_params"], [106, 2, 1, "", "has_count_model"], [106, 1, 1, "", "hmm"], [106, 2, 1, "", "is_real"], [106, 2, 1, "", "koopman_model"], [106, 2, 1, "", "lagtime"], [106, 1, 1, "", "mfpt"], [106, 2, 1, "", "n_eigenvalues"], [106, 2, 1, "", "n_states"], [106, 2, 1, "", "ncv"], [106, 2, 1, "", "oom_components"], [106, 2, 1, "", "oom_eigenvalues"], [106, 2, 1, "", "oom_evaluator"], [106, 2, 1, "", "oom_information_state_vector"], [106, 2, 1, "", "oom_rank"], [106, 2, 1, "", "oom_timescales"], [106, 1, 1, "", "pcca"], [106, 1, 1, "", "propagate"], [106, 1, 1, "", "reactive_flux"], [106, 1, 1, "", "relaxation"], [106, 2, 1, "", "reversible"], [106, 1, 1, "", "score"], [106, 1, 1, "", "set_params"], [106, 1, 1, "", "simulate"], [106, 2, 1, "", "sparse"], [106, 2, 1, "", "stationary"], [106, 2, 1, "", "stationary_distribution"], [106, 1, 1, "", "submodel"], [106, 1, 1, "", "timescales"], [106, 1, 1, "", "to_koopman_model"], [106, 2, 1, "", "transition_matrix"], [106, 2, 1, "", "transition_matrix_tolerance"], [106, 2, 1, "", "twostep_count_matrices"], [106, 1, 1, "", "update_stationary_distribution"], [106, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.MarkovStateModel": [[107, 1, 1, "", "ck_test"], [107, 1, 1, "", "committor_backward"], [107, 1, 1, "", "committor_forward"], [107, 1, 1, "", "compute_state_indices"], [107, 1, 1, "", "compute_trajectory_weights"], [107, 1, 1, "", "copy"], [107, 1, 1, "", "correlation"], [107, 2, 1, "", "count_model"], [107, 1, 1, "", "eigenvalues"], [107, 1, 1, "", "eigenvectors_left"], [107, 1, 1, "", "eigenvectors_right"], [107, 2, 1, "", "empirical_koopman_model"], [107, 1, 1, "", "expectation"], [107, 1, 1, "", "fingerprint_correlation"], [107, 1, 1, "", "fingerprint_relaxation"], [107, 1, 1, "", "get_params"], [107, 2, 1, "", "has_count_model"], [107, 1, 1, "", "hmm"], [107, 2, 1, "", "is_real"], [107, 2, 1, "", "koopman_model"], [107, 2, 1, "", "lagtime"], [107, 1, 1, "", "mfpt"], [107, 2, 1, "", "n_eigenvalues"], [107, 2, 1, "", "n_states"], [107, 2, 1, "", "ncv"], [107, 1, 1, "", "pcca"], [107, 1, 1, "", "propagate"], [107, 1, 1, "", "reactive_flux"], [107, 1, 1, "", "relaxation"], [107, 2, 1, "", "reversible"], [107, 1, 1, "", "score"], [107, 1, 1, "", "set_params"], [107, 1, 1, "", "simulate"], [107, 2, 1, "", "sparse"], [107, 2, 1, "", "stationary"], [107, 2, 1, "", "stationary_distribution"], [107, 1, 1, "", "submodel"], [107, 1, 1, "", "timescales"], [107, 1, 1, "", "to_koopman_model"], [107, 2, 1, "", "transition_matrix"], [107, 2, 1, "", "transition_matrix_tolerance"], [107, 1, 1, "", "update_stationary_distribution"], [107, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.MarkovStateModelCollection": [[108, 1, 1, "", "ck_test"], [108, 1, 1, "", "committor_backward"], [108, 1, 1, "", "committor_forward"], [108, 1, 1, "", "compute_state_indices"], [108, 1, 1, "", "compute_trajectory_weights"], [108, 1, 1, "", "copy"], [108, 1, 1, "", "correlation"], [108, 2, 1, "", "count_fraction"], [108, 2, 1, "", "count_fractions"], [108, 2, 1, "", "count_model"], [108, 2, 1, "", "current_model"], [108, 1, 1, "", "eigenvalues"], [108, 1, 1, "", "eigenvectors_left"], [108, 1, 1, "", "eigenvectors_right"], [108, 2, 1, "", "empirical_koopman_model"], [108, 1, 1, "", "expectation"], [108, 1, 1, "", "fingerprint_correlation"], [108, 1, 1, "", "fingerprint_relaxation"], [108, 1, 1, "", "get_params"], [108, 2, 1, "", "has_count_model"], [108, 1, 1, "", "hmm"], [108, 2, 1, "", "is_real"], [108, 2, 1, "", "koopman_model"], [108, 2, 1, "", "lagtime"], [108, 1, 1, "", "mfpt"], [108, 2, 1, "", "n_connected_msms"], [108, 2, 1, "", "n_eigenvalues"], [108, 2, 1, "", "n_states"], [108, 2, 1, "", "ncv"], [108, 1, 1, "", "pcca"], [108, 1, 1, "", "propagate"], [108, 1, 1, "", "reactive_flux"], [108, 1, 1, "", "relaxation"], [108, 2, 1, "", "reversible"], [108, 1, 1, "", "score"], [108, 1, 1, "", "select"], [108, 1, 1, "", "set_params"], [108, 1, 1, "", "simulate"], [108, 2, 1, "", "sparse"], [108, 2, 1, "", "state_fraction"], [108, 2, 1, "", "state_fractions"], [108, 1, 1, "", "state_symbols"], [108, 2, 1, "", "stationary"], [108, 2, 1, "", "stationary_distribution"], [108, 1, 1, "", "submodel"], [108, 1, 1, "", "timescales"], [108, 1, 1, "", "to_koopman_model"], [108, 2, 1, "", "transition_matrix"], [108, 2, 1, "", "transition_matrix_tolerance"], [108, 1, 1, "", "update_stationary_distribution"], [108, 1, 1, "", "update_transition_matrix"]], "deeptime.markov.msm.MaximumLikelihoodMSM": [[109, 2, 1, "", "allow_disconnected"], [109, 1, 1, "", "fetch_model"], [109, 1, 1, "", "fit"], [109, 1, 1, "", "fit_fetch"], [109, 1, 1, "", "fit_from_counts"], [109, 1, 1, "", "fit_from_discrete_timeseries"], [109, 1, 1, "", "get_params"], [109, 2, 1, "", "has_model"], [109, 2, 1, "", "model"], [109, 2, 1, "", "reversible"], [109, 1, 1, "", "set_params"], [109, 2, 1, "", "sparse"], [109, 2, 1, "", "stationary_distribution_constraint"]], "deeptime.markov.msm.OOMReweightedMSM": [[110, 1, 1, "", "fetch_model"], [110, 1, 1, "", "fit"], [110, 1, 1, "", "fit_fetch"], [110, 1, 1, "", "get_params"], [110, 2, 1, "", "has_model"], [110, 2, 1, "", "model"], [110, 2, 1, "", "reversible"], [110, 1, 1, "", "set_params"], [110, 2, 1, "", "sparse"]], "deeptime.markov.msm.TRAM": [[111, 1, 1, "", "fetch_model"], [111, 1, 1, "", "fit"], [111, 1, 1, "", "fit_fetch"], [111, 1, 1, "", "get_params"], [111, 2, 1, "", "has_model"], [111, 2, 1, "", "model"], [111, 2, 1, "", "reversible"], [111, 1, 1, "", "set_params"], [111, 2, 1, "", "sparse"]], "deeptime.markov.msm.TRAMDataset": [[112, 1, 1, "", "check_against_model"], [112, 6, 1, "", "connectivity_options"], [112, 2, 1, "", "n_markov_states"], [112, 2, 1, "", "n_therm_states"], [112, 1, 1, "", "restrict_to_largest_connected_set"], [112, 1, 1, "", "restrict_to_submodel"], [112, 1, 1, "", "setflags"], [112, 2, 1, "", "state_counts"], [112, 2, 1, "", "tram_input"], [112, 2, 1, "", "transition_counts"]], "deeptime.markov.msm.TRAMModel": [[113, 2, 1, "", "biased_conf_energies"], [113, 1, 1, "", "compute_PMF"], [113, 1, 1, "", "compute_log_likelihood"], [113, 1, 1, "", "compute_observable"], [113, 1, 1, "", "compute_sample_weights_log"], [113, 1, 1, "", "copy"], [113, 1, 1, "", "get_params"], [113, 2, 1, "", "lagrangian_mult_log"], [113, 2, 1, "", "markov_state_energies"], [113, 2, 1, "", "modified_state_counts_log"], [113, 2, 1, "", "msm_collection"], [113, 1, 1, "", "set_params"], [113, 2, 1, "", "therm_state_energies"]], "deeptime.markov.sample": [[117, 4, 1, "", "compute_index_states"], [118, 4, 1, "", "indices_by_distribution"], [119, 4, 1, "", "indices_by_sequence"], [120, 4, 1, "", "indices_by_state"]], "deeptime.markov.tools": [[254, 3, 0, "-", "analysis"], [254, 3, 0, "-", "estimation"], [254, 3, 0, "-", "flux"]], "deeptime.markov.tools.analysis": [[121, 4, 1, "", "committor"], [122, 4, 1, "", "committor_sensitivity"], [123, 4, 1, "", "correlation"], [124, 4, 1, "", "eigenvalue_sensitivity"], [125, 4, 1, "", "eigenvalues"], [126, 4, 1, "", "eigenvector_sensitivity"], [127, 4, 1, "", "eigenvectors"], [128, 4, 1, "", "expectation"], [129, 4, 1, "", "expectation_sensitivity"], [130, 4, 1, "", "expected_counts"], [131, 4, 1, "", "expected_counts_stationary"], [132, 4, 1, "", "fingerprint_correlation"], [133, 4, 1, "", "fingerprint_relaxation"], [134, 4, 1, "", "hitting_probability"], [135, 4, 1, "", "is_connected"], [136, 4, 1, "", "is_rate_matrix"], [137, 4, 1, "", "is_reversible"], [138, 4, 1, "", "is_transition_matrix"], [139, 4, 1, "", "mfpt"], [140, 4, 1, "", "mfpt_sensitivity"], [141, 4, 1, "", "pcca_memberships"], [142, 4, 1, "", "rdl_decomposition"], [143, 4, 1, "", "relaxation"], [144, 4, 1, "", "stationary_distribution"], [145, 4, 1, "", "stationary_distribution_sensitivity"], [146, 4, 1, "", "timescale_sensitivity"], [147, 4, 1, "", "timescales"]], "deeptime.markov.tools.estimation": [[148, 4, 1, "", "bootstrap_counts"], [149, 4, 1, "", "bootstrap_trajectories"], [150, 4, 1, "", "connected_sets"], [151, 4, 1, "", "count_matrix"], [152, 4, 1, "", "error_perturbation"], [153, 4, 1, "", "girsanov_reweighted_count_matrix"], [154, 4, 1, "", "is_connected"], [155, 4, 1, "", "largest_connected_set"], [156, 4, 1, "", "largest_connected_submatrix"], [157, 4, 1, "", "log_likelihood"], [158, 4, 1, "", "prior_const"], [159, 4, 1, "", "prior_neighbor"], [160, 4, 1, "", "prior_rev"], [161, 4, 1, "", "rate_matrix"], [162, 4, 1, "", "tmatrix_cov"], [163, 4, 1, "", "tmatrix_sampler"], [164, 4, 1, "", "transition_matrix"]], "deeptime.markov.tools.flux": [[165, 4, 1, "", "coarsegrain"], [166, 4, 1, "", "flux_consumers"], [167, 4, 1, "", "flux_matrix"], [168, 4, 1, "", "flux_producers"], [169, 4, 1, "", "flux_production"], [170, 4, 1, "", "mfpt"], [171, 4, 1, "", "pathways"], [172, 4, 1, "", "rate"], [173, 4, 1, "", "to_netflux"], [174, 4, 1, "", "total_flux"]], "deeptime.numeric": [[175, 7, 1, "", "ZeroRankError"], [176, 4, 1, "", "drop_nan_rows"], [177, 4, 1, "", "eig_corr"], [178, 4, 1, "", "eigs"], [179, 4, 1, "", "is_diagonal_matrix"], [180, 4, 1, "", "is_square_matrix"], [181, 4, 1, "", "schatten_norm"], [182, 4, 1, "", "sort_eigs"], [183, 4, 1, "", "spd_eig"], [184, 4, 1, "", "spd_inv"], [185, 4, 1, "", "spd_inv_split"], [186, 4, 1, "", "spd_inv_sqrt"], [187, 4, 1, "", "spd_truncated_svd"]], "deeptime.numeric.ZeroRankError": [[175, 1, 1, "", "add_note"], [175, 1, 1, "", "with_traceback"]], "deeptime.plots": [[188, 0, 1, "", "Energy2dPlot"], [189, 0, 1, "", "Network"], [190, 4, 1, "", "plot_adjacency"], [191, 4, 1, "", "plot_ck_test"], [192, 4, 1, "", "plot_contour2d_from_xyz"], [193, 4, 1, "", "plot_density"], [194, 4, 1, "", "plot_energy2d"], [195, 4, 1, "", "plot_flux"], [196, 4, 1, "", "plot_implied_timescales"], [197, 4, 1, "", "plot_markov_model"]], "deeptime.plots.Network": [[189, 2, 1, "", "adjacency_matrix"], [189, 2, 1, "", "bounds"], [189, 2, 1, "", "cmap"], [189, 2, 1, "", "d_x"], [189, 2, 1, "", "d_y"], [189, 2, 1, "", "edge_base_scale"], [189, 1, 1, "", "edge_label"], [189, 2, 1, "", "edge_labels"], [189, 2, 1, "", "n_nodes"], [189, 2, 1, "", "node_sizes"], [189, 1, 1, "", "plot"], [189, 2, 1, "", "pos"], [189, 2, 1, "", "state_colors"], [189, 2, 1, "", "state_labels"], [189, 2, 1, "", "state_sizes"]], "deeptime.sindy": [[198, 0, 1, "", "SINDy"], [199, 0, 1, "", "SINDyModel"], [200, 0, 1, "", "STLSQ"]], "deeptime.sindy.SINDy": [[198, 1, 1, "", "fetch_model"], [198, 1, 1, "", "fit"], [198, 1, 1, "", "fit_fetch"], [198, 1, 1, "", "get_params"], [198, 2, 1, "", "has_model"], [198, 2, 1, "", "model"], [198, 1, 1, "", "set_params"]], "deeptime.sindy.SINDyModel": [[199, 2, 1, "", "coefficients"], [199, 1, 1, "", "copy"], [199, 1, 1, "", "equations"], [199, 1, 1, "", "get_params"], [199, 2, 1, "", "intercept"], [199, 1, 1, "", "predict"], [199, 1, 1, "", "print"], [199, 1, 1, "", "score"], [199, 1, 1, "", "set_params"], [199, 1, 1, "", "simulate"], [199, 1, 1, "", "transform"]], "deeptime.sindy.STLSQ": [[200, 1, 1, "", "fit"], [200, 1, 1, "", "get_metadata_routing"], [200, 1, 1, "", "get_params"], [200, 1, 1, "", "predict"], [200, 1, 1, "", "score"], [200, 1, 1, "", "set_fit_request"], [200, 1, 1, "", "set_params"], [200, 1, 1, "", "set_score_request"]], "deeptime.util": [[201, 0, 1, "", "EnergyLandscape2d"], [202, 0, 1, "", "QuantityStatistics"], [205, 4, 1, "", "confidence_interval"], [219, 4, 1, "", "energy2d"]], "deeptime.util.EnergyLandscape2d": [[201, 1, 1, "", "plot"]], "deeptime.util.QuantityStatistics": [[202, 2, 1, "", "L"], [202, 2, 1, "", "R"], [202, 1, 1, "", "gather"], [202, 2, 1, "", "mean"], [202, 2, 1, "", "std"]], "deeptime.util.callbacks": [[203, 0, 1, "", "ProgressCallback"], [204, 4, 1, "", "supports_progress_interface"]], "deeptime.util.callbacks.ProgressCallback": [[203, 1, 1, "", "__call__"]], "deeptime.util.data": [[206, 0, 1, "", "ConcatDataset"], [207, 0, 1, "", "TimeLaggedConcatDataset"], [208, 0, 1, "", "TimeLaggedDataset"], [209, 0, 1, "", "TrajectoriesDataset"], [210, 0, 1, "", "TrajectoryDataset"], [211, 4, 1, "", "sliding_window"], [212, 4, 1, "", "timeshifted_split"]], "deeptime.util.data.ConcatDataset": [[206, 1, 1, "", "setflags"], [206, 2, 1, "", "subsets"]], "deeptime.util.data.TimeLaggedConcatDataset": [[207, 1, 1, "", "setflags"], [207, 2, 1, "", "subsets"]], "deeptime.util.data.TimeLaggedDataset": [[208, 1, 1, "", "astype"], [208, 2, 1, "", "data"], [208, 2, 1, "", "data_lagged"], [208, 1, 1, "", "setflags"]], "deeptime.util.data.TrajectoriesDataset": [[209, 1, 1, "", "from_numpy"], [209, 2, 1, "", "lagtime"], [209, 1, 1, "", "setflags"], [209, 2, 1, "", "subsets"], [209, 2, 1, "", "trajectories"]], "deeptime.util.data.TrajectoryDataset": [[210, 1, 1, "", "astype"], [210, 2, 1, "", "data"], [210, 2, 1, "", "data_lagged"], [210, 1, 1, "", "from_trajectories"], [210, 1, 1, "", "setflags"]], "deeptime.util.decorators": [[213, 0, 1, "", "cached_property"], [214, 4, 1, "", "deprecated_argument"], [215, 4, 1, "", "plotting_function"]], "deeptime.util.decorators.cached_property": [[213, 1, 1, "", "deleter"], [213, 1, 1, "", "getter"], [213, 1, 1, "", "setter"]], "deeptime.util.diff": [[216, 4, 1, "", "finite_difference_coefficients"], [217, 4, 1, "", "finite_difference_operator_midpoints"], [218, 4, 1, "", "tv_derivative"]], "deeptime.util.parallel": [[220, 4, 1, "", "handle_n_jobs"]], "deeptime.util.platform": [[221, 4, 1, "", "handle_progress_bar"], [222, 4, 1, "", "module_available"]], "deeptime.util.types": [[223, 4, 1, "", "atleast_nd"], [224, 4, 1, "", "is_timelagged_dataset"], [225, 4, 1, "", "to_dataset"]], "deeptime.util.validation": [[226, 0, 1, "", "ChapmanKolmogorovTest"], [227, 0, 1, "", "ImpliedTimescales"], [228, 4, 1, "", "ck_test"], [229, 4, 1, "", "implied_timescales"]], "deeptime.util.validation.ChapmanKolmogorovTest": [[226, 2, 1, "", "err_est"], [226, 2, 1, "", "estimates"], [226, 2, 1, "", "estimates_samples"], [226, 2, 1, "", "has_errors"], [226, 2, 1, "", "lagtimes"], [226, 1, 1, "", "plot"], [226, 2, 1, "", "predictions"], [226, 2, 1, "", "predictions_samples"]], "deeptime.util.validation.ImpliedTimescales": [[227, 2, 1, "", "has_samples"], [227, 2, 1, "", "lagtimes"], [227, 2, 1, "", "max_n_processes"], [227, 2, 1, "", "max_n_samples"], [227, 2, 1, "", "n_lagtimes"], [227, 1, 1, "", "n_samples"], [227, 1, 1, "", "plot"], [227, 1, 1, "", "samples_for_process"], [227, 1, 1, "", "timescales_for_process"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:function", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "terms": {"": [1, 2, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 25, 26, 27, 30, 34, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 74, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 121, 122, 123, 124, 126, 129, 132, 133, 135, 140, 143, 145, 146, 149, 150, 152, 154, 155, 156, 164, 183, 185, 187, 188, 189, 195, 197, 198, 199, 200, 216, 223, 233, 235, 236, 238, 240, 242, 243, 244, 260, 261, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 296, 301, 302, 306, 310, 311, 315, 317, 330, 334, 335], "0": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 53, 55, 57, 58, 60, 62, 63, 65, 74, 80, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 171, 173, 177, 180, 187, 189, 191, 195, 196, 197, 199, 200, 202, 205, 212, 218, 219, 223, 225, 226, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335], "00": [44, 55, 57, 68, 102, 106, 107, 108, 142, 283, 287, 295, 302, 316, 330, 334, 335], "000": 328, "00000000e": 142, "00003048": 270, "00015445": 270, "0003": 60, "0005": [62, 65], "0005462764459391867": 285, "000e": 275, "001": [22, 27, 32, 35, 36, 39, 40, 42, 96, 158, 159, 331], "0041": [45, 264, 270], "00563756": 273, "006": 164, "01": [10, 57, 102, 106, 107, 108, 121, 127, 142, 164, 275, 306, 312, 315, 328, 330, 331, 334, 335], "0138": 161, "01424983": 279, "01436794": 279, "0145872": 279, "015": 37, "01506183": 279, "016": 242, "01713845": 283, "019": [53, 278], "01it": 330, "02": [127, 142, 164, 189, 275, 295, 326, 330, 334, 335], "02066116": 132, "0242113": 104, "02440188": 104, "02825808": 279, "02829029": 279, "0283872": 280, "02849967": 279, "02905651": 287, "0291744": 279, "02962": 49, "02b617": [264, 283], "02it": 330, "03": [283, 330, 334, 335], "032": [319, 334, 335], "034": 276, "03818149": 280, "03926518": 104, "03b621_1": [74, 107, 287], "04": [284, 295, 330, 334, 335], "043116": 277, "04545455": 133, "046": 164, "04772813": 288, "04880885e": 142, "049": 164, "0495735": 130, "04960006": 130, "05": [11, 14, 31, 34, 37, 38, 43, 103, 109, 166, 168, 189, 200, 272, 276, 284, 295, 304, 326, 328, 329, 330, 335], "05229995": 288, "05b614": 284, "06": [20, 44, 49, 51, 55, 57, 65, 68, 69, 70, 71, 72, 75, 109, 197, 218, 272, 283, 330], "063": 164, "063107": [23, 236], "0667439": 273, "0677209": 273, "0684": 42, "07": 330, "07106781e": 127, "0749358": 273, "075": [23, 236], "0762447": 273, "07629456": 104, "07701315": 104, "07734": 273, "0796252": 273, "07b604_1": [55, 283], "07it": 330, "08": [104, 107, 109, 111, 164, 275, 302, 330, 331, 335], "083": 164, "087": 335, "09": [43, 102, 106, 107, 108, 195, 271, 330], "09090909e": 142, "09200214": 104, "09385258": 104, "094104": [110, 266], "09479627": 104, "09574": [53, 278], "098": 295, "0e": [280, 321, 330], "0e7": 161, "0t": [44, 55, 57, 68, 283, 287], "0x7f5ad72d93d0": 282, "0x7f6d35359130": 283, "1": [6, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 65, 68, 71, 73, 74, 76, 77, 80, 81, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 180, 181, 185, 186, 189, 191, 195, 197, 198, 199, 200, 203, 205, 211, 212, 216, 217, 218, 219, 220, 223, 225, 226, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335], "10": [19, 22, 23, 26, 28, 29, 31, 32, 35, 36, 39, 40, 43, 44, 47, 53, 55, 57, 60, 73, 74, 98, 102, 106, 107, 108, 110, 123, 143, 150, 154, 155, 156, 158, 159, 160, 161, 164, 177, 183, 184, 185, 186, 195, 197, 218, 236, 239, 242, 260, 262, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 297, 298, 299, 301, 302, 304, 319, 321, 323, 327, 329, 330, 332, 335], "100": [14, 22, 25, 27, 28, 31, 32, 34, 35, 36, 40, 43, 55, 57, 63, 91, 104, 130, 131, 161, 188, 192, 193, 194, 201, 219, 239, 264, 269, 271, 272, 273, 275, 276, 277, 279, 281, 282, 284, 285, 287, 288, 291, 298, 300, 305, 310, 312, 313, 319, 320, 321, 322, 328, 330, 332], "1000": [15, 22, 23, 27, 32, 34, 35, 36, 39, 40, 43, 84, 91, 94, 96, 111, 171, 212, 218, 269, 275, 282, 283, 284, 287, 288, 298, 309, 310, 312, 323, 324, 330, 333], "10000": [22, 27, 35, 36, 40, 43, 110, 269, 271, 272, 278, 282, 285, 288, 300, 306, 311, 315, 319, 330], "100000": [28, 96, 161, 263, 304], "1000000": [96, 104, 109, 164, 313], "10000000": 161, "1007": [53, 278], "100k": 239, "1013": 242, "1024": 242, "104": 164, "106": [116, 121, 165, 167, 170, 172, 284], "1063": [60, 262, 277, 282], "108": [107, 123, 132, 133, 143], "10th": 276, "11": [44, 55, 57, 65, 73, 74, 102, 106, 107, 108, 149, 262, 269, 272, 273, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 325, 326, 330], "1100": 284, "1106631013244623e": 272, "1108": [91, 276], "111": [164, 301, 328], "11111111": 144, "1119089": 104, "113": [111, 113, 198, 200, 266, 281, 285], "114": [102, 103, 266], "1150": 63, "117": [292, 295, 335], "1177": 269, "1178": 269, "1192": [84, 116, 121, 167, 171, 173, 174, 266, 284], "11b601_1": [85, 91, 104, 111, 164, 279, 286], "11b602_1": 107, "11b609_1": [91, 95, 98, 99, 107, 276], "12": [33, 55, 74, 104, 107, 111, 123, 132, 133, 136, 137, 138, 139, 143, 144, 164, 166, 168, 242, 269, 271, 272, 273, 275, 276, 277, 279, 280, 282, 283, 284, 286, 287, 288, 299, 316, 326, 329, 330, 332], "120": 301, "12023989": 104, "1217": 149, "1219": [84, 116, 121, 167, 171, 173, 174, 266, 284], "123": [116, 167, 273, 284], "124101": 164, "124105": 111, "128": [163, 273, 275, 308, 316, 335], "129": [111, 269], "12943966": 104, "13": [269, 272, 273, 275, 276, 279, 280, 282, 283, 284, 285, 287, 288, 295, 318, 319, 325, 330], "130": [31, 284], "1307": [47, 264, 271, 283], "13079372": 104, "131": 164, "1312": [45, 264, 270, 282], "132416": 264, "134": [15, 34, 151, 157, 164, 264, 266, 269, 283], "1346": [47, 264, 271, 283], "135363": 104, "137": 269, "13707029": 104, "138": [307, 316, 335], "139": [55, 91, 95, 98, 99, 107, 276, 283, 304, 316, 335], "14": [269, 272, 273, 275, 276, 279, 280, 282, 283, 284, 287, 288, 325, 328, 330, 333], "140": 266, "140108282841360": 283, "141": 31, "14102544": 104, "14195": 260, "142": [74, 107, 287], "143": [85, 91, 104, 111, 164, 279, 286], "1430": [91, 276], "1446": [23, 236], "146": [20, 21, 55, 110, 135, 150, 154, 155, 156, 266, 279, 283], "147": [83, 98, 99, 107, 115, 141, 266, 276, 280], "1474": 161, "148": [60, 262, 282], "1486": 161, "149": [53, 278], "15": [20, 21, 23, 38, 39, 55, 102, 106, 107, 108, 161, 189, 198, 200, 236, 269, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 312, 316, 318, 319, 326, 327, 330, 335], "150": [274, 277, 284, 287, 288, 297, 325, 328], "1500": 325, "15000": 273, "151": [164, 279], "15247454": 104, "154104": [20, 21, 55, 283], "15947371": 104, "16": [36, 63, 269, 272, 273, 274, 275, 276, 279, 282, 283, 284, 285, 287, 288, 300, 314, 321, 326, 330, 334], "160": [135, 150, 154, 155, 156, 288], "1600": 287, "162": [51, 277, 287], "16227766e": 142, "16463699": 104, "1652": 276, "165e": 284, "1660": 276, "168": 279, "1699": [85, 286], "17": [15, 30, 34, 85, 91, 104, 107, 111, 151, 164, 266, 269, 272, 273, 275, 276, 279, 283, 284, 286, 287, 288, 298, 319, 330, 333, 334], "170": 275, "1719": 325, "17330273": 213, "174": 318, "174105": [15, 34, 151, 157, 164, 266, 269], "1751": 161, "177": [331, 334, 335], "1778": 161, "179": [83, 98, 99, 107, 115, 141, 266, 276, 280], "18": [91, 95, 98, 99, 107, 269, 272, 273, 275, 276, 279, 280, 283, 284, 285, 287, 288, 290, 316, 319, 329, 330], "180": 273, "181": 242, "1889": 39, "18it": 330, "19": [269, 272, 273, 283, 284, 287, 288, 293, 330], "190": [51, 277, 287], "19011": [116, 121, 165, 167, 170, 172, 284], "19016": [116, 121, 165, 167, 170, 172, 284], "1905": 39, "1913": 63, "19136811": 285, "1914": 63, "1935": 287, "194108": 287, "1944": 287, "1963": 31, "1965": 240, "1966": 22, "1967": [96, 276], "1971": 149, "1972": [135, 150, 154, 155, 156], "1975": [15, 269], "1977": 242, "1979": 149, "1982": [18, 269], "1984": 284, "1985": 161, "1986": [135, 139], "1989": [149, 276], "1992": [51, 277, 287], "1994": [55, 264, 283], "1999": [39, 279], "19it": 330, "19th": 269, "1d": [41, 109, 261, 265, 303, 316, 317, 334, 335], "1e": [11, 14, 19, 20, 22, 25, 26, 27, 32, 34, 35, 36, 40, 42, 43, 44, 49, 51, 55, 57, 65, 68, 69, 70, 71, 72, 73, 75, 96, 102, 104, 106, 107, 108, 109, 111, 136, 137, 138, 144, 164, 166, 168, 177, 183, 184, 185, 186, 189, 195, 197, 218, 270, 272, 273, 275, 277, 278, 280, 282, 283, 284, 288, 292, 305, 309, 312, 314, 320, 321, 322, 324, 326, 329, 330, 331], "1e12": 161, "1e7": 161, "1ee": 111, "1f": 275, "1i": [102, 106, 107, 108], "1l": 63, "1st": [271, 278, 324], "2": [6, 10, 11, 12, 15, 22, 23, 26, 27, 30, 31, 32, 34, 35, 36, 40, 42, 43, 44, 45, 47, 51, 53, 55, 57, 60, 62, 63, 65, 68, 73, 74, 75, 76, 77, 83, 85, 91, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 123, 125, 127, 132, 133, 135, 136, 138, 141, 142, 144, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 167, 180, 186, 188, 189, 190, 191, 197, 198, 200, 205, 211, 212, 217, 218, 219, 223, 224, 225, 226, 230, 232, 234, 236, 239, 240, 241, 242, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 295, 297, 298, 299, 300, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "20": [23, 25, 31, 123, 143, 157, 195, 197, 200, 236, 242, 269, 271, 272, 273, 277, 278, 283, 284, 285, 287, 301, 302, 306, 310, 312, 315, 319, 320, 321, 322, 330, 332], "200": [63, 271, 273, 275, 276, 320, 325, 331], "2000": [55, 276, 280, 283, 284], "20000": [274, 314], "2002": [51, 264, 277], "2006": [11, 16, 116, 167, 269, 284], "2007": 268, "2008": [49, 111, 163], "2009": [55, 84, 116, 121, 161, 164, 165, 167, 170, 171, 172, 173, 174, 266, 283, 284], "2010": [45, 161, 264, 269, 270, 277, 283], "2011": [15, 34, 91, 107, 123, 132, 133, 143, 151, 157, 164, 218, 264, 266, 269, 276, 283], "2013": [33, 43, 45, 55, 74, 83, 91, 95, 98, 99, 107, 115, 141, 149, 242, 264, 266, 270, 271, 276, 280, 282, 283, 287], "2015": [44, 47, 53, 55, 57, 73, 74, 85, 91, 104, 107, 111, 164, 264, 271, 278, 279, 283, 284, 286, 287], "2016": [23, 47, 55, 111, 113, 198, 200, 236, 266, 281, 283, 285], "2016003": 47, "2017": [20, 21, 55, 102, 103, 110, 266, 283], "2018": [53, 60, 65, 262, 266, 278, 282, 287, 288], "2019": [53, 268, 277, 278, 287], "2020": [44, 49, 57, 65, 73, 74, 107, 109, 264, 279, 287, 288], "2024": 153, "203": [293, 295, 309, 316, 335], "2048": 273, "205": [23, 236], "20661157": 132, "20it": 330, "20l": 63, "21": [157, 269, 273, 276, 283, 284, 287, 330], "2144096814": 157, "215": [321, 334, 335], "21it": 330, "22": [139, 199, 269, 273, 276, 284, 287, 330], "222": [333, 334, 335], "22373758": 34, "226": [332, 334, 335], "22727273": 132, "22it": 330, "23": [44, 55, 57, 65, 73, 74, 104, 107, 109, 111, 113, 195, 197, 200, 264, 266, 269, 273, 279, 283, 284, 285, 287, 288, 330], "23005443": 104, "2324": 63, "2325": 63, "23424263": 123, "235": [298, 302, 335], "23690297": 104, "237": 330, "2382": 63, "2386": 266, "2396": 266, "23it": 330, "24": [42, 43, 53, 60, 262, 269, 271, 273, 278, 282, 284, 287, 330], "24006": 42, "241703": [60, 262, 282], "244103": 163, "244109": [53, 278], "245184012077516e": 272, "246": [305, 316, 335], "247": [53, 264, 278, 330], "248": 330, "24913759": 279, "24it": 330, "25": [22, 33, 47, 240, 264, 269, 271, 273, 279, 283, 284, 285, 287, 290, 330], "250": [284, 291, 297, 308], "2500": 278, "25000": 271, "255": 330, "256": [273, 285], "257": 276, "258": 276, "259": 330, "26": [104, 149, 269, 273, 277, 284, 287, 293, 330], "26087221": 279, "261": 330, "264e": 284, "265": [53, 264, 278, 318, 330, 334, 335], "267": 330, "269": 330, "26914935": 34, "27": [42, 269, 273, 284, 287, 330], "270": 330, "271": 330, "272": 330, "274": 330, "275": [330, 334, 335], "276": 330, "277": 330, "278": 330, "279": 330, "28": [22, 31, 45, 264, 269, 270, 272, 273, 283, 284, 287, 330], "280": 330, "2808034725": 157, "281": 330, "28104": 288, "282": [276, 277], "28280506": 283, "283": [53, 278, 330], "284": 330, "285": 330, "28585667": 123, "286": [276, 322, 330, 334, 335], "287": 330, "288": 330, "289": 330, "29": [164, 268, 269, 273, 284, 287, 330], "295326015231058": 104, "298": [219, 310, 316, 335], "29it": 330, "2_2": 200, "2d": [23, 261, 265, 269, 303, 316, 317, 334, 335], "2dt": 161, "2e": [31, 195, 197, 284, 330], "2f": [273, 275, 311], "2nd": [271, 278, 324], "2t": 281, "2x": 281, "2x_1": [36, 281], "3": [6, 10, 22, 23, 25, 26, 27, 31, 32, 34, 35, 36, 40, 42, 43, 47, 51, 53, 55, 57, 63, 74, 84, 91, 94, 96, 98, 102, 106, 107, 108, 109, 111, 112, 116, 121, 136, 138, 142, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 164, 167, 189, 199, 200, 212, 225, 236, 242, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 301, 304, 305, 306, 310, 314, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 332, 333, 335], "30": [18, 37, 44, 53, 57, 65, 73, 74, 107, 109, 240, 260, 264, 272, 273, 274, 278, 279, 282, 284, 287, 288, 311, 330], "300": [26, 273, 319], "3000": [103, 273, 277, 309], "301": [320, 334, 335], "305": [326, 334, 335], "30729828": 104, "309": [313, 316, 335], "31": [102, 103, 266, 273, 287, 330], "31029752": 104, "31223042041529e": 272, "315": [53, 278, 280], "32": [33, 242, 273, 280, 287, 330], "323": [325, 334, 335], "326": [311, 316, 335], "327": 269, "328": [306, 315, 316, 335], "33": [44, 63, 73, 273, 312, 330], "34": [195, 197, 273, 277, 330], "34081364": 123, "3420": 63, "343": [297, 302, 335], "34it": 330, "35": [195, 197, 275, 284, 330], "3500": 293, "3502450": 277, "351": 164, "3598109385": 276, "36": [130, 311, 330], "360": [96, 276], "361": [294, 295, 335], "363": [96, 276], "3634": [55, 264, 283], "37": 330, "371": [23, 236], "3741": 63, "375": 242, "37522581": 104, "37it": 330, "38": [157, 284, 330, 335], "38169055": 104, "389": 242, "39": [272, 275, 277, 280, 281, 283, 287], "392": 161, "3932": [198, 200, 281], "3934": 47, "3937": [198, 200, 281], "39412183": 287, "3d": [236, 290, 293, 294, 301, 328], "3e": [43, 60, 273, 275, 280, 284, 330], "3f": [276, 284, 287, 321, 325], "3rd": [271, 278, 324], "3x250n": 272, "3x3": [29, 240], "3x_1": 36, "3x_1x_2": 281, "4": [23, 32, 33, 34, 35, 36, 42, 43, 55, 60, 65, 74, 94, 102, 104, 106, 107, 108, 109, 130, 131, 138, 142, 144, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 164, 212, 223, 225, 236, 240, 242, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 299, 304, 305, 312, 323, 324, 330, 332, 333], "40": [33, 34, 55, 57, 131, 272, 273, 277, 284, 297, 301, 306, 307, 311], "400": [287, 299, 332], "4000": [103, 104, 109, 110, 111], "40095045": 287, "401": [23, 236, 273], "40180041": 104, "40228095": 287, "40235857": 287, "406": 264, "40909091": 123, "40it": 330, "41": [18, 42, 149, 326], "41076105": 104, "4138": [23, 236], "41it": 330, "42": [11, 22, 27, 32, 34, 35, 36, 40, 43, 271, 275, 278, 306, 315], "4251": 42, "42643471": 280, "429": 164, "43429448": [132, 133, 147], "43682481": 104, "43it": 330, "44035732": 104, "44083423": 104, "4443": 63, "44444444": 144, "44616147": 130, "44640052": 130, "45": [25, 116, 121, 130, 270, 284, 293, 307], "45454545": [121, 133], "46": 310, "461": [23, 236], "465": [299, 302, 335], "47": [273, 284], "470411451824475e": 272, "479": 219, "48": [51, 264, 277, 284], "4822": [107, 123, 132, 133, 143], "4827": [107, 123, 132, 133, 143], "48999019": 279, "48it": 330, "49": 260, "49122158": [132, 133, 147], "497": [323, 334, 335], "4d": 63, "4d0": 268, "4d1": 268, "4e": 330, "4th": [271, 278, 324], "5": [10, 11, 14, 18, 22, 23, 25, 26, 30, 32, 33, 34, 38, 40, 41, 42, 43, 45, 55, 57, 60, 62, 74, 93, 94, 102, 106, 107, 108, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 147, 157, 177, 191, 212, 218, 225, 226, 236, 241, 242, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 297, 299, 302, 304, 305, 306, 307, 309, 312, 313, 314, 316, 318, 319, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335], "50": [25, 161, 264, 272, 273, 274, 277, 278, 280, 283, 285, 288, 290, 292, 294, 305, 307, 311, 312, 314, 323, 330, 332], "500": [11, 30, 32, 34, 42, 103, 269, 270, 273, 274, 275, 277, 282, 283, 288, 290, 294, 300, 301, 305, 309, 312, 314, 318, 332], "5000": [33, 269, 273, 280, 287, 320, 321, 322, 325, 332], "50000": [279, 306, 310, 311, 315, 319], "500000": 269, "5002": [44, 55, 57, 73, 107, 283, 287], "501": [327, 334, 335], "5011": [44, 55, 57, 73, 107, 283, 287], "5011399": [60, 262, 282], "503": [116, 167, 284], "50413223": 130, "50it": 330, "51": 47, "5100267": 277, "5112": 63, "5113": 63, "512": [273, 288], "523": 167, "53": [22, 27, 32, 34, 35, 36, 40, 43, 314], "53128": 42, "5344": 42, "54545455": 131, "54545455e": 142, "547": [314, 316, 335], "55": [26, 189, 284, 307], "551e": 275, "5593": 63, "55it": 330, "56": 325, "5600": 287, "5620": [55, 283], "5630": [55, 283], "57": [284, 325], "570": [328, 334, 335], "571": 164, "572": 316, "57356529": 280, "57863921": 273, "58": 157, "580": [290, 291, 292, 293, 294, 295, 301, 302, 304, 305, 307, 308, 309, 313, 314, 316, 321, 322, 323, 327, 328, 330, 333, 334, 335], "581": [297, 299, 300, 302, 312, 315, 316, 326, 331, 335], "582": [306, 310, 316, 335], "583": [311, 316, 335], "584": [334, 335], "585": 318, "586": [319, 320, 334, 335], "58923895": 104, "58it": 330, "59": 280, "590": [329, 334, 335], "592": [298, 302, 335], "59it": 330, "5e": [43, 65, 272, 330], "5f": 288, "5l": 63, "5th": [18, 324], "6": [20, 23, 36, 42, 44, 47, 49, 51, 55, 57, 65, 68, 71, 75, 102, 106, 107, 108, 109, 136, 157, 164, 197, 212, 218, 225, 236, 239, 242, 260, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 297, 299, 300, 301, 313, 314, 327, 328, 329, 330, 334, 335], "60": [272, 307], "60624287": 143, "6114": 282, "6122": 63, "61266834": 283, "6162": 273, "617": [334, 335], "618": [312, 316, 332, 335], "61830945": 104, "61it": 330, "62": [277, 284], "63": 284, "635": [74, 107, 149, 287], "63915185": 104, "63it": 330, "64": [282, 284], "64285714": 104, "649": 164, "64it": 330, "65": 284, "6540958274695701": 104, "655": [74, 107, 149, 287], "656": [45, 264, 270, 283], "65760997": 283, "66": [44, 57, 65, 73, 74, 107, 109, 264, 271, 279, 287, 288], "6695964336395264": 272, "66it": 330, "67": 284, "67329635": 34, "68": [157, 277], "692": 302, "69307665": 104, "694": [290, 295, 335], "6993": 161, "6e": [275, 330], "7": [38, 55, 83, 84, 98, 99, 102, 104, 106, 107, 108, 109, 115, 116, 121, 127, 141, 149, 157, 161, 164, 167, 171, 173, 174, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 297, 304, 316, 324, 325, 326, 327, 328, 329, 330, 334, 335], "70": [272, 311], "70000001": 104, "71108663": 104, "71979377": 143, "72": [55, 264, 283], "723": [291, 295, 335], "724": 334, "725": [301, 302, 335], "7277129888534546": 272, "7298": 273, "72it": 330, "73": [96, 273, 276], "738": 273, "73943019": 34, "74": [273, 284, 297], "75": [42, 189, 291, 326, 330], "753": [329, 334, 335], "75354": 260, "75647": 273, "76": [273, 285], "7622": 273, "7699596561010507": 287, "77": [23, 236, 276, 284], "77350269e": 127, "777": [275, 324, 334, 335], "7804": 223, "782": [334, 335], "783": 325, "78799": 288, "79": 47, "7911": 284, "797": [266, 324, 334, 335], "7e": 330, "7x_2": 281, "8": [31, 34, 36, 42, 55, 102, 104, 106, 107, 108, 109, 111, 137, 164, 189, 242, 264, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 297, 299, 301, 311, 313, 314, 319, 324, 326, 327, 328, 329, 330, 332, 334, 335], "80": [34, 55, 161, 272, 273, 322], "800": 287, "8000": 273, "8025465225218795e": 272, "81it": 330, "82": [42, 242], "82456604": 285, "8265": [102, 103, 266], "8270": [102, 103, 266], "8271698355674744": 272, "82it": 330, "83": 284, "8305": 273, "833": 164, "838": 260, "83it": 330, "84": 284, "8407": 143, "85": 284, "8534787431760964": 287, "8534787431760968": 287, "8598": 273, "85994006": 104, "85it": 330, "86": 273, "863": 161, "8649215": 104, "869": 164, "871": 161, "8756899833679199": 272, "88": [273, 284], "8802": 273, "887": 284, "88749": 273, "89": [121, 284], "89it": 330, "8e": 330, "9": [29, 39, 55, 65, 84, 93, 102, 106, 107, 108, 109, 110, 113, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 137, 138, 139, 142, 143, 144, 147, 157, 195, 262, 264, 266, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 297, 327, 329, 330], "90": [38, 272, 274, 284], "90147543e": 127, "9025066494941711": 272, "9049811296": 104, "909090909": 128, "90909091": 131, "909895469938899": 104, "90ee90": 286, "91": [274, 284], "92": 284, "923": [300, 302, 335], "92383913": 287, "9238391327369158": 287, "93": [23, 236, 284], "93571706": 104, "94770005": 288, "948": 164, "94it": 330, "95": [37, 38, 92, 104, 105, 191, 196, 202, 205, 226, 276, 283], "95227187": 288, "952666444703937e": 272, "96": [189, 326], "96181851": 280, "9684250354766846": 272, "97": [30, 241, 275, 279, 280, 283, 298], "97057023": 279, "9708256": 279, "97116296": 279, "97150033": 279, "9716128": 280, "97170971": 279, "97174192": 279, "972": [33, 287], "9763615793248155": 104, "97it": 330, "98": 284, "98it": 330, "99": [102, 106, 107, 108, 284], "9913478370843": 276, "999": 281, "99e2": 274, "99it": 330, "9e": 330, "A": [0, 1, 2, 9, 10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 39, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 74, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 100, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 116, 119, 121, 122, 129, 133, 134, 135, 136, 137, 138, 142, 143, 149, 154, 161, 163, 164, 167, 170, 171, 172, 173, 174, 179, 187, 189, 190, 195, 196, 197, 199, 200, 211, 212, 220, 221, 223, 225, 237, 238, 239, 240, 242, 264, 266, 268, 269, 270, 271, 274, 276, 278, 279, 280, 283, 284, 286], "AND": 268, "AS": 268, "And": [63, 104, 109, 132, 133, 271, 272, 274, 276, 279, 282, 284, 286, 287], "As": [55, 268, 269, 276, 280, 283, 284, 286, 287], "At": 266, "BE": 268, "BUT": 268, "But": 284, "By": [44, 55, 89, 90, 93, 94, 95, 97, 102, 106, 107, 108, 110, 111, 117, 120, 153, 193, 196, 198, 199, 219, 281, 282, 283, 287], "FOR": 268, "For": [9, 10, 11, 12, 15, 16, 18, 30, 33, 44, 55, 57, 62, 63, 65, 83, 85, 86, 91, 95, 98, 109, 111, 112, 117, 118, 119, 120, 135, 139, 148, 149, 151, 153, 171, 190, 198, 200, 218, 239, 242, 268, 269, 270, 271, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 330, 332], "IN": 268, "ITS": 323, "If": [6, 8, 11, 13, 14, 15, 16, 17, 18, 34, 44, 45, 47, 55, 57, 58, 60, 63, 73, 74, 84, 86, 91, 92, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 125, 126, 127, 128, 131, 135, 137, 147, 148, 149, 151, 161, 163, 164, 165, 177, 178, 181, 188, 189, 190, 194, 195, 197, 199, 200, 202, 205, 209, 210, 211, 218, 219, 225, 226, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 244, 260, 263, 266, 268, 269, 270, 272, 276, 279, 281, 283, 284, 286, 287, 288], "In": [1, 11, 12, 15, 18, 19, 22, 30, 44, 45, 47, 51, 55, 57, 60, 63, 74, 86, 92, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 135, 137, 149, 153, 161, 187, 189, 190, 192, 193, 212, 220, 224, 225, 227, 236, 238, 241, 242, 243, 244, 262, 266, 268, 269, 270, 271, 272, 274, 276, 277, 279, 282, 283, 284, 285, 286, 287, 288, 326, 328], "It": [0, 8, 10, 12, 15, 22, 25, 26, 31, 32, 33, 35, 36, 39, 42, 44, 47, 48, 55, 56, 57, 63, 71, 72, 73, 77, 86, 95, 96, 107, 112, 123, 132, 161, 171, 189, 195, 197, 198, 199, 216, 223, 228, 230, 242, 263, 264, 269, 270, 271, 272, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288], "Its": [37, 38, 63, 104, 242, 287], "NO": 268, "NOT": 268, "No": [15, 20, 21, 34, 44, 55, 57, 60, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 116, 121, 123, 132, 133, 143, 151, 164, 262, 264, 266, 269, 276, 279, 282, 283, 284, 285, 286, 287, 288], "Not": [112, 268], "OF": 268, "OR": 268, "On": [22, 45, 47, 264, 270, 283, 284], "One": [66, 85, 86, 111, 112, 164, 240, 242, 261, 269, 272, 280, 284, 285, 286, 287, 292, 303, 305, 316, 324, 335], "Or": [22, 27, 32, 34, 35, 36, 40, 43, 74, 102, 106, 107, 108, 112, 272], "Such": [268, 269], "THE": 268, "TO": 268, "That": [22, 27, 32, 35, 36, 43, 91, 280, 281, 284], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 121, 123, 125, 127, 128, 132, 133, 134, 137, 139, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 225, 227, 228, 229, 230, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 263, 264, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 293, 294, 297, 298, 312, 325, 326, 327], "Then": [26, 57, 85, 102, 106, 107, 108, 276, 283, 284], "There": [44, 45, 91, 223, 277, 278, 284, 287], "These": [58, 65, 86, 111, 263, 264, 266, 278, 279, 281, 285, 286, 287, 288], "To": [63, 101, 171, 223, 263, 269, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "WITH": 268, "Will": [58, 74, 91], "With": [25, 252, 272, 273, 277, 279, 281, 284], "_": [44, 57, 76, 77, 78, 79, 80, 81, 94, 102, 106, 107, 108, 121, 123, 128, 132, 133, 143, 153, 161, 189, 228, 264, 269, 273, 274, 275, 277, 278, 280, 283, 284, 287, 290, 320], "_0": [153, 177], "_1": 269, "_2": [79, 104, 109, 164, 277], "__": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200], "__call__": [3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 20, 21, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 77, 78, 79, 80, 81, 85, 203, 230, 236, 238, 243, 244, 273], "__getitem__": [0, 224, 225, 273], "__init__": [85, 91, 103, 106, 263, 273], "__len__": [0, 224, 225, 273], "__main__": 330, "__name__": 330, "__traceback__": 175, "_around": 216, "_base": [49, 69], "_biased_conf_energi": 285, "_c": 95, "_clustering_bind": [11, 13, 14, 17], "_coeff": 216, "_d": [6, 269], "_evalu": [76, 77, 78, 79, 80, 81], "_f": [47, 270], "_full": [86, 92, 98], "_i": [91, 121, 177, 269, 271, 283, 284], "_j": [11, 44, 269, 283], "_k": 153, "_kernel": 69, "_mean": 263, "_metric": 17, "_model": 263, "_monomi": [44, 49, 55, 56, 57, 283], "_n": 153, "_np": 176, "_particl": 287, "_r": 181, "_scale": 189, "_sequenti": [282, 288], "_size": 189, "_state": [86, 92, 98, 104], "_t": [93, 97, 177, 287], "_to_logvar": 282, "_to_mu": 282, "_tram": 285, "_x": [139, 270, 277], "_xa": 270, "_y": 277, "_z": 139, "a_": [93, 281, 286], "a_1": 179, "a_i": [91, 102, 106, 107, 108, 128, 129], "a_n": 179, "aaron": [91, 276], "ab": [172, 231, 232, 233, 234, 235, 269, 271, 273, 275, 276, 278, 284, 288, 325], "abc": 290, "abc_flow": [259, 290], "abl": [104, 260, 270, 286, 292, 305], "about": [92, 102, 105, 106, 107, 108, 112, 199, 202, 266, 271, 275, 278, 279, 287], "abov": [63, 102, 104, 106, 107, 108, 200, 228, 232, 234, 268, 273, 276, 280, 281, 283, 284, 287], "absolut": [70, 127, 166, 168, 177, 276], "absorb": [29, 240], "abstract": [0, 1, 3, 97, 263], "acad": [165, 167, 170, 172], "academi": [102, 103, 107, 111, 113, 116, 121, 123, 132, 133, 143, 198, 200, 266, 281, 284, 285], "acc": 275, "accept": [18, 63, 73, 223, 268], "access": [11, 13, 14, 17, 20, 28, 34, 45, 47, 49, 53, 55, 57, 60, 62, 63, 65, 85, 102, 104, 106, 107, 108, 263, 276, 279, 280, 283, 284, 286, 287], "accessor": 268, "accident": 268, "accompani": 268, "accord": [15, 21, 44, 73, 85, 95, 102, 106, 107, 108, 109, 115, 118, 119, 120, 142, 150, 151, 153, 162, 164, 189, 190, 195, 219, 236, 238, 240, 243, 244, 260, 269, 273, 275, 282, 285, 326], "accordingli": [91, 94, 96, 98], "account": [15, 44, 73, 98, 189, 273, 277, 283], "accur": [102, 106, 107, 108, 242], "accuraci": [96, 161, 274], "acf": [102, 106, 107, 108], "acf_a": [102, 106, 107, 108], "achiev": [44, 63, 269, 287], "acm": [33, 242, 287], "across": [86, 236, 243, 287], "act": [30, 242, 271, 287], "action": [57, 268, 287], "activ": [83, 91, 95, 102, 106, 107, 108], "actual": [11, 14, 44, 55, 57, 83, 85, 92, 95, 102, 106, 107, 108, 110, 116, 269, 280, 284, 286, 287], "ad": [13, 15, 17, 63, 65, 70, 98, 160, 200, 218, 240, 242, 259, 269], "adam": [60, 62, 65, 273, 277], "adapt": 277, "add": [13, 15, 63, 175, 240, 263, 273, 284], "add_artist": [275, 325], "add_barri": [240, 284, 297, 327, 329], "add_collect": [293, 294, 306, 310, 311, 315], "add_edg": [280, 284], "add_gridspec": [271, 273, 275, 276, 277, 278, 324, 333], "add_modul": 63, "add_nod": [280, 284], "add_not": 175, "add_subplot": [271, 273, 275, 276, 277, 278, 290, 293, 294, 301, 324, 328, 333], "addit": [1, 8, 11, 14, 15, 18, 20, 30, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 73, 85, 91, 95, 96, 102, 103, 104, 106, 107, 108, 109, 110, 111, 116, 176, 198, 230, 231, 232, 240, 241, 243, 244, 268, 285, 287], "address": 268, "adjac": [150, 154, 155, 156, 189, 190, 284, 286], "adjacency_matrix": [189, 190], "adjenc": 135, "adjoint": 121, "advanc": [83, 98, 99, 107, 115, 141, 266, 276, 280], "advantag": [11, 16, 269, 283, 287], "advis": 171, "affect": 63, "affin": 272, "after": [20, 44, 45, 48, 50, 52, 54, 55, 56, 57, 63, 65, 70, 85, 86, 95, 98, 102, 106, 107, 108, 111, 112, 130, 131, 186, 202, 212, 223, 269, 276, 279, 285, 286, 287], "afterward": [37, 38, 63, 287], "again": [11, 14, 91, 242, 269, 277, 282, 283, 285], "against": [13, 17, 44, 60, 62, 63, 95, 112, 228, 281], "agg_backend": [291, 299], "aggreg": [18, 20, 161, 280, 281], "agre": [102, 106, 107, 108], "agreement": [260, 272], "aid": 262, "al": 266, "ala_coords_fil": 272, "alexand": [279, 284], "algebra": [103, 104, 109, 110, 111, 280], "algo": 95, "algorihtm": 161, "algorithm": [11, 13, 14, 15, 17, 18, 55, 57, 95, 96, 98, 99, 110, 135, 149, 150, 154, 155, 156, 161, 163, 178, 190, 200, 218, 240, 242, 247, 248, 250, 252, 263, 264, 269, 276, 280, 281, 283], "alia": [15, 63, 200], "align": [22, 23, 31, 39, 41, 43, 55, 57, 102, 106, 107, 108, 232, 234, 235, 236, 283, 284, 287], "alireza": [23, 236], "all": [1, 3, 8, 11, 12, 14, 15, 18, 20, 23, 44, 47, 55, 57, 63, 74, 75, 78, 84, 86, 91, 93, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 134, 141, 148, 149, 150, 151, 153, 163, 169, 171, 176, 178, 183, 187, 189, 193, 195, 197, 200, 207, 210, 219, 220, 230, 231, 232, 233, 234, 235, 236, 239, 241, 242, 243, 245, 260, 263, 264, 268, 269, 270, 271, 279, 280, 282, 283, 284, 285, 286, 287, 335], "allow": [15, 25, 26, 28, 63, 112, 181, 200, 268, 273, 276, 285, 287], "allow_disconnect": [109, 273], "almost": [102, 106, 107, 108, 183, 231, 232, 233, 234, 235, 269, 270, 280], "along": [8, 151, 153, 202, 211, 240, 242, 283, 284], "alongsid": [63, 269], "alonzo": [96, 276], "alpha": [32, 98, 152, 158, 159, 160, 200, 218, 241, 270, 272, 274, 275, 279, 281, 283, 287, 294, 301, 304, 307, 313, 328, 331, 333], "alreadi": [22, 27, 32, 34, 35, 36, 40, 43, 63, 68, 83, 84, 98, 99, 104, 106, 107, 112, 115, 191, 199, 202, 223, 225, 230, 236, 240, 268, 269, 270, 271, 273, 276, 279, 281, 282, 283, 284, 287, 288], "also": [9, 10, 11, 12, 14, 15, 18, 44, 45, 55, 57, 58, 63, 65, 66, 73, 76, 77, 78, 79, 80, 81, 85, 86, 92, 95, 102, 105, 106, 107, 108, 109, 111, 135, 138, 149, 164, 182, 189, 197, 198, 202, 203, 213, 223, 231, 232, 233, 234, 235, 240, 242, 262, 263, 266, 268, 269, 270, 272, 273, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 328], "altern": [22, 27, 32, 34, 35, 36, 40, 43, 71, 109, 161, 212, 259, 276, 278], "alternatingli": [242, 287], "although": [63, 269], "alwai": [18, 63, 86, 164, 200, 211, 212, 223, 231, 232, 233, 234, 235, 264, 280, 286], "always_cal": 63, "american": [43, 96, 161, 266, 271, 276, 284], "amm": 103, "amm_optimizer_st": 102, "among": 268, "amount": [11, 55, 57, 189, 196, 264, 283], "amp": [132, 133], "amplitud": [102, 106, 107, 108, 132, 133, 236], "an": [0, 1, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 66, 67, 73, 74, 76, 77, 78, 79, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 123, 128, 132, 133, 143, 149, 150, 157, 161, 177, 180, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 214, 216, 221, 223, 224, 227, 228, 231, 232, 233, 234, 235, 240, 241, 242, 252, 253, 258, 263, 264, 266, 268, 269, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 300, 301, 323, 324, 325, 328, 333], "analog": [269, 282], "analys": [266, 284], "analysi": [39, 51, 53, 55, 83, 84, 86, 91, 98, 99, 102, 106, 107, 108, 109, 110, 111, 115, 125, 127, 135, 136, 137, 138, 142, 144, 147, 149, 161, 253, 259, 264, 266, 269, 276, 277, 278, 280, 283, 284, 285, 287, 330], "analyt": [102, 106, 107, 108], "analytic_msm": [239, 307], "analyz": [86, 254, 266, 283, 287, 288], "anderson": 149, "andrea": [53, 65, 262, 278, 288], "angelo": 284, "angl": 272, "anhil": 237, "ani": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 135, 176, 190, 198, 199, 205, 209, 223, 260, 268, 269, 273, 276, 277, 280, 285, 287, 288, 290, 291, 299, 312], "anim": [242, 273, 287, 290, 301, 312], "ann": 149, "annihil": [24, 237], "annot": [276, 280, 311], "announc": 260, "anoth": [18, 30, 121, 149, 225, 253, 264, 279, 280, 283], "ansatz": [57, 264, 275, 287], "answer": 284, "anymor": 165, "anyth": 279, "api": [66, 110, 195, 197, 213, 263, 269, 270, 271, 276, 279, 280, 281, 282, 283, 284, 286, 288], "apidoc": 286, "append": [104, 223, 273, 274, 284, 285, 290, 312, 318, 323, 330], "append_ax": [284, 326, 329], "appli": [18, 19, 21, 44, 46, 48, 50, 52, 54, 55, 56, 57, 58, 63, 76, 77, 78, 79, 80, 81, 86, 96, 102, 106, 107, 108, 199, 209, 210, 212, 236, 239, 242, 252, 268, 277, 278, 280, 281, 283, 285, 287], "applic": [45, 83, 93, 94, 96, 97, 98, 99, 107, 115, 141, 242, 264, 266, 268, 270, 276, 280, 324, 325], "apply_periodic_boundary_condit": 236, "approach": [23, 44, 49, 53, 57, 65, 73, 74, 85, 102, 106, 107, 108, 109, 111, 112, 148, 149, 151, 153, 236, 242, 264, 278, 279, 282, 286, 287, 288], "appropri": [13, 17, 44, 66, 96, 149, 269, 273, 280, 281, 283, 288], "approx": [44, 47, 187, 198, 199, 216, 262, 281, 287], "approxim": [44, 47, 49, 51, 55, 56, 57, 58, 59, 73, 74, 89, 102, 106, 107, 108, 163, 184, 185, 186, 199, 216, 218, 264, 270, 271, 273, 278, 280, 283, 287, 288, 328], "ar": [4, 8, 10, 11, 12, 14, 15, 18, 19, 20, 21, 23, 29, 33, 37, 38, 40, 41, 44, 45, 55, 57, 58, 60, 62, 63, 64, 65, 66, 68, 70, 73, 74, 77, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 125, 127, 131, 132, 133, 138, 141, 142, 149, 150, 151, 153, 161, 163, 164, 166, 168, 171, 176, 177, 178, 181, 183, 184, 185, 186, 187, 189, 190, 195, 196, 197, 199, 200, 202, 205, 207, 211, 212, 215, 216, 217, 218, 219, 223, 225, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 253, 254, 260, 262, 263, 264, 266, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 318, 319, 325, 326, 327], "arang": [225, 269, 272, 273, 274, 275, 278, 280, 283, 284, 287, 299, 304, 305, 306, 307, 310, 311, 312, 315, 323, 328, 332], "arbitrari": [18, 102, 103, 106, 107, 108, 110, 239, 287], "arbitrarili": [200, 205], "arc": 189, "arc3": [280, 284], "architectur": [275, 282], "arctan": 40, "area": [195, 196, 197, 242, 269, 272, 287], "arg": [3, 9, 10, 11, 12, 14, 20, 21, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 85, 92, 103, 105, 109, 111, 176, 202, 203, 227, 240], "argmax": 272, "argsort": 280, "argument": [1, 8, 11, 14, 15, 18, 20, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 85, 86, 91, 92, 95, 96, 101, 103, 104, 105, 107, 109, 110, 111, 176, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 214, 220, 223, 225, 239, 242, 264, 268, 276, 279, 283, 284, 288], "argument_nam": 214, "argwher": [276, 305], "ari": 223, "ariat": 287, "aris": [264, 268], "arkov": 287, "arnimalle": 260, "arnold": [22, 261, 289, 295, 335], "around": [10, 33, 40, 57, 91, 223, 276, 279, 285, 312, 330], "arpack": [127, 254], "arr": [176, 180], "arr_": 272, "arrai": [0, 8, 9, 10, 11, 12, 14, 16, 18, 22, 25, 26, 27, 32, 34, 36, 40, 43, 44, 66, 67, 70, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 91, 92, 93, 94, 95, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 176, 180, 189, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 212, 216, 219, 223, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 254, 263, 269, 273, 275, 276, 279, 280, 283, 284, 286, 290, 293, 305, 306, 307, 310, 311, 315, 319, 326, 328], "arrang": 270, "array_lik": [1, 3, 4, 5, 6, 7, 8, 11, 14, 15, 18, 20, 24, 45, 47, 49, 51, 53, 55, 57, 60, 61, 62, 64, 65, 66, 74, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 116, 117, 119, 121, 122, 134, 151, 153, 163, 164, 171, 174, 198, 223, 230, 236, 237, 238, 243, 244], "array_split": 275, "array_str": 164, "arriv": [237, 280], "arrow": [189, 195, 197], "arrow_label": 189, "arrow_label_s": [195, 197], "arrowprop": 311, "arrows": 284, "arrowstyl": [280, 284, 311], "art": 266, "art3d": [293, 294], "arthur": [11, 16, 269], "artif": 98, "artifici": [10, 73, 85, 242], "arxiv": [45, 49, 91, 264, 270, 276, 282], "asanyarrai": 325, "asarrai": [93, 330], "asid": 242, "ask": [283, 284], "aspect": [191, 226, 266, 281], "aspir": 263, "assembl": [84, 171], "assert": [22, 25, 26, 27, 30, 32, 34, 35, 36, 40, 43, 104], "assert_almost_equ": 6, "assert_equ": [55, 85], "assertionerror": [209, 210, 236, 238, 243, 244], "assess": 269, "assign": [9, 10, 11, 12, 14, 15, 16, 63, 65, 83, 93, 94, 95, 97, 98, 99, 102, 104, 106, 107, 108, 115, 121, 141, 189, 231, 232, 233, 234, 240, 242, 263, 266, 269, 272, 273, 280, 283, 284, 319, 320, 325, 327], "assignments_perm": 325, "associ": [11, 63, 93, 94, 95, 97, 108, 161, 268, 269, 271, 277, 278, 283, 284, 287], "assum": [1, 8, 11, 14, 15, 18, 20, 26, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 73, 83, 85, 86, 91, 95, 96, 98, 103, 104, 107, 108, 109, 110, 111, 112, 115, 148, 149, 181, 198, 199, 202, 219, 225, 230, 240, 264, 266, 270, 283, 285, 287, 288], "assume_uniqu": 273, "assumpt": [45, 55, 149, 161, 228, 264, 270, 280], "astronom": 242, "astyp": [208, 210, 272, 273, 275, 282, 285, 288, 299], "asymmetr": [36, 261, 303, 316, 335], "asympot": 164, "asynchron": 63, "atleast_": 223, "atleast_1d": 223, "atleast_2d": 223, "atleast_3d": 223, "atleast_nd": 259, "atmospher": 31, "atol": [166, 168], "atom": 272, "attach": [279, 284], "attempt": [200, 281], "attent": [86, 268], "attila": 284, "attract": 39, "attractor": [39, 261, 289, 295, 335], "attribut": [1, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 34, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 189, 195, 198, 199, 202, 204, 206, 207, 208, 209, 210, 213, 224, 226, 227, 236, 237, 238, 239, 240, 241, 242, 243, 244], "attribute_to_plot": [195, 326], "attributeerror": 63, "augment": [102, 103, 266], "augmentedmsm": 103, "author": [260, 268], "authorofthecomplicatedalgo1988": 263, "auto": [13, 17, 18, 67, 123, 132, 142, 164, 189, 195, 197, 231, 232, 233, 234, 235, 269, 282], "autocorrel": [18, 55, 57, 102, 106, 107, 108, 123, 132, 149, 233, 234, 235, 283], "autocovari": 55, "autoencod": [60, 61, 62, 64, 262], "autograd": 63, "autom": 164, "automat": [18, 83, 95, 98, 104, 115, 163, 190, 195, 197, 231, 232, 233, 234, 235], "autonom": [1, 8, 49], "autoscal": 298, "auxiliari": 277, "avaiabl": 287, "avail": [1, 8, 11, 13, 14, 15, 16, 17, 18, 44, 45, 49, 53, 55, 57, 74, 84, 85, 91, 92, 95, 96, 98, 99, 102, 106, 107, 108, 118, 120, 149, 222, 226, 227, 236, 238, 243, 244, 263, 264, 266, 269, 272, 276, 283, 285, 286, 287], "available_driv": 45, "available_mod": [45, 46], "available_oper": 47, "averag": [44, 63, 73, 85, 102, 103, 106, 107, 108, 111, 112, 276, 286, 287], "avoid": [63, 98, 99], "avoid_zero_count": [193, 321], "awar": 287, "ax": [110, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 240, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 290, 291, 293, 294, 297, 298, 300, 301, 304, 306, 307, 310, 311, 312, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333], "ax1": [269, 271, 273, 275, 276, 282, 283, 285, 288, 300, 309, 314, 319, 320, 321, 325, 330], "ax2": [269, 271, 273, 275, 276, 282, 283, 288, 300, 309, 314, 319, 320, 321, 325], "ax3": [275, 276, 283, 325], "ax4": [275, 325], "ax_contour": 275, "ax_pca": 333, "ax_project": 333, "ax_t": 270, "ax_tica": 333, "ax_vamp": 333, "axes_grid1": [284, 326, 329], "axessubplot": 275, "axi": [8, 23, 95, 191, 195, 202, 212, 223, 236, 240, 263, 269, 272, 281, 283, 285, 293, 294, 305, 306, 310, 311, 315, 319, 320, 321, 322], "az_k": 270, "azim": 301, "b": [22, 39, 84, 91, 93, 95, 102, 104, 106, 107, 108, 111, 112, 113, 116, 121, 122, 123, 132, 149, 153, 157, 158, 159, 160, 163, 167, 170, 171, 172, 173, 237, 242, 268, 271, 273, 279, 281, 284, 285, 304, 328], "b2": 273, "b950": 63, "b_": [91, 98, 158, 159, 160], "b_i": [93, 153], "b_ij": [91, 160], "b_j": 153, "bach": [51, 264, 277], "back": [84, 86, 107, 189, 262, 263, 266, 271, 273, 275, 276, 283, 284, 285, 286, 330], "back_transform": [273, 275], "backbon": 272, "backend": [272, 273, 282, 288], "background": 287, "backtransform": 273, "backward": [44, 48, 50, 52, 54, 56, 57, 63, 84, 98, 102, 106, 107, 108, 116, 121, 122, 135, 144, 167, 170, 172, 235, 237, 273, 277, 284, 287, 332], "backward_committor": [84, 167, 284], "backward_pr": 63, "bad": [239, 276], "balanc": [91, 96, 163, 164, 264, 279, 280, 283, 284, 287], "bandwidth": [76, 77, 79, 81, 275, 277, 278], "banisch": [55, 283], "bar": [11, 29, 44, 57, 65, 85, 95, 102, 106, 107, 108, 111, 112, 149, 194, 203, 204, 216, 218, 221, 228, 240, 269, 272, 284, 285, 286, 287, 288, 304, 307], "bar_loc": [29, 240, 284, 297, 327, 329], "bar_stat": [284, 329], "bar_vari": [112, 285], "bare": 95, "barrier": [240, 284], "barrier_mod": [240, 284, 327], "base": [0, 1, 2, 3, 8, 11, 14, 23, 33, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 62, 65, 67, 68, 71, 73, 74, 75, 78, 84, 85, 95, 102, 103, 104, 106, 107, 108, 110, 111, 112, 161, 163, 177, 183, 184, 185, 186, 189, 190, 192, 193, 195, 203, 219, 225, 236, 241, 242, 246, 259, 260, 261, 263, 264, 265, 266, 268, 272, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 296, 302, 317, 321, 322, 326, 330, 334, 335], "basi": [4, 5, 6, 7, 10, 19, 21, 44, 47, 48, 49, 55, 56, 57, 71, 199, 259, 264, 271, 275, 281, 283, 287], "basic": [97, 270, 282, 283], "basis_transform_backward": 44, "basis_transform_forward": 44, "batch": [14, 55, 57, 60, 62, 65, 81, 273], "batch_0": 273, "batch_siz": [14, 269, 272, 273, 275, 282, 288], "batch_t": 273, "batchnorm": 63, "batchnorm1d": [272, 273], "batchsampl": 273, "baum": [95, 96, 276], "bay": 282, "bayesian": [83, 85, 91, 92, 95, 96, 98, 104, 105, 107, 111, 112, 227, 228, 252, 272, 286, 323], "bayesianhmm": [92, 95, 259, 276], "bayesianhmmposterior": [91, 259, 276], "bayesianmsm": [105, 106, 107, 109, 259, 272, 279, 318, 323], "bayesianmsmposterior": [104, 259], "bbox": [274, 275, 311], "bbox_to_anchor": 304, "bd": 304, "beauchamp": 164, "becaus": [11, 14, 91, 102, 103, 104, 106, 107, 108, 109, 110, 111, 149, 163, 200, 231, 232, 233, 234, 235, 242, 263, 264, 280, 285, 287], "becom": [15, 171, 223, 269, 283, 287], "been": [20, 86, 93, 95, 102, 106, 107, 108, 109, 121, 199, 240, 268, 269, 272, 281, 284, 287], "befor": [11, 14, 33, 55, 63, 74, 85, 95, 98, 102, 104, 106, 107, 108, 109, 111, 137, 164, 177, 183, 184, 185, 186, 200, 218, 223, 236, 237, 240, 278, 283, 284], "beforehand": 95, "begin": [22, 23, 24, 30, 31, 37, 38, 39, 41, 43, 55, 57, 98, 102, 106, 107, 108, 121, 139, 158, 159, 160, 167, 171, 223, 232, 234, 235, 236, 237, 240, 241, 268, 276, 277, 281, 283, 284, 286, 287], "behav": [108, 109, 228, 272, 280], "behavior": [63, 65, 103, 104, 108, 109, 110, 111, 236, 280, 281], "behaviour": [11, 14], "behind": [270, 281], "being": [11, 27, 35, 36, 42, 43, 47, 63, 70, 102, 106, 107, 108, 121, 187, 240, 268, 280, 281, 284, 285, 288], "belief": 276, "belong": [83, 95, 102, 106, 107, 108, 112, 262, 276, 279, 283, 286], "below": [63, 86, 92, 95, 98, 149, 200, 223, 268, 269, 279, 283, 287], "beltrami": [22, 261, 289, 295, 335], "benchmark": [30, 272, 273, 282, 288], "benjamin": [85, 91, 104, 107, 111, 164, 279, 286], "berezhkovskii": 284, "berlin": [85, 260, 286], "bessel": [18, 19], "bessels_correct": [18, 19], "best": [57, 200, 270, 273, 281, 287, 288], "beta": [31, 32, 35, 40, 62, 152, 278, 312], "better": [149, 264, 269, 284, 288], "bettina": [15, 34, 91, 151, 153, 164, 266, 269, 276], "between": [11, 14, 15, 18, 22, 27, 29, 32, 34, 35, 36, 40, 41, 43, 44, 51, 63, 73, 84, 85, 86, 91, 93, 95, 96, 98, 102, 104, 106, 107, 108, 110, 112, 121, 135, 139, 153, 165, 166, 167, 168, 169, 170, 172, 173, 174, 189, 198, 199, 236, 237, 238, 240, 243, 244, 253, 266, 269, 270, 276, 277, 280, 282, 283, 284, 285, 286, 287, 319], "bfloat16": 63, "bhmm": [91, 268], "bia": [63, 110, 111, 112, 113, 153, 199, 266, 272, 282, 285, 288, 330], "bias": [104, 112, 219, 264, 266, 283, 285], "bias_cent": [285, 330], "bias_funct": [285, 330], "bias_list": 112, "bias_matric": [111, 112, 113, 285, 330], "bias_var": 273, "biased_conf_energi": [111, 113, 285, 330], "biased_energi": [285, 330], "biased_potenti": 285, "bib": 263, "bibtex": 263, "bicklei": [23, 236, 261, 265, 277, 289, 295, 317, 334, 335], "bickley_data": 277, "bickley_jet": [259, 273, 277, 291, 324], "bickleyjet": [23, 259, 273], "bickleyjet3dtorchd": 273, "bickleyjetdataset": 23, "bifurc": 39, "big": [18, 277], "bin": [23, 28, 111, 112, 113, 219, 239, 269, 272, 274, 278, 283, 285, 304, 309, 313, 314, 319, 322, 330], "bin_indic": 113, "bin_numb": 285, "binari": 275, "bind": [13, 17, 203, 254, 260, 269], "binned_sampl": 113, "binomi": [76, 81], "biomolecular": [107, 123, 132, 133, 143], "birth": [24, 237, 261, 303, 316, 335], "birth_death_chain": [259, 304], "birthdeathchain": [24, 259], "bit": 282, "bittrach": [53, 278], "black": [271, 275, 280, 288, 304, 305, 307], "blit": [273, 290, 301, 312], "blitz": [83, 98, 99, 107, 115, 141, 266, 276, 280], "block": [18, 58, 74, 149, 212, 264, 282], "blocksiz": [58, 74, 275], "blocksplit": 74, "blocksplit_dtraj": 74, "blocksplit_traj": 259, "blue": [280, 284, 293, 325, 327], "bmatrix": 281, "bmsm": [272, 279], "bmsm_posterior": 279, "board": 260, "boldsymbol": [11, 44, 57, 102, 106, 107, 108, 269], "boltzmann": 219, "book": 266, "bool": [1, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 24, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 70, 74, 82, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 121, 122, 125, 126, 127, 135, 136, 137, 138, 142, 144, 147, 150, 151, 153, 154, 155, 156, 163, 164, 177, 179, 180, 181, 183, 186, 190, 191, 193, 194, 196, 198, 200, 202, 204, 205, 211, 212, 218, 219, 222, 224, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 325], "boolean": [87, 102, 106, 107, 108, 120, 167, 185, 195, 200], "bootstrap": [148, 149, 259], "bootstrap_count": 110, "bootstrap_traj": 110, "bootstrap_trajectori": 148, "border": [240, 284, 287], "both": [63, 95, 102, 106, 107, 108, 111, 112, 113, 264, 268, 270, 275, 279, 284, 321], "bottom": [276, 277], "bound": [8, 24, 63, 108, 111, 112, 149, 161, 189, 202, 205, 226, 240, 268, 275, 277, 283], "boundari": [33, 84, 121, 236, 239, 284, 287], "bowman": [164, 266], "box": [8, 9, 33, 242, 275, 287], "boxdiscret": [9, 259, 269, 274, 275], "boxdiscretizationmodel": [8, 259], "boxer": 164, "boxstyl": [274, 275, 311], "brbg": 275, "break": 63, "breakthrough": [51, 277, 287], "bresenham": 240, "brian": 268, "brief": 55, "brighter": 283, "bring": 268, "broadcast": [91, 223], "brook": [266, 277, 287], "browser": [273, 277, 287], "brunton": [45, 198, 200, 264, 270, 281], "btraj": 330, "buf": 63, "buffer": 63, "build": [63, 104, 263, 264, 269, 274, 282], "built": 236, "bulletin": [96, 276], "burn": 91, "busi": 266, "bustamant": [91, 276], "bvp": 284, "bw": [273, 275], "bw_method": [275, 282, 288, 300], "bw_opt": 277, "bwr": [273, 287, 310], "bx": 39, "bz": 39, "c": [11, 13, 17, 22, 23, 37, 38, 47, 57, 80, 87, 102, 106, 107, 108, 112, 123, 130, 131, 132, 133, 135, 139, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 171, 173, 174, 177, 200, 203, 219, 230, 233, 235, 236, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 284, 286, 291, 297, 301, 319, 324, 325, 328], "c0": [55, 177, 275, 304, 307, 313, 331], "c00": [68, 287], "c0t": [68, 287], "c1": [275, 285, 304, 307, 313], "c2t": 106, "c_": [44, 55, 57, 68, 91, 98, 102, 106, 107, 108, 111, 113, 151, 153, 157, 159, 161, 162, 163, 231, 232, 234, 235, 277, 279, 283, 284, 286, 287], "c_0": [55, 283], "c_1": 10, "c_2": 10, "c_3": 10, "c_cc": 156, "c_cc_direct": 156, "c_cc_undirect": 156, "c_i": [242, 284], "c_ij": 111, "c_ji": 111, "c_k": 242, "c_lag": 151, "c_n": 284, "c_slide": [151, 153], "c_xx": [68, 231, 232, 234], "c_xy": [232, 234], "cach": [102, 103, 106, 107, 108, 213], "cached_properti": 259, "calcul": [15, 86, 91, 95, 98, 99, 102, 106, 107, 108, 111, 112, 113, 139, 200, 216, 276, 285], "call": [1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 85, 91, 92, 96, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 138, 148, 149, 163, 188, 198, 200, 202, 203, 223, 228, 240, 263, 266, 268, 269, 276, 278, 283, 284, 286, 287], "callabl": [4, 16, 25, 26, 44, 47, 48, 49, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 74, 75, 104, 190, 199, 214, 228, 236, 238, 243, 244, 275], "callback": [16, 65, 104, 111, 203, 204], "callback_init_cent": [11, 14], "callback_interv": [111, 285], "callback_loop": [11, 14], "caller": 63, "came": 121, "can": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 40, 43, 44, 45, 47, 48, 49, 53, 55, 57, 60, 61, 62, 63, 65, 66, 72, 73, 74, 75, 81, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 121, 123, 130, 132, 135, 137, 148, 149, 150, 151, 153, 154, 155, 156, 161, 163, 171, 178, 182, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 202, 204, 208, 212, 213, 218, 220, 224, 226, 227, 228, 230, 231, 232, 236, 237, 239, 240, 241, 242, 243, 247, 248, 250, 251, 252, 253, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 324, 328], "candid": [198, 281], "cannot": [18, 83, 91, 95, 280, 282, 284, 288], "canon": [10, 44, 51, 264, 277, 287], "canonical_sign": [177, 183, 185], "capabl": [1, 22, 27, 32, 34, 35, 36, 40, 43, 48], "capac": [84, 171, 284], "capi_includ": [13, 17, 269], "captur": [46, 55, 281, 283, 287], "cardin": 266, "care": [11, 16, 63, 269], "carlo": [91, 276, 279], "carri": [15, 19, 164, 288], "case": [1, 8, 11, 14, 15, 19, 24, 26, 30, 44, 49, 55, 57, 60, 62, 65, 66, 74, 76, 77, 78, 79, 80, 81, 82, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 127, 137, 178, 182, 187, 189, 190, 191, 192, 193, 212, 218, 225, 227, 236, 237, 238, 241, 243, 244, 253, 263, 264, 269, 271, 276, 277, 279, 282, 283, 284, 285, 286, 287, 320, 321], "cast": [63, 66, 325], "caus": [11, 14, 90, 94, 98, 99, 260], "caution": [104, 280], "cax": [284, 326, 329], "cb": [272, 275, 276, 284, 287, 288, 305, 306, 310, 311, 315, 327], "cbar": [188, 194, 201, 284, 322], "cbar_ax": [194, 201], "cbar_kw": [194, 201], "cbook": 325, "cc": [139, 150], "cc_direct": 150, "cc_undirect": 150, "cca": [51, 264, 265, 317, 334, 335], "ccf": [102, 106, 107, 108], "ccf_": [102, 106, 107, 108], "cdist": [76, 81], "cdot": [23, 27, 34, 68, 153, 189, 216, 225, 236, 241, 277, 287], "cdoubl": 63, "cecilia": [44, 55, 57, 73, 102, 103, 107, 110, 264, 266, 283, 287], "ceil": [102, 106, 107, 108], "cell": [242, 284], "center": [8, 9, 10, 11, 12, 14, 15, 16, 141, 195, 197, 263, 269, 272, 273, 274, 275, 280, 285, 304, 319, 330], "central": [116, 167], "centroid": 15, "certain": [44, 63, 86, 95, 242, 264, 268, 284], "cf": 283, "ch": [165, 167, 170, 172, 279, 280], "chain": [24, 30, 41, 92, 105, 130, 131, 163, 172, 202, 237, 241, 261, 266, 279, 280, 286, 303, 316, 335], "challeng": 164, "champan": 44, "champion": 268, "chan": 18, "chang": [11, 12, 14, 60, 62, 63, 65, 85, 86, 103, 104, 108, 109, 111, 164, 200, 218, 231, 232, 233, 234, 235, 236, 260, 268, 273, 279, 287], "channels_last": 63, "chao": [39, 277], "chaotic": 328, "chapman": [44, 92, 95, 102, 105, 106, 107, 108, 191, 226, 228, 258, 265, 272, 317, 334, 335], "chapman_kolmogorov": 318, "chapmankolmogorovtest": [44, 95, 102, 106, 107, 108, 191, 228, 259], "chapter": 266, "character": [91, 121, 270, 276], "characterist": 236, "charg": 268, "charl": [135, 139], "chartrand": 218, "chebyshev": 269, "check": [11, 63, 95, 102, 106, 107, 108, 110, 111, 112, 116, 135, 136, 137, 138, 144, 154, 176, 179, 180, 183, 200, 204, 222, 224, 258, 272, 276, 281], "check_against_model": 112, "check_input": 144, "check_sym": 183, "checkpoint": 273, "checkpointmanag": 273, "checkpoints_dir": 273, "chem": [60, 157, 163, 262, 282], "chemic": [15, 20, 21, 34, 44, 53, 55, 57, 73, 74, 85, 91, 95, 98, 99, 104, 107, 110, 111, 151, 164, 264, 266, 269, 276, 278, 279, 283, 284, 286, 287], "chemistri": 153, "chi": [57, 95, 273, 275, 287, 288], "chi_": 151, "chi_0": [44, 273, 287, 288], "chi_1": [44, 287, 288], "chi_i": 287, "chi_kvadnet": 273, "chi_x": [69, 273], "child": 63, "children": 63, "childress": [22, 261, 289, 295, 335], "chirnd": 273, "chodera": [15, 34, 91, 107, 111, 123, 132, 133, 143, 151, 157, 164, 266, 269, 276], "choic": [11, 14, 44, 55, 73, 109, 111, 228, 268, 269, 283, 286, 287], "choos": [15, 26, 268, 269, 277, 284, 285], "choosen": 284, "chosen": [11, 30, 111, 269, 272, 281, 285], "christian": [55, 91, 276, 283], "christof": [15, 34, 43, 53, 84, 116, 121, 151, 164, 264, 266, 269, 271, 278, 284, 287], "christoph": [60, 110, 111, 113, 262, 266, 282, 285], "chronologi": 266, "chunk": [18, 19, 20, 212], "chunksiz": [55, 57, 212, 264], "circ": [4, 262], "circl": 189, "circuit": 39, "circular": 284, "circular_layout": [284, 286], "citat": 263, "ck": [191, 318], "ck_test": [44, 92, 95, 102, 105, 106, 107, 108, 191, 226, 259, 272, 318], "ckpt": 273, "cktest": 318, "cktestgrid": 191, "claim": [260, 268], "clamp": 193, "clarenc": [45, 47, 53, 264, 270, 271, 278, 283], "class": [163, 245, 259, 263, 268, 269, 273], "classic": [93, 282], "classif": [83, 98, 99, 107, 115, 141, 266, 275, 276, 280], "classifi": 269, "classmethod": [55, 57], "clear": 63, "clearer": 287, "clearli": 287, "clementi": [44, 55, 57, 73, 102, 103, 107, 110, 264, 266, 283, 287], "clip": [275, 277], "close": [203, 204, 262, 273, 278, 279, 280, 281, 283, 287], "closest": [9, 10, 12], "clump": 242, "cluster": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 55, 83, 98, 99, 107, 115, 141, 236, 259, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 284, 285, 288, 317, 318, 320, 322, 323, 324, 325, 330, 334, 335], "cluster_cent": [9, 10, 12, 269, 274, 275, 280, 285, 319, 330], "cluster_kcca": 273, "cluster_kvad": 273, "cluster_kvadnet": 273, "cluster_vamp": 273, "cluster_vampnet": 273, "clustering_custom_metr": 269, "clustering_new": 269, "clustermodel": [11, 12, 14, 15, 259, 330], "cm": [273, 274, 275, 280, 282, 284, 288, 300, 312, 325, 326, 327, 329], "cmap": [189, 195, 240, 271, 273, 274, 275, 276, 280, 282, 284, 285, 287, 288, 293, 294, 305, 306, 310, 311, 312, 315, 320, 322, 325, 326, 327, 329, 330], "co": [22, 23, 38, 40, 236, 241, 331], "coars": [83, 84, 95, 98, 99, 102, 106, 107, 108, 165, 195, 197, 266, 269, 274, 276, 320], "coarse_grain": [84, 284], "coarse_grained_stationary_prob": [83, 280], "coarse_grained_transition_matrix": [83, 280], "coarse_st": 320, "code": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 61, 82, 111, 190, 191, 192, 193, 194, 195, 196, 197, 218, 219, 228, 229, 243, 244, 262, 268, 269, 282, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "coef_": 198, "coeffici": [44, 189, 198, 199, 200, 216, 264, 281], "coher": [264, 265, 271, 277, 287, 317, 334, 335], "coherence_scor": 273, "coincid": [12, 91, 93, 95, 96, 270], "col": [273, 277], "coll": [293, 294, 306, 310, 311, 315], "collaps": 20, "collate_fn": 273, "collect": [20, 21, 22, 55, 60, 62, 65, 86, 95, 108, 109, 111, 113, 202, 262, 266, 279, 281, 282, 283, 286, 306, 310, 311, 315, 325], "collect_observations_in_st": 95, "collected_observ": 95, "color": [189, 191, 194, 195, 196, 197, 226, 240, 269, 271, 273, 274, 275, 276, 279, 280, 282, 284, 285, 288, 293, 298, 304, 305, 307, 312, 313, 325, 326, 327, 328, 329, 331], "color_lerp": [240, 284], "colorbar": [188, 192, 193, 194, 272, 275, 276, 278, 280, 282, 283, 284, 285, 287, 288, 300, 305, 306, 310, 311, 315, 320, 321, 326, 327, 329, 330], "colormap": [189, 240, 325, 326], "column": [18, 44, 102, 106, 107, 108, 127, 142, 144, 177, 182, 183, 198, 231, 232, 233, 234, 235, 242, 280, 281, 283], "column_select": [18, 233, 234, 235], "com": [213, 223, 268], "combin": [18, 83, 102, 103, 113, 132, 133, 199, 264, 266, 268, 277, 281, 285, 287], "come": [95, 104, 149, 237, 269, 282, 283, 284], "comittor": [116, 121, 167, 170, 172, 237], "committor": [84, 102, 106, 107, 108, 116, 122, 167, 172, 195, 237, 259, 326], "committor_backward": [102, 106, 107, 108, 237], "committor_forward": [102, 106, 107, 108, 237], "commonli": [86, 102, 106, 107, 108, 264], "commun": [65, 262, 288], "commut": [55, 283], "commute_map": [55, 283], "compact": [264, 283], "compar": [44, 60, 62, 104, 109, 151, 164, 228, 264, 273, 275, 276, 284, 285, 287, 288], "comparison": [63, 265, 317, 334, 335], "compat": [11, 14, 20, 46, 55, 57, 60, 63, 65, 66, 91, 96, 103, 109, 110, 236, 238, 243, 244, 268, 281], "compil": [13, 17, 63, 269], "complet": [65, 84, 96, 110, 149, 156, 203, 260, 264, 272, 283, 287], "complex": [63, 91, 95, 98, 99, 104, 107, 276, 283, 284, 325], "complex128": 63, "complexwarn": [318, 325], "complic": 263, "compon": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 75, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 150, 154, 155, 156, 187, 198, 199, 200, 230, 264, 269, 277, 280, 281, 283, 287, 318, 332, 333], "components_": [283, 333], "compos": [63, 206, 207, 209], "comprehens": [223, 266], "compress": 282, "compris": 84, "compstat": 18, "comput": [10, 12, 15, 18, 19, 20, 21, 41, 44, 47, 53, 55, 57, 63, 67, 68, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 161, 163, 164, 167, 171, 172, 173, 174, 177, 178, 181, 184, 185, 186, 189, 198, 199, 202, 205, 216, 218, 219, 226, 228, 229, 230, 231, 232, 233, 234, 235, 240, 254, 263, 264, 266, 268, 269, 270, 273, 276, 277, 278, 279, 280, 283, 284, 285, 287, 329], "computation": [149, 269, 276, 284], "compute_c00": [18, 19], "compute_c0t": [18, 19, 275], "compute_connected_set": 259, "compute_ctt": [18, 19], "compute_dtrajs_effect": 259, "compute_effective_strid": [88, 259], "compute_index_st": 259, "compute_log_likelihood": 113, "compute_observ": 113, "compute_observation_likelihood": [95, 276], "compute_pmf": [113, 285], "compute_sample_weights_log": 113, "compute_squar": 269, "compute_state_indic": [102, 106, 107, 108], "compute_trajectory_weight": [102, 106, 107, 108, 219, 322], "compute_viterbi_path": 95, "concat": [206, 207, 209], "concatdataset": [207, 259], "concaten": [0, 11, 109, 206, 209, 210, 225, 259, 272, 274, 275, 276, 287, 293, 294, 306, 310, 311, 315, 320, 321, 322, 323], "concern": 268, "conda": 263, "condit": [22, 27, 32, 34, 35, 36, 40, 43, 57, 93, 112, 163, 199, 236, 238, 243, 244, 266, 268, 272, 276, 278, 279, 280, 281, 283, 287, 328], "conduct": 177, "conf": [104, 191, 205, 226], "confer": 269, "confid": [91, 92, 95, 103, 104, 105, 191, 196, 202, 205, 226, 229, 252, 276, 279], "confidence_interv": 259, "config": 196, "configur": [11, 20, 55, 57, 60, 62, 65, 85, 92, 102, 104, 106, 107, 108, 109, 269, 273, 274, 283], "conform": [53, 57, 107, 112, 278, 279], "confus": 63, "conjug": [91, 93], "conjunct": [11, 14, 55, 57, 82, 189], "connect": [83, 86, 87, 92, 95, 98, 104, 109, 110, 112, 115, 135, 144, 150, 154, 155, 156, 240, 259, 268, 279, 280, 284, 285, 286], "connected": 280, "connected_set": [86, 155, 286], "connection_threshold": [240, 284, 329], "connectionstyl": [280, 284], "connectivii": 95, "connectivity_factor": 112, "connectivity_opt": 112, "connectivity_threshold": [86, 87, 92, 95, 98, 109, 110, 286], "consecut": [74, 283], "consequ": [85, 287], "conserv": [58, 149, 166, 168, 284], "consid": [11, 14, 15, 45, 55, 57, 63, 85, 86, 95, 102, 106, 107, 108, 109, 110, 112, 225, 231, 232, 233, 234, 235, 264, 266, 268, 270, 271, 277, 280, 283, 284, 286, 287], "consist": [15, 63, 95, 96, 98, 99, 111, 117, 118, 119, 120, 161, 200, 220, 242, 253, 264, 269, 281, 284, 285, 286, 287], "const": 269, "const_weight_input": 21, "constant": [21, 26, 44, 65, 70, 71, 73, 102, 106, 107, 108, 113, 158, 199, 200, 218, 219, 231, 232, 233, 234, 235, 242, 278], "constantli": 269, "constitut": 281, "constrain": [104, 109, 161, 281], "constrained_layout": [275, 276, 283, 333], "constraint": [86, 96, 104, 109, 163, 242, 279, 286], "construct": [12, 55, 63, 86, 95, 108, 111, 112, 116, 121, 139, 147, 164, 165, 167, 170, 172, 189, 281, 282, 283, 284, 285], "constructor": [95, 102, 106, 107, 108, 203], "consult": 287, "consum": 174, "consumpt": [169, 264, 269], "contact": 260, "contain": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 28, 30, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 71, 73, 83, 84, 85, 86, 91, 93, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 141, 142, 150, 169, 176, 189, 190, 191, 196, 197, 198, 199, 200, 202, 206, 207, 208, 209, 210, 226, 227, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 264, 267, 268, 271, 278, 279, 283, 284, 285, 286, 287, 318], "content": [260, 266, 287], "context": [63, 65, 266], "contigu": [18, 149], "contin": [93, 94, 97, 116], "continu": [30, 111, 199, 253, 266], "contour": [188, 192, 193, 194, 242, 265, 271, 285, 317, 321, 322, 334, 335], "contourf": [192, 193, 194, 242, 271, 273, 275, 277, 278, 282, 285, 287, 288, 298, 300, 305, 306, 310, 311, 312, 315, 330], "contourf_kw": [192, 193, 194, 201, 320, 321, 322], "contract": 268, "contrast": 55, "contribut": 71, "contributor": 263, "control": [104, 112, 190, 240, 242, 264, 281], "contruct": 285, "conv": 63, "conv2d": 63, "conv4": 63, "conv5": 63, "convei": 268, "conveni": [103, 151, 153, 256, 269, 286, 288], "convent": [57, 142, 223], "converg": [9, 10, 11, 12, 14, 85, 96, 103, 104, 109, 111, 112, 164, 269, 285, 286, 287], "convergence_criterion_lagrang": 103, "convergencewarn": 285, "convert": [63, 86, 92, 94, 97, 105, 151, 153, 189, 208, 210, 223, 225, 229, 288], "converted_d": [208, 210], "convex": 161, "convolut": 242, "coo_matrix": [151, 153], "coolwarm": [195, 271, 282, 284, 288, 293, 305, 306, 310, 311, 315, 320, 326], "coord": [240, 271, 305, 310, 311], "coordin": [29, 34, 44, 55, 148, 151, 153, 192, 193, 201, 219, 240, 272, 283, 284, 285, 287, 309], "coordinate_to_st": [240, 284], "copi": [2, 9, 10, 12, 19, 21, 44, 46, 48, 50, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 83, 84, 86, 92, 93, 94, 95, 97, 102, 104, 105, 106, 107, 108, 109, 113, 199, 200, 213, 223, 231, 232, 233, 234, 235, 236, 264, 268, 275, 291], "copper_r": [284, 329], "copy_x": 200, "copyright": [260, 268], "core": [11, 85, 262, 266], "corner": [29, 240], "corr": [44, 123, 283], "correct": [18, 19, 85, 95, 110, 111, 112, 132, 133, 260, 266, 286], "correctli": [63, 325], "correl": [18, 19, 44, 51, 55, 57, 73, 85, 89, 91, 95, 96, 98, 102, 104, 106, 107, 108, 111, 112, 132, 133, 148, 149, 177, 264, 277, 283, 287], "correlation_length": 149, "correlation_ob": 95, "correpond": 199, "correspond": [6, 21, 28, 44, 55, 57, 63, 66, 71, 75, 76, 77, 78, 79, 80, 81, 84, 86, 92, 93, 95, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 127, 133, 135, 142, 144, 150, 155, 156, 160, 167, 171, 181, 198, 208, 223, 225, 227, 228, 236, 240, 258, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288], "corrlat": 149, "corrlength": 148, "cost": [11, 12, 14, 269], "costli": 269, "could": [86, 94, 102, 106, 107, 108, 118, 120, 190, 272, 277, 283, 284, 285, 288], "coun": 151, "count": [58, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 131, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 259, 266, 273, 275, 279, 284, 285, 323], "count_fract": [108, 284], "count_matrix": [85, 86, 87, 279, 286], "count_matrix_ful": 86, "count_matrix_histogram": 86, "count_mod": [85, 104, 109, 110, 111, 112, 275, 279, 286, 318, 323], "count_model": [95, 102, 106, 107, 108, 112, 113, 274, 275, 279, 284], "count_nonzero": 275, "count_stat": 259, "countabl": 284, "countain": 286, "counting_mod": 86, "countmatrix": [164, 259], "counts_effect": 279, "counts_estim": [279, 318], "cov": [18, 44, 73, 152, 162, 275, 287], "cov_00": [19, 44, 67, 287], "cov_0t": [19, 44, 67, 287], "cov_tt": [19, 44, 67, 287], "covar": [259, 287], "covari": [19, 20, 21, 37, 38, 44, 50, 55, 57, 68, 73, 102, 104, 106, 107, 108, 152, 162, 230, 231, 232, 233, 234, 235, 241, 259, 264, 269, 275, 277, 278, 283, 287, 319], "covariance_estim": [55, 57, 283, 287], "covariance_matrix": [241, 298], "covariance_typ": [269, 319], "covariancekoopmanmodel": [55, 57, 73, 74, 102, 106, 107, 108, 259], "covariancemodel": [18, 21, 44, 50, 55, 57, 73, 259, 283], "covariances_": [269, 319], "covariances_test": [44, 73], "cover": [11, 266, 268, 269, 284], "coverag": 269, "cpp": 269, "cpu": [60, 63, 66, 272, 273, 282, 288], "crash": [93, 94, 97, 98, 99], "creat": [9, 10, 12, 14, 22, 27, 30, 32, 33, 34, 35, 36, 40, 43, 63, 86, 92, 103, 105, 109, 191, 192, 193, 196, 209, 210, 211, 212, 223, 225, 231, 232, 233, 234, 235, 242, 254, 260, 264, 269, 272, 273, 274, 276, 282, 283, 284, 286, 287, 288, 319], "create_us": 286, "creation": [24, 237], "crisp": [65, 95, 272, 273, 280, 325], "crispli": 280, "criteria": 285, "criterion": [11, 12, 14, 96, 103, 111], "criterium": [12, 103, 285], "critic": [149, 269], "crommelin": 161, "cross": [44, 67, 73, 74, 102, 106, 107, 108, 123, 132, 232, 277, 278, 284, 287], "crucial": [266, 276], "csr": [151, 153], "ct": 177, "ctt": [68, 287], "cube": 284, "cuda": [63, 272, 273, 282, 288], "cudnn": [272, 273, 282, 288], "cumul": [44, 55, 57], "cumulative_kinetic_vari": 44, "cup": [121, 284], "curat": [86, 95], "current": [11, 14, 15, 18, 20, 34, 44, 48, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 74, 85, 86, 91, 93, 94, 95, 96, 97, 102, 104, 106, 107, 108, 109, 119, 173, 190, 194, 218, 222, 236, 240, 258, 263, 266, 276, 279, 284, 287], "current_model": 108, "curv": [189, 195, 197], "curvatur": [189, 195, 197], "custom": [13, 17, 25, 26, 33, 63, 74, 259, 261, 289, 295, 303, 316, 335], "custom_metr": 269, "custom_od": [238, 259, 292], "custom_sd": [238, 259, 305], "custommodul": [13, 17], "customsystem": [25, 26, 259], "cut": [44, 55, 57, 177], "cutoff": [15, 20, 44, 49, 55, 57, 68, 70, 71, 177, 183, 184, 185, 186, 196, 283], "cve": 161, "cvsplit_traj": 259, "cxx": 235, "cxy": 235, "cyan": [284, 297, 298], "cycl": 284, "cyi": 235, "cylind": [23, 236], "cyx": 235, "d": [4, 5, 6, 7, 9, 10, 11, 12, 15, 20, 21, 24, 25, 26, 27, 33, 34, 35, 36, 41, 42, 43, 45, 54, 71, 76, 77, 78, 79, 80, 81, 91, 93, 94, 97, 107, 111, 123, 127, 132, 133, 142, 143, 151, 157, 161, 164, 187, 210, 223, 230, 237, 242, 262, 264, 266, 268, 269, 271, 273, 275, 276, 278, 281, 282, 285, 292, 305], "d_": [121, 131, 269], "d_x": 189, "d_y": 189, "daan": 161, "dagger": 271, "dai": [23, 236], "daidon": [107, 123, 132, 133, 143], "damag": [260, 268], "damp": [27, 34, 242], "dampen": 242, "daniel": [23, 236], "darker": 284, "dash": [304, 328, 333], "data": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 91, 94, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 141, 149, 161, 164, 191, 192, 193, 194, 196, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 218, 219, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 250, 254, 257, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 332, 333, 334, 335], "data_1": [76, 77, 78, 79, 80, 81], "data_2": [76, 77, 78, 79, 80, 81], "data_instantan": 225, "data_lag": [71, 72, 75, 208, 210, 273, 277, 324], "data_load": [60, 62, 65], "data_mean_remov": [19, 73], "data_sourc": 298, "data_timelag": 225, "databas": 264, "dataload": [60, 62, 65, 272, 273, 275, 282, 288], "datapoint": [6, 269, 270, 275, 277], "dataset": [11, 12, 23, 27, 28, 29, 30, 35, 36, 40, 43, 55, 111, 112, 206, 207, 208, 209, 210, 212, 224, 225, 240, 259, 264, 269, 270, 272, 273, 277, 282, 283, 285, 287, 288, 290, 291, 295, 296, 302, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 324, 325, 335], "dataspac": 23, "datatyp": [61, 63, 208, 210], "davi": 161, "david": [11, 16, 269], "davidovich": 283, "de": [55, 85, 260, 268, 283, 286], "deal": [85, 254, 264, 266, 268, 273, 284, 287], "death": [24, 237, 261, 303, 316, 335], "debug": 268, "decai": [25, 272, 287], "decid": [85, 263, 268], "decis": [106, 110, 149, 283], "decod": [60, 61, 62, 64, 282], "decompos": [84, 109, 171, 270], "decomposit": [19, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 98, 99, 102, 106, 107, 108, 142, 171, 177, 183, 184, 185, 186, 187, 259, 264, 266, 270, 271, 272, 273, 275, 277, 278, 282, 283, 287, 288, 320, 324, 325, 327, 332, 333], "decor": [213, 214, 215], "decorrel": [71, 104], "decoupl": 281, "decreas": [55, 57, 86, 112, 125, 127, 171, 195, 197], "decreasingli": 86, "deem": [187, 268], "deep": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 259, 272, 273, 275, 282, 288], "deeper": [92, 105], "deeptim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 135, 136, 137, 138, 142, 144, 147, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "def": [25, 26, 63, 263, 273, 275, 277, 285, 290, 301, 305, 312, 325, 328, 330, 333], "def_submodul": [13, 17, 269], "defaul": 242, "default": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 80, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 123, 144, 148, 150, 153, 154, 155, 156, 161, 163, 164, 171, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 205, 211, 212, 216, 218, 219, 223, 225, 227, 228, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 263, 264, 276, 281, 283, 284, 287], "defici": 19, "deficit": 287, "defin": [18, 25, 26, 34, 44, 47, 55, 57, 63, 71, 77, 83, 84, 95, 102, 104, 106, 107, 108, 112, 115, 121, 128, 134, 147, 152, 158, 159, 160, 165, 167, 173, 177, 189, 195, 197, 200, 236, 238, 243, 244, 263, 264, 268, 270, 271, 272, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 288, 292, 305], "definit": [25, 26, 65, 102, 106, 107, 108, 113, 116, 177, 183, 184, 185, 186, 187, 236, 238, 242, 243, 244, 268, 273], "deg": 271, "degener": 144, "degre": [6, 57, 63, 80, 160, 198, 262, 271, 275, 280, 281, 328], "del": 263, "delai": [55, 264, 283], "delax": [284, 326], "delet": [213, 260], "delimit": [92, 105, 202], "delta": [112, 161, 242, 276], "delta_": 161, "demand": 149, "demonstr": [30, 109, 270, 271, 279, 284, 285, 292, 300, 301, 305, 312, 318, 319, 320, 321, 323, 326], "denot": [9, 10, 12, 44, 55, 57, 94, 97, 102, 106, 107, 108, 121, 277, 278, 283, 284, 287], "dens": [18, 74, 85, 102, 106, 107, 108, 151, 153, 163, 164, 231, 232, 233, 234, 235, 254], "densiti": [57, 94, 102, 106, 107, 108, 153, 242, 264, 265, 278, 285, 287, 304, 307, 313, 314, 317, 334, 335], "depend": [11, 40, 57, 65, 81, 82, 85, 86, 102, 106, 107, 108, 113, 133, 143, 187, 189, 199, 215, 219, 223, 228, 236, 238, 243, 244, 253, 261, 266, 269, 274, 276, 277, 280, 284, 285, 286, 287, 303, 316, 326, 335], "depict": [189, 256, 269, 284, 320], "deprec": [63, 74, 214, 325, 326], "deprecated_argu": 259, "depth": [18, 20, 135, 150, 154, 155, 156, 264], "deriv": [102, 103, 104, 106, 107, 108, 109, 110, 111, 198, 199, 216, 217, 218, 265, 277, 278, 281, 284, 287, 317, 328, 334, 335], "desc": 203, "descend": [63, 87, 102, 106, 107, 108, 177, 182, 183], "describ": [18, 20, 23, 40, 41, 55, 56, 57, 83, 84, 91, 93, 98, 99, 102, 106, 107, 108, 109, 111, 113, 116, 143, 157, 220, 225, 226, 241, 242, 262, 263, 266, 269, 271, 272, 276, 283, 284, 287], "descript": [14, 18, 44, 62, 85, 91, 109, 110, 121, 239, 286], "descriptor": 213, "design": [63, 263], "desir": [63, 99, 102, 106, 107, 108, 127, 161, 201, 219, 240, 281, 282], "destin": 63, "detach": 63, "detail": [11, 18, 33, 44, 55, 63, 71, 85, 91, 92, 96, 105, 110, 121, 163, 164, 198, 200, 216, 218, 239, 262, 263, 264, 268, 276, 277, 279, 280, 283, 284, 332], "detect": [23, 236, 277], "determin": [11, 18, 20, 39, 47, 55, 57, 85, 86, 95, 102, 103, 104, 106, 107, 108, 144, 149, 163, 178, 180, 189, 190, 199, 200, 212, 269, 271, 276, 279, 283], "determinist": [11, 14, 31, 33, 39, 63, 236, 238, 242, 243, 244, 259, 282], "detour": 284, "deuflhard": [279, 280], "dev": [318, 325, 326], "develop": [245, 266, 269, 277, 280], "deviat": [94, 104, 148, 149, 202, 275, 276, 279], "devic": [37, 38, 60, 61, 62, 63, 64, 65, 66, 272, 273, 282, 288], "df": 331, "df_tv": 331, "diag": [26, 44, 55, 77, 102, 106, 107, 108, 130, 179, 187, 269, 283, 287, 305, 319], "diag_onli": [18, 233, 234, 235], "diagnost": 256, "diagon": [18, 44, 65, 95, 131, 136, 142, 179, 189, 190, 233, 234, 235, 269], "diagram": [63, 260], "dict": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 189, 190, 192, 193, 194, 197, 198, 199, 200, 243, 244, 273, 274, 275, 311, 320, 321, 322], "dictionari": [63, 263], "did": [273, 285, 287], "diederik": 282, "diff": [216, 217, 218, 331], "differ": [18, 44, 55, 63, 91, 102, 104, 106, 107, 108, 111, 112, 195, 197, 213, 216, 217, 218, 226, 228, 246, 264, 268, 269, 274, 275, 276, 279, 281, 282, 283, 285, 287, 326, 331, 333], "differenti": [25, 26, 27, 32, 35, 36, 42, 43, 198, 199, 218, 259, 271, 278, 281], "difficult": 269, "diffus": [34, 41], "digit": [240, 309], "digraph": [280, 284, 286], "dihedr": 272, "dihedral_fil": 272, "dim": [8, 11, 16, 25, 26, 44, 49, 55, 57, 73, 74, 75, 102, 106, 107, 108, 153, 187, 230, 263, 269, 272, 273, 275, 283, 287, 288, 292, 305, 333], "dimens": [6, 7, 8, 11, 12, 14, 18, 19, 23, 25, 26, 31, 33, 37, 39, 44, 48, 49, 50, 52, 54, 55, 56, 57, 60, 62, 65, 77, 94, 111, 112, 113, 187, 205, 210, 212, 219, 223, 230, 236, 238, 241, 243, 244, 263, 269, 270, 273, 274, 283, 284, 286, 287], "dimension": [4, 5, 6, 7, 8, 10, 11, 12, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 40, 42, 43, 49, 56, 57, 65, 71, 94, 109, 189, 192, 193, 194, 218, 219, 230, 237, 240, 241, 242, 256, 261, 264, 269, 271, 273, 275, 276, 278, 280, 282, 283, 284, 287, 288, 297, 303, 316, 322, 333, 335], "dimensionless": 285, "direct": [23, 63, 86, 87, 92, 95, 135, 150, 154, 155, 156, 164, 242, 268, 277, 279, 280, 283, 284, 286, 287, 288, 319], "directli": [9, 10, 11, 12, 13, 17, 33, 55, 57, 102, 104, 106, 107, 108, 109, 110, 195, 197, 201, 231, 232, 236, 252, 264, 269, 272, 276, 279, 281, 284, 286, 287, 333], "directori": [13, 17, 263, 269], "dirichlet": [91, 93, 94, 149, 162, 163], "dirk": [45, 264, 270], "dirti": [166, 168], "disabl": [44, 63, 269], "disadvantag": 269, "disc": [189, 195, 197], "discard": [86, 91, 276, 280, 286, 325], "disclaim": 260, "disconnect": [83, 95, 109, 115], "discontinu": 23, "discov": [198, 200, 257, 281, 328], "discret": [8, 9, 10, 11, 12, 14, 15, 23, 28, 30, 37, 38, 41, 59, 74, 84, 85, 86, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 148, 149, 151, 153, 167, 172, 199, 239, 240, 241, 247, 252, 253, 261, 263, 264, 266, 271, 274, 275, 276, 278, 282, 283, 285, 287, 288, 300, 303, 316, 325, 330, 335], "discrete_states_manag": 93, "discrete_timeseri": [104, 109], "discrete_trajectori": [9, 10, 11, 12, 14, 103, 241, 283, 333], "discreteoutputmodel": [92, 95, 97, 98, 99, 253, 259], "discretestatesmanag": [86, 93], "discuss": [260, 266], "disentangl": [280, 282, 288], "disjoint": 121, "dispatch": [55, 57, 76, 77, 78, 79, 80, 81, 86, 227, 263], "displai": [195, 197, 203, 268, 273, 277, 287], "disregard": [86, 92, 98, 200], "dissip": 39, "dist_to_origin": [26, 305], "dist_to_spher": [26, 305], "distanc": [12, 15, 33, 44, 55, 57, 73, 85, 107, 242, 269, 283, 287, 319], "distinguish": [84, 135, 268, 277, 283], "distribut": [30, 44, 57, 65, 83, 84, 91, 93, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108, 109, 113, 115, 118, 125, 127, 128, 131, 133, 139, 142, 143, 144, 145, 147, 149, 162, 163, 164, 167, 170, 172, 219, 236, 237, 239, 241, 268, 269, 270, 272, 274, 276, 278, 279, 280, 282, 283, 285, 287, 288, 304, 307, 319, 326, 327, 333], "distributionof": 142, "disturb": 287, "divid": [74, 85, 86, 111, 112, 200, 239, 284, 286, 287, 307, 326, 329], "dmd": [46, 259, 264, 271, 283], "dmdmodel": [45, 259], "dmin": [15, 269, 319], "do": [29, 45, 86, 95, 102, 106, 107, 108, 112, 135, 161, 209, 210, 240, 268, 282, 285, 287], "doc": [13, 17, 63, 213, 263, 269, 270, 271, 276, 279, 280, 281, 282, 283, 284, 286, 287, 288], "docstr": 63, "doctest": 263, "document": [12, 63, 178, 268, 282, 283, 285, 287, 333], "doe": [9, 10, 12, 18, 45, 60, 62, 65, 82, 83, 95, 96, 102, 104, 106, 107, 108, 113, 115, 165, 221, 223, 231, 232, 236, 238, 243, 244, 268, 269, 273, 277, 279, 282, 284, 287], "doesn": 112, "doi": [47, 53, 60, 262, 277, 278, 282], "domain": [22, 23, 236, 242, 264, 266, 271, 273, 277, 283], "domain_s": 242, "domin": [47, 55, 57, 84, 171, 177, 187, 250, 254, 262, 271, 277, 278, 283, 284, 287, 332, 333], "don": [95, 231, 232, 233, 234, 235, 269], "done": [95, 102, 106, 107, 108, 111, 112, 177, 242, 276], "doos": [107, 123, 132, 133, 143], "dot": [22, 31, 39, 142, 152, 198, 199, 216, 269, 275, 277, 278, 281, 287, 332], "doubl": [12, 27, 28, 63, 239, 261, 265, 303, 316, 317, 334, 335], "double_well_2d": [259, 306, 323], "double_well_discret": [259, 307], "doublewelldiscret": [28, 259], "down": [111, 281], "download": [290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "downstream": 282, "doyl": 284, "dr": 260, "draw": [100, 104, 110, 163, 189, 194, 197, 240, 269, 273], "draw_circular": 286, "draw_initial_posit": 273, "draw_networkx_edg": [280, 284], "draw_networkx_edge_label": 284, "draw_networkx_label": [280, 284, 286], "draw_networkx_nod": [280, 284], "drawn": [91, 95, 102, 106, 107, 108, 188, 189, 195, 197, 212, 240, 269, 275, 276, 279], "drift": [33, 242], "driven": [47, 53, 264, 271, 278, 281, 283, 287], "driver": 45, "drop": 112, "drop_last": 273, "drop_nan_row": 259, "dropout": [63, 273], "drunkard": [29, 240, 261, 265, 284, 296, 302, 317, 334, 335], "drunkards_walk": [259, 284, 297, 327, 329], "drunkardswalk": [29, 259, 284], "ds_test": 273, "ds_test_3d": 273, "ds_train": 273, "ds_train_3d": 273, "dst_type": 63, "dstack": [271, 273, 275, 277, 282, 288, 299, 300, 305, 306, 310, 311, 312, 315], "dt": [22, 25, 26, 27, 28, 30, 32, 35, 36, 40, 43, 95, 102, 104, 106, 107, 108, 161, 239, 281, 328], "dtr": 275, "dtraj": [58, 74, 85, 86, 88, 89, 90, 91, 92, 95, 96, 98, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 148, 151, 153, 239, 241, 272, 273, 274, 275, 282, 285, 288, 300, 301, 304, 307, 309, 318, 320, 322, 323, 325, 330], "dtraj2": 318, "dtraj_n": [239, 307], "dtraj_n2": 239, "dtraj_n2bad": 239, "dtraj_n2good": 239, "dtraj_n6good": 239, "dtraj_rec": 288, "dtraj_test": 325, "dtype": [12, 18, 60, 61, 62, 63, 64, 65, 66, 90, 93, 94, 95, 98, 105, 183, 184, 185, 186, 189, 208, 210, 233, 234, 235, 239, 269, 272, 273, 285, 286, 325, 330], "dual": 264, "ducktyp": 224, "due": [55, 102, 106, 107, 108, 112, 219, 264, 269, 273, 276, 283, 284, 288], "dummi": 109, "duplic": [63, 260], "dure": [11, 14, 15, 16, 19, 62, 65, 86, 103, 106, 121, 242, 264, 268, 269, 277, 318], "dw_t": [32, 40], "dwd": 307, "dx": 331, "dx_t": [32, 40], "dxy": [283, 333], "dxy_pca": 333, "dxy_tica": 333, "dxy_vamp": 333, "dy": [57, 287], "dynam": [22, 27, 31, 32, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 49, 53, 55, 57, 73, 74, 95, 102, 106, 107, 108, 123, 132, 133, 143, 149, 198, 199, 200, 228, 236, 238, 243, 244, 264, 266, 269, 270, 271, 272, 277, 278, 279, 281, 283, 284, 287], "dynamicslab": 268, "e": [1, 6, 18, 23, 24, 26, 30, 34, 41, 44, 48, 50, 52, 54, 56, 57, 63, 65, 73, 82, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 123, 128, 130, 131, 132, 133, 139, 143, 151, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 179, 189, 190, 192, 193, 195, 196, 197, 199, 200, 208, 212, 219, 225, 226, 236, 240, 242, 262, 263, 264, 266, 268, 269, 270, 272, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 330], "e3221": [111, 113, 266, 285], "e3230": [111, 113, 266, 285], "e_": 41, "e_a": [102, 106, 107, 108], "e_i": [41, 104, 109, 164], "each": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 26, 27, 32, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 74, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 136, 138, 141, 142, 144, 148, 149, 150, 162, 169, 171, 176, 177, 189, 195, 197, 198, 199, 200, 212, 219, 226, 227, 228, 230, 231, 232, 233, 234, 236, 238, 242, 243, 244, 263, 266, 268, 269, 272, 274, 276, 279, 280, 281, 283, 284, 285, 286, 287], "eagon": [96, 276], "earli": 218, "earlier": 57, "earth": 236, "easi": 223, "easier": [112, 246, 264, 282], "easiest": 276, "easili": [264, 277], "ec": [130, 131], "ecologi": [96, 276], "edg": [84, 95, 150, 154, 155, 156, 189, 190, 240, 284, 286, 326], "edge_base_scal": 189, "edge_color": 240, "edge_curvatur": [189, 195, 197, 326], "edge_label": [189, 195, 197, 280, 284], "edge_label_format": [189, 195, 197], "edge_label_loc": 189, "edge_ord": 218, "edge_scal": [189, 195, 197], "edgecolor": [275, 307], "edmd": [48, 259, 264, 283], "edmd_estim": 271, "edmd_model": 271, "edmdkoopmanmodel": 47, "edmdmodel": [47, 259], "educt": 84, "edward": 31, "effect": [19, 44, 60, 62, 63, 73, 84, 85, 86, 88, 89, 91, 95, 96, 98, 104, 109, 110, 111, 112, 173, 178, 189, 190, 196, 200, 209, 210, 242, 266, 268, 279, 284, 286, 318, 323], "effective_count_matrix": 86, "effective_output_dimens": 44, "effici": [95, 102, 103, 104, 106, 107, 108, 109, 110, 111, 135, 150, 154, 155, 156, 164, 181, 207, 278], "effort": [231, 232, 233, 234, 235, 268], "efron": 149, "eg": 65, "eig": 259, "eig_corr": 259, "eig_n": 274, "eigendecomposit": [53, 278], "eigenfunct": [54, 55, 264, 271, 274, 277, 278, 283, 287, 324, 325], "eigenpair": 178, "eigenvalu": [20, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 57, 65, 68, 70, 71, 73, 74, 92, 102, 105, 106, 107, 108, 123, 124, 127, 137, 142, 143, 144, 147, 161, 177, 178, 182, 183, 184, 185, 186, 259, 264, 270, 271, 277, 278, 279, 283], "eigenvector": [44, 45, 47, 51, 52, 53, 54, 55, 83, 95, 102, 106, 107, 108, 115, 123, 126, 132, 137, 141, 142, 143, 144, 161, 177, 178, 182, 183, 270, 274, 277, 279, 280, 324], "eigenvectors_left": [102, 106, 107, 108, 274], "eigenvectors_left_ob": 95, "eigenvectors_right": [102, 106, 107, 108, 275], "eigenvectors_right_ob": 95, "eigenvlau": [123, 132], "eigvec": 127, "eijnden": [84, 116, 121, 161, 165, 167, 170, 171, 172, 173, 174, 266, 284], "either": [8, 29, 30, 44, 55, 57, 63, 65, 95, 104, 109, 112, 240, 241, 242, 264, 268, 281, 283, 284, 286, 287], "electr": 284, "electron": [161, 260], "element": [18, 65, 83, 90, 94, 95, 102, 104, 106, 107, 108, 109, 117, 118, 120, 126, 131, 136, 138, 145, 161, 183, 185, 189, 195, 197, 200, 202, 205, 224, 235, 242, 281, 286], "elementari": [139, 147], "elev": 301, "elimin": 86, "ell": 281, "ellipsoid": [259, 261, 269, 280, 283, 287, 296, 302, 318, 333, 335], "elm": [91, 276], "els": [26, 103, 104, 109, 110, 111, 121, 142, 159, 160, 163, 164, 200, 236, 238, 243, 244, 272, 273, 274, 284, 288, 305, 325], "elsevi": 283, "elsewher": 160, "elu": [272, 273], "em": 96, "email": 268, "embed": [49, 50, 108, 278], "embedd": 161, "emiss": [37, 38, 276, 282, 288, 300, 301], "empir": [44, 102, 106, 107, 108, 287, 304, 307], "empirical_koopman_model": [102, 106, 107, 108], "emploi": [83, 95, 266, 280, 281], "empti": [60, 62, 63, 65, 112, 192, 193, 209, 210, 270, 275, 283, 298], "enable_metadata_rout": 200, "encapsul": [44, 47, 49, 53, 60, 62, 65, 85, 194, 200, 239], "encod": [9, 57, 60, 61, 62, 64, 199, 236, 282], "encompass": 112, "encount": [85, 239, 266, 284, 286], "encourag": 219, "end": [20, 22, 23, 24, 30, 31, 37, 38, 39, 41, 43, 55, 57, 63, 98, 101, 102, 106, 107, 108, 121, 139, 158, 159, 160, 167, 171, 223, 232, 234, 235, 236, 237, 240, 241, 263, 268, 269, 272, 273, 275, 277, 281, 282, 283, 284, 286, 287, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "endpoint": [23, 293, 306, 310, 311, 315], "endpoints_3d": 23, "endpoints_3d_clust": 23, "endpoints_dataset": [23, 277, 324], "energi": [34, 41, 111, 112, 113, 194, 201, 219, 236, 238, 243, 244, 261, 265, 285, 303, 305, 309, 316, 317, 320, 330, 334, 335], "energy2d": [188, 194, 201, 259, 322], "energy2dplot": [194, 259], "energy_landscap": 219, "energylandscape2d": [194, 219, 259], "enforc": [55, 63, 91, 96, 151, 153, 283], "engin": [268, 299], "enough": [269, 280, 285], "ensembl": [102, 104, 106, 107, 108, 112, 116, 121, 163, 164, 165, 167, 170, 172, 284, 285], "ensur": [63, 91, 93, 95, 102, 106, 107, 108, 163, 268, 285], "enter": 284, "entir": [93, 162, 284], "entri": [12, 18, 63, 95, 98, 104, 109, 122, 141, 150, 176, 177, 233, 234, 235, 277, 278, 281], "enumer": [63, 87, 189, 266, 272, 274, 284, 285, 286, 319, 327, 330], "env": [63, 277], "ep": [23, 98, 99, 103, 187, 236, 272, 273, 275], "epoch": [60, 62, 65, 273], "epoch_train_scor": 273, "epoch_val_scor": 273, "eps_opt": 277, "epsilon": [19, 20, 44, 49, 51, 53, 55, 57, 65, 68, 69, 70, 71, 72, 73, 75, 102, 106, 107, 108, 177, 183, 184, 185, 186, 218, 242, 273, 275, 277, 278, 283, 324], "equal": [15, 18, 25, 26, 44, 55, 58, 59, 66, 73, 74, 83, 93, 94, 95, 97, 102, 106, 107, 108, 111, 112, 113, 117, 118, 119, 120, 170, 180, 225, 239, 269, 271, 272, 273, 283, 287, 298, 311, 318, 326, 333], "equat": [25, 26, 27, 32, 35, 36, 42, 43, 44, 73, 102, 106, 107, 108, 113, 121, 198, 199, 200, 228, 257, 258, 270, 271, 278, 281], "equilibirum": 283, "equilibr": [33, 283, 287], "equilibrium": [20, 21, 39, 44, 55, 57, 91, 95, 96, 98, 99, 102, 106, 107, 108, 109, 110, 111, 116, 121, 123, 128, 131, 132, 133, 143, 165, 167, 170, 172, 264, 266, 272, 283, 284, 285, 287, 333], "equip": [30, 65, 75, 241, 276, 287], "equiv": 242, "equival": [63, 93, 94, 97, 223, 264, 277, 283], "eric": [84, 116, 121, 161, 266, 284], "err_est": [92, 95, 102, 105, 106, 107, 108, 226, 228], "erron": 47, "error": [44, 63, 73, 85, 86, 91, 102, 103, 106, 107, 108, 111, 148, 149, 152, 161, 200, 276, 282, 284, 286, 287], "error_msg": 63, "errorbar": 276, "especi": 270, "essenti": 160, "est": 325, "estim": [2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 71, 73, 74, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 144, 194, 196, 198, 199, 200, 201, 219, 226, 228, 235, 242, 245, 259, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "estimates_sampl": 226, "estimator_from_feature_trajectori": 103, "estoppel": 268, "et": 266, "eta": 153, "eta_t": 34, "etc": [63, 85, 111, 112, 284, 286], "euclidean": [8, 10, 11, 13, 14, 15, 16, 17, 55, 104, 109, 164, 269, 283, 287, 330], "euler": [26, 27, 32, 34, 35, 36, 43, 271, 278], "ev": 274, "ev_real": [277, 324], "eval": [63, 182, 273, 325], "evalu": [4, 5, 6, 7, 11, 16, 22, 25, 26, 27, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 54, 55, 57, 60, 62, 63, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 95, 97, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 148, 152, 189, 198, 199, 202, 216, 228, 230, 236, 238, 242, 243, 244, 264, 269, 272, 273, 276, 277, 278, 279, 284, 285, 287, 288, 325, 330], "evaluat": 279, "evaluate_loss": [60, 62], "evaluate_sampl": [92, 105], "evec": 182, "even": [82, 98, 112, 187, 266, 270, 287], "event": [172, 264, 266, 268, 272, 284], "ever": 268, "everi": [1, 8, 15, 49, 57, 63, 84, 95, 102, 106, 107, 108, 111, 112, 113, 148, 149, 163, 183, 185, 269, 276, 287, 330], "everyon": 268, "everyth": [98, 221, 269], "evgenii": 283, "evid": 269, "evolut": [23, 56, 143, 225, 281, 290], "evolv": [236, 238, 243, 244, 271, 272, 273, 281], "evr": 275, "ewal": [91, 276], "exact": [45, 46, 239, 270, 281, 328], "exact_dmd": 270, "exact_model": 270, "exactli": [55, 57, 58, 63, 102, 106, 107, 108, 109, 211, 223, 264, 284], "exampl": [6, 10, 12, 22, 23, 25, 26, 27, 29, 30, 32, 34, 35, 36, 40, 43, 55, 63, 85, 86, 93, 94, 95, 102, 104, 106, 107, 108, 109, 112, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 189, 198, 212, 218, 223, 225, 240, 241, 249, 261, 263, 269, 272, 274, 276, 277, 278, 279, 283, 285, 286, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "exce": [55, 57, 240, 264], "excel": 55, "except": [18, 63, 74, 90, 93, 94, 97, 102, 106, 107, 108, 161, 195, 197, 200, 259, 263, 268, 286, 287], "exchang": [111, 112, 266, 285], "exclud": [57, 92, 95, 105, 109, 268, 284], "exclus": [55, 57, 86, 196, 284], "execut": [11, 14, 63, 65, 111, 263, 268, 295, 302, 316, 334, 335], "exhibit": 272, "exis": 196, "exist": [15, 18, 57, 63, 83, 98, 99, 135, 191, 200, 206, 223, 240, 263, 270, 279, 280], "exit": [104, 109, 111, 121, 164, 237], "exp": [76, 77, 79, 113, 273, 277, 281, 292], "expans": 281, "expect": [6, 11, 14, 44, 57, 63, 95, 102, 103, 104, 106, 107, 108, 112, 113, 129, 130, 131, 133, 139, 143, 189, 200, 259, 273, 276, 277, 278, 280, 282, 283, 284, 287], "expectation_ob": 95, "expectations_by_st": 103, "expens": [171, 276], "experi": [95, 102, 103, 106, 107, 108, 123, 132, 133, 143, 272], "experiment": [45, 102, 103, 106, 107, 108, 264, 266, 270, 283], "experimental_measur": 103, "experimental_measurement_weight": 103, "explain": [55, 268, 282, 283, 287], "explan": 63, "explicit": 33, "explicitli": [55, 102, 106, 107, 108, 283, 286], "exploit": [231, 232, 233, 234, 235], "exponenti": [25, 161, 287], "export": 269, "expos": [13, 17, 263], "express": [44, 130, 237, 268, 276, 287], "expressli": 268, "ext_modul": 269, "extend": [47, 53, 104, 260, 264, 271, 275, 278, 283, 287], "extens": [13, 17, 242, 243, 244, 269], "extent": 268, "extern": 287, "extra": 63, "extra_compile_arg": 269, "extra_link_arg": 269, "extra_repr": 63, "extract": [55, 91, 96, 98, 102, 106, 107, 108, 281], "extrapol": [44, 217, 287], "extrem": 161, "ey": 10, "f": [18, 25, 26, 44, 47, 48, 50, 52, 54, 56, 57, 102, 106, 107, 108, 110, 113, 149, 152, 157, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 216, 236, 237, 238, 240, 243, 244, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 300, 305, 306, 307, 309, 310, 311, 314, 315, 319, 320, 321, 325, 326, 327, 329, 331, 332, 333], "f_": [44, 112, 152, 165, 167, 173, 281, 284], "f_1": [4, 152, 281, 287], "f_2": [4, 281], "f_i": [111, 113, 152, 281, 287], "f_k": [113, 152], "fabian": [20, 21, 55, 85, 91, 102, 103, 104, 111, 113, 164, 266, 279, 283, 285, 286, 287], "fabritii": [55, 283], "face": 240, "facecolor": [274, 275], "facil": 268, "fact": [55, 102, 106, 107, 108, 160, 260, 283], "factor": [18, 27, 34, 85, 86, 111, 112, 113, 153, 189, 264, 286], "factori": 214, "factr": 161, "fail": 268, "faith": 268, "fall": [86, 107, 112], "fallback": 144, "fals": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 120, 121, 122, 125, 127, 135, 136, 137, 138, 142, 147, 150, 151, 154, 155, 156, 163, 164, 167, 177, 179, 181, 183, 185, 186, 193, 195, 198, 199, 200, 202, 205, 211, 212, 215, 223, 228, 231, 232, 233, 234, 235, 236, 237, 240, 241, 243, 271, 272, 273, 274, 276, 282, 284, 286, 287, 288, 291, 298, 299, 301, 306, 309, 310, 311, 315, 318, 326, 331, 332, 333], "famili": [104, 242, 262, 270, 276], "familiar": [263, 269, 270, 271, 276, 279, 281, 282, 283, 287, 288], "fan_in": 273, "fanci": 207, "fancybox": 304, "far": 86, "fashion": [14, 18, 264, 269], "fast": [164, 283], "faster": [231, 232, 233, 234, 235, 272], "favor": 63, "fc_": 165, "fd": 216, "fd_window_radiu": [218, 331], "fdel": 213, "feat": [275, 288], "feat_cc": 275, "featur": [6, 30, 44, 48, 49, 50, 52, 54, 55, 56, 57, 60, 65, 103, 198, 199, 200, 241, 246, 273, 277, 278, 281, 283, 287, 288], "feature_component_correl": [44, 283], "feature_nam": 6, "feature_trajectori": [30, 103, 264, 283, 287, 333], "fed": 269, "feedback": 39, "felik": [20, 21, 55, 74, 107, 110, 264, 266, 283, 287], "fell": 112, "femtosecond": 110, "fetch": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 74, 85, 91, 96, 102, 103, 104, 106, 107, 108, 109, 110, 111, 198, 263, 269, 272, 283, 286], "fetch_model": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 198, 263, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 319, 320, 324, 325, 328, 332, 333], "few": [242, 277, 279, 284], "fewer": [239, 242, 268, 276, 283], "ff5500": [189, 195, 197], "fget": 213, "fh": 272, "field": 63, "fig": [271, 273, 277, 278, 280, 281, 284, 285, 291, 297, 298, 301, 304, 306, 310, 311, 312, 315, 323, 324, 327, 328, 329, 330], "figsiz": [242, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 297, 299, 300, 314, 319, 321, 325, 326, 327, 328, 329, 330, 332, 333], "figur": [191, 194, 197, 242, 266, 269, 271, 273, 275, 276, 277, 278, 280, 290, 293, 294, 298, 301, 324, 328, 331, 333], "file": [263, 268, 269, 295, 302, 316, 334, 335], "fill": [196, 240, 284], "fill_": 63, "fill_between": 279, "final": [18, 20, 55, 57, 112, 269, 273, 274, 285, 293], "final_tim": 292, "find": [11, 15, 29, 55, 65, 86, 92, 98, 112, 125, 240, 242, 254, 262, 264, 268, 269, 273, 277, 281, 283, 284, 287, 288, 324], "find_packag": 269, "fine": [86, 190, 274, 275, 281], "finest_cl": 274, "finest_msm": 274, "finetun": 63, "fingerprint": [95, 102, 106, 107, 108, 123, 132, 133, 143, 259], "fingerprint_correl": [95, 102, 106, 107, 108, 133], "fingerprint_correlation_ob": 95, "fingerprint_relax": [95, 102, 106, 107, 108, 132], "fingerprint_relaxation_ob": 95, "finish": 269, "finit": [55, 56, 57, 98, 135, 216, 217, 218, 219, 264, 266, 277, 281, 287, 331], "finite_difference_coeffici": 259, "finite_difference_operator_midpoint": 259, "fire": 63, "firebrick": 328, "first": [4, 15, 18, 22, 23, 25, 26, 27, 32, 34, 35, 36, 37, 38, 40, 43, 44, 48, 57, 58, 60, 62, 65, 83, 84, 86, 91, 98, 102, 106, 107, 108, 109, 111, 112, 113, 115, 121, 125, 127, 135, 139, 140, 144, 147, 150, 151, 154, 155, 156, 170, 177, 184, 185, 186, 189, 190, 199, 205, 217, 224, 230, 233, 234, 235, 237, 252, 263, 266, 269, 270, 271, 272, 273, 274, 275, 277, 278, 281, 282, 283, 284, 287, 288], "fischer": [279, 280], "fission": 242, "fit": [1, 8, 11, 12, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 66, 74, 85, 91, 93, 94, 95, 96, 97, 103, 104, 109, 110, 111, 198, 199, 200, 263, 264, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 319, 320, 324, 325, 328, 332, 333], "fit_fetch": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 74, 85, 91, 96, 103, 104, 109, 110, 111, 198, 272, 273, 274, 275, 285, 318, 320, 322, 323, 330], "fit_from_count": [104, 109], "fit_from_covari": [55, 57], "fit_from_discrete_timeseri": [104, 109], "fit_from_msm": 104, "fit_from_timeseri": [55, 57], "fit_intercept": 200, "fit_opt": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85], "fit_transform": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85, 275, 318], "five": 10, "fix": [11, 14, 16, 33, 39, 55, 86, 96, 102, 103, 106, 107, 108, 109, 139, 163, 183, 185, 236, 238, 242, 243, 244, 269, 276, 277, 283, 287, 319], "fixed_initial_distribut": 96, "fixed_se": [11, 14, 269, 280, 285, 319], "fixed_stationary_distribut": 96, "fixed_width": 211, "flag": [0, 86, 95, 112, 206, 207, 208, 209, 210], "flat": [272, 283], "flatten": [272, 274, 276, 284, 285, 326, 327, 330], "flavor": [266, 282], "float": [11, 12, 14, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 49, 50, 51, 53, 55, 57, 60, 62, 63, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 87, 91, 92, 95, 96, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 128, 136, 137, 138, 144, 152, 157, 158, 159, 160, 161, 164, 166, 168, 170, 171, 172, 174, 177, 181, 183, 184, 185, 186, 187, 189, 191, 195, 196, 197, 199, 200, 201, 202, 205, 216, 218, 219, 226, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 273, 275, 283, 287, 325], "float16": 63, "float32": [60, 61, 62, 64, 65, 66, 93, 272, 273, 275, 282, 288, 299], "float64": [60, 62, 63, 65, 93, 113, 128, 157], "floor": [149, 285], "flow": [22, 31, 261, 287, 289, 295, 335], "flowfield": 290, "fluctuat": [264, 283], "fluid": [22, 33, 45, 242, 261, 264, 265, 270, 283, 296, 302, 317, 334, 335], "fluoresc": [102, 106, 107, 108], "flux": [84, 102, 106, 107, 108, 116, 189, 195, 197, 237, 240, 259, 265, 266, 317, 326, 334, 335], "flux_matrix": 172, "flux_scal": 195, "flux_set": 284, "fmin_l_bfgs_b": 161, "fmt": 276, "fn": 63, "fo": [102, 106, 107, 108, 128], "fold": [55, 74, 116, 121, 165, 167, 170, 172, 283, 284], "follow": [45, 55, 57, 63, 74, 84, 91, 98, 102, 104, 106, 107, 108, 111, 112, 121, 128, 130, 161, 163, 189, 199, 219, 223, 237, 242, 262, 263, 266, 268, 269, 270, 271, 273, 275, 278, 280, 281, 283, 284, 285, 287], "follw": 137, "font_siz": 286, "fontsiz": [274, 275], "footbibliographi": 263, "footcit": 263, "fopenmp": 269, "foral": [24, 158, 167, 266, 279, 284], "forc": [26, 33, 36, 91, 98, 99, 113, 242, 276, 287], "foremost": 287, "fork": 254, "form": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 25, 26, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 151, 177, 198, 199, 200, 209, 268, 269, 270, 276, 277, 278, 281, 283, 284, 287, 292, 305, 319], "formal": [121, 284], "format": [63, 151, 153, 189, 195, 197, 273, 274, 275, 276, 287, 321], "former": [11, 63, 74, 269], "formul": [45, 116, 167, 260, 266, 277, 284], "formula": 18, "forth": 268, "forward": [22, 27, 32, 34, 35, 36, 40, 43, 44, 48, 50, 52, 54, 56, 57, 60, 63, 84, 95, 102, 106, 107, 108, 116, 121, 122, 123, 132, 135, 167, 196, 199, 235, 237, 272, 273, 277, 278, 281, 282, 284, 287, 326, 328, 332], "forward_committor": [84, 167, 284, 326], "forward_component0": 287, "forward_component0123": 287, "forward_component1": 287, "forward_ful": 287, "forward_pr": 63, "forward_transform": 273, "found": [43, 49, 63, 85, 90, 91, 109, 110, 113, 263, 269, 273, 276, 277, 278, 286], "foundat": 268, "four": [271, 278, 284, 287], "foward": 287, "frac": [23, 27, 34, 36, 40, 43, 44, 55, 57, 77, 102, 103, 106, 107, 108, 132, 133, 139, 147, 151, 152, 161, 172, 189, 200, 232, 234, 236, 242, 269, 270, 281, 283, 284, 331], "fraction": [55, 57, 84, 86, 108, 171, 284], "fragment": [58, 74, 284], "frame": [9, 10, 11, 12, 14, 15, 18, 23, 44, 85, 86, 95, 102, 106, 107, 108, 148, 210, 239, 242, 263, 264, 266, 272, 273, 274, 275, 280, 283, 287, 301, 312, 330], "franci": [51, 264, 277], "frank": [15, 20, 21, 34, 44, 55, 57, 60, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 116, 121, 123, 132, 133, 143, 151, 164, 260, 262, 264, 266, 269, 276, 277, 279, 282, 283, 284, 285, 286, 287, 288], "franklin": 161, "free": [18, 39, 44, 55, 111, 112, 113, 268, 283, 285, 287, 330], "freedom": [57, 160], "freeli": 284, "freez": 63, "freie": 260, "frequent": 283, "frobeniu": [47, 278], "from": [8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 24, 27, 30, 32, 34, 35, 36, 40, 43, 44, 47, 48, 55, 57, 58, 63, 65, 73, 74, 83, 84, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 170, 171, 172, 173, 176, 185, 187, 188, 189, 194, 195, 197, 198, 199, 200, 205, 209, 210, 212, 213, 217, 223, 231, 232, 233, 234, 235, 237, 239, 242, 252, 254, 257, 260, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335], "from_data": [55, 57, 95, 98, 99, 259], "from_model": [196, 227], "from_numpi": [209, 272, 273], "from_numpy_arrai": [189, 326], "from_numpy_matrix": 286, "from_trajectori": [209, 210], "fromal": 121, "front": [26, 203], "froyland": 277, "fruchterman_reingold_layout": 280, "fset": 213, "fsf": 268, "ftraj": [241, 283, 299], "ftraj_interp": 283, "fu": [85, 260, 286], "fuchigami": [264, 283], "fulfil": [163, 166, 168, 242], "full": [44, 58, 84, 86, 95, 102, 103, 104, 106, 107, 108, 109, 115, 149, 163, 164, 165, 167, 170, 172, 195, 260, 264, 269, 283, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "full_period": 236, "fulli": [63, 83, 115, 161], "funcanim": [242, 273, 290, 301, 312], "funcformatt": 321, "function": [3, 9, 10, 11, 12, 14, 20, 21, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 85, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 148, 149, 151, 153, 161, 167, 198, 199, 200, 203, 236, 238, 243, 244, 254, 259, 263, 264, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 324, 325, 326, 331], "functool": 223, "furnish": 268, "further": [23, 55, 57, 191, 264, 272, 283, 287], "furthermor": [104, 260, 264, 266, 276, 279, 284, 286], "futur": [44, 48, 50, 52, 54, 56, 57, 63, 268, 287], "fuzzi": [83, 95, 98, 99, 107, 115, 141, 266, 272, 276, 280], "g": [6, 18, 44, 47, 48, 50, 52, 53, 54, 56, 63, 76, 77, 78, 79, 80, 81, 82, 86, 93, 94, 97, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 135, 139, 153, 190, 192, 193, 195, 196, 197, 199, 200, 225, 262, 263, 264, 266, 268, 269, 271, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 324, 333], "g_": [44, 277, 278], "g_1": 287, "g_i": 287, "galleri": 335, "gamma": 95, "gamma_i": [132, 133], "gan": 63, "gap": [283, 287], "gari": 277, "gather": [202, 279, 285], "gather_stat": [92, 104, 105, 276, 279], "gaussian": [30, 76, 77, 81, 94, 95, 96, 98, 99, 101, 241, 269, 275, 276, 277, 278, 282, 287], "gaussian_kd": [275, 282, 288, 300], "gaussiankernel": [69, 81, 259, 273, 275, 277, 278, 324, 325], "gaussianmixtur": [269, 319], "gaussianoutputmodel": [97, 101, 253, 259], "gca": [190, 192, 193, 194, 195, 298], "gene": 18, "gener": [10, 11, 15, 16, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 58, 77, 84, 91, 93, 94, 95, 97, 102, 104, 106, 107, 108, 109, 117, 121, 123, 125, 127, 132, 133, 142, 144, 147, 148, 149, 151, 153, 157, 161, 163, 164, 177, 189, 200, 211, 212, 236, 237, 238, 239, 241, 243, 244, 259, 264, 266, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 319, 328], "generalizedgaussiankernel": 259, "generate_observation_trajectori": [93, 94, 97], "geometr": [85, 111, 112, 286], "georg": [23, 55, 164, 236, 264, 283], "geq": [18, 121, 138, 181, 264, 270, 282, 284], "gerhard": 284, "get": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 74, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 153, 165, 198, 199, 200, 207, 213, 242, 269, 270, 272, 273, 276, 279, 282, 285, 328], "get_bias_funct": 330, "get_buff": 63, "get_cmap": [284, 325, 326], "get_edge_attribut": [280, 284], "get_extra_st": 63, "get_feature_nam": 6, "get_feature_names_out": [6, 198, 199], "get_includ": 269, "get_metadata_rout": 200, "get_node_attribut": [280, 284], "get_param": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200], "get_paramet": 63, "get_submodul": 63, "get_swap_module_params_on_convers": 63, "get_yaxi": 326, "getter": [11, 14, 15, 18, 20, 44, 55, 57, 60, 62, 65, 76, 81, 85, 104, 109, 112, 113, 189, 213, 226, 236, 237], "gianni": [55, 283], "gibb": [91, 104, 163, 276, 279], "gingold": 242, "giorgino": [55, 283], "girsanov": 153, "github": [213, 223, 263, 268], "give": [28, 86, 104, 109, 112, 113, 149, 198, 199, 268, 280, 281, 284, 285, 286, 287], "given": [6, 8, 11, 12, 15, 18, 26, 27, 32, 35, 36, 37, 38, 42, 43, 44, 55, 57, 58, 60, 63, 65, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 172, 189, 195, 197, 198, 200, 205, 211, 218, 223, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 266, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287], "global": [63, 91, 96, 98, 99, 263, 273, 285], "gmm": [269, 319], "gnu": 268, "go": [135, 191, 240, 263, 276, 283, 284, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "goal": [266, 275, 276], "golub": 18, "good": [55, 111, 239, 266, 268, 272, 276, 283, 307], "got": 112, "govern": [198, 200, 257, 266, 268, 281, 285], "gpl": 268, "gpu": [63, 273], "gpu1": 63, "grab": [192, 193], "grad": 63, "grad_input": 63, "grad_output": 63, "gradient": [63, 82, 198, 199, 218, 236, 238, 242, 243, 244, 331], "gradual": 284, "grai": 272, "grain": [83, 84, 95, 98, 99, 102, 106, 107, 108, 165, 190, 195, 197, 266, 276, 281], "gram": [76, 77, 78, 79, 80, 81, 277, 278], "gramian": [76, 77, 78, 79, 80, 81], "grant": 268, "graph": [86, 87, 92, 95, 135, 150, 154, 155, 156, 190, 284, 286, 290], "graphic": [33, 242, 287], "graviti": 242, "grayscal": [195, 197], "great": [264, 266], "greater": [15, 44, 55, 57, 73, 102, 106, 107, 108, 112, 123, 125, 127, 132, 133, 142, 144, 147, 177, 269, 276, 280, 283], "green": 325, "gregori": [164, 266], "grei": [196, 274], "grid": [8, 29, 191, 216, 217, 218, 226, 240, 273, 275, 277, 284, 288, 297, 298, 318], "grid_siz": [29, 240, 284, 297, 327, 329], "griddata": 192, "gross": [84, 167, 173, 189, 265, 284, 317, 326, 334, 335], "gross_flux": [84, 189, 284, 326, 329], "ground": [270, 275, 276, 279, 281, 325], "ground_truth": 276, "group": [115, 260], "grow": 264, "gt": [275, 282, 283], "guarante": [63, 211, 223, 264], "guess": [11, 14, 16, 95, 96, 98, 99, 101, 218, 259, 276, 277, 280], "guestbook": 260, "guid": [200, 277, 278], "guillermo": [55, 283], "h": [13, 17, 22, 25, 26, 27, 31, 32, 34, 35, 36, 39, 40, 42, 43, 45, 53, 134, 149, 157, 163, 236, 238, 242, 243, 244, 264, 269, 270, 271, 273, 277, 278, 292, 294, 305, 309, 312, 314, 320, 321, 322], "h1": 325, "h2": 325, "h_i": 134, "ha": [15, 20, 24, 33, 39, 44, 57, 63, 81, 84, 85, 86, 93, 95, 98, 102, 104, 106, 107, 108, 109, 116, 117, 118, 119, 120, 121, 125, 135, 136, 137, 138, 149, 154, 163, 164, 175, 176, 189, 190, 196, 199, 200, 204, 237, 240, 242, 260, 268, 269, 271, 274, 275, 276, 279, 280, 281, 284, 285, 286, 287], "hadjighasem": [23, 236], "half": [30, 44, 57, 63, 73, 241, 277, 284], "haller": [23, 236], "hamiltonian": 330, "hand": [25, 26, 95, 199, 236, 238, 243, 244, 262, 269, 283, 287, 320], "handl": [63, 81, 112, 220, 240, 273, 284, 287, 297, 312, 325, 327], "handle_n_job": [236, 238, 243, 244, 259], "handle_progress_bar": 259, "hao": [15, 20, 21, 34, 44, 49, 55, 57, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 151, 164, 262, 264, 266, 269, 276, 279, 283, 285, 286, 287, 288], "happen": [86, 171], "happend": 161, "hard": [263, 284], "harder": 276, "hardwar": 288, "harmon": [26, 285, 330], "harmonic_sphere_energi": 305, "harmonic_sphere_forc": [26, 305], "harold": [51, 277, 287], "hartigan": [15, 269], "has_count_model": [102, 106, 107, 108], "has_error": 226, "has_model": [1, 8, 11, 14, 15, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 198], "has_potential_funct": [236, 238, 243, 244], "has_sampl": 227, "hat": [44, 269, 270], "have": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 119, 131, 142, 154, 164, 165, 166, 168, 176, 193, 198, 199, 200, 211, 212, 219, 223, 231, 232, 233, 234, 236, 238, 240, 242, 243, 244, 263, 268, 269, 272, 279, 281, 282, 283, 285, 286], "hb": [272, 283], "he": 284, "header": [268, 273], "heatmap": [269, 275, 282, 283, 288, 300], "heavi": 272, "heavili": [104, 283], "height": [189, 191, 226, 284], "height_ratio": 275, "heinz": [55, 264, 283], "held": [15, 18, 34, 151, 157, 164, 266, 268, 269], "help": [63, 266, 283], "helper": [269, 284], "hendrik": [15, 34, 91, 95, 98, 99, 107, 110, 151, 164, 264, 266, 269, 276], "here": [18, 26, 55, 57, 104, 109, 110, 116, 148, 161, 167, 188, 216, 242, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 280, 282, 283, 284, 286, 287, 288], "herebi": [85, 268], "herein": 268, "hermetian": [68, 71], "hermitian": [177, 181], "hern": [55, 283], "heurist": [96, 98, 99, 101, 104, 276], "hex": [195, 197], "hexbin": [269, 272, 283, 319], "hi": 260, "hidden": [30, 37, 38, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 253, 282, 288, 300, 301], "hidden_ix": 276, "hidden_state_trajectori": [93, 94, 95, 97], "hidden_state_trajectories_sampl": [91, 92], "hidden_trajectori": 276, "hiddenmarkovmodel": [91, 92, 96, 98, 99, 100, 101, 102, 106, 107, 108, 259, 276], "hierarchi": [92, 105], "high": [34, 161, 208, 264, 266, 269, 278, 284, 319], "higher": [30, 44, 95, 241, 242, 269, 272, 273, 280], "highest": [111, 112], "highli": [269, 270, 280], "highlight": [278, 283], "hilbert": 278, "hill": 284, "hinrich": [91, 276], "hire": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 190, 191, 192, 193, 194, 195, 196, 197, 218, 219, 228, 229], "hiroshi": [23, 236], "hist": [274, 285, 304, 307, 313, 314], "hist2d": 278, "histogram": [86, 90, 104, 106, 112, 192, 193, 219, 274, 278, 285, 286, 313, 314], "histogram_valu": 286, "histori": 164, "hit": [121, 134, 139, 237, 284], "hmm": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 197, 259, 268, 276], "hmm_est_random": 276, "hmm_est_real": 276, "hmm_init": [98, 99, 101], "hoc": 240, "hoel": [135, 139], "hoffmann": 287, "hold": [113, 137, 163, 227, 253, 263, 276, 284, 285], "holder": 268, "hollow": [240, 284, 327], "home": [29, 240, 277, 284, 318, 325, 326], "home_loc": [29, 240, 284, 297, 327, 329], "home_st": [284, 329], "homogen": [275, 287], "hook": 63, "horizontalalign": [274, 275], "host": [63, 263], "hot": 9, "hotel": [51, 277, 287], "how": [11, 12, 18, 44, 63, 94, 96, 97, 109, 199, 200, 220, 223, 240, 253, 263, 264, 271, 272, 277, 278, 279, 281, 282, 283, 285, 286, 287, 318, 320, 321, 322, 323, 328, 329, 330], "howard": 18, "howev": [44, 63, 85, 102, 106, 107, 108, 263, 269, 276, 277, 280, 283, 287], "html": [195, 197, 273, 277, 287], "htraj": 95, "http": [85, 195, 197, 213, 223, 268, 286], "huisinga": [279, 280], "human": 199, "hummer": 284, "husic": [266, 277, 287], "hybrid": 279, "hydrodynam": 242, "hyothet": 287, "hyperparamet": 269, "hypothesi": 242, "hypothet": 112, "i": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 212, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 252, 254, 260, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 301, 305, 312, 319, 325, 327, 329, 330, 332], "i1": [102, 106, 107, 108], "i_1": 269, "i_hidden": 276, "i_k": 269, "i_ob": 276, "ibm": 240, "ica": 283, "id": [142, 161, 270], "idea": [74, 269, 270], "ideal": 22, "ident": [44, 49, 55, 56, 57, 75, 84, 91, 95, 102, 106, 107, 108, 112, 221, 228, 259, 270, 271, 276, 277, 283], "identif": [55, 198, 200, 264, 265, 280, 281, 283, 317, 334, 335], "identifi": [29, 240, 264, 272], "idx": 63, "ieee": [269, 276], "ignor": [11, 14, 20, 55, 57, 60, 61, 62, 63, 64, 66, 90, 91, 93, 94, 96, 102, 106, 107, 108, 117, 161, 198, 199, 200, 205, 225, 269, 283, 284, 318], "ignore_counting_mod": 104, "ignore_neg": 90, "ignore_outli": [93, 94, 97], "ignore_w": 63, "ii": 95, "ij": [24, 44, 91, 93, 98, 111, 113, 121, 125, 127, 134, 135, 136, 137, 138, 147, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 167, 173, 237, 240, 266, 277, 278, 279, 280, 284, 286], "ijk": 152, "ik": [104, 109, 161, 164], "ilbert": [53, 278], "illeg": 260, "illustr": [277, 278, 280], "im": [285, 287, 330], "imag": [270, 284], "imagin": 284, "imaginari": [44, 318, 325], "immedi": [63, 225], "impl": [13, 76], "implement": [0, 9, 10, 11, 12, 13, 14, 17, 18, 22, 23, 27, 32, 35, 36, 43, 51, 53, 57, 63, 65, 66, 72, 74, 76, 77, 78, 79, 80, 81, 91, 93, 97, 102, 104, 106, 107, 108, 109, 115, 121, 149, 153, 161, 164, 198, 199, 203, 204, 218, 225, 236, 242, 243, 244, 251, 259, 262, 263, 264, 266, 269, 273, 276, 283, 284, 287, 319], "implent": 278, "impli": [44, 86, 133, 147, 149, 196, 258, 265, 268, 272, 283, 317, 334, 335], "implic": 268, "implicitli": [11, 14, 44, 104, 109], "implied_timescal": [259, 272, 323], "impliedtimescal": [196, 229, 259], "import": [6, 12, 13, 17, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 40, 43, 55, 57, 102, 104, 106, 107, 108, 109, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 188, 189, 222, 245, 263, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "imprint": 259, "improv": [55, 264, 283], "imshow": [274, 284, 287, 327], "in_featur": [63, 272, 282, 288], "inact": [102, 106, 107, 108], "inc": [15, 203, 268, 269, 330], "inc_clust": [13, 17, 269], "includ": [13, 17, 44, 55, 57, 63, 87, 95, 102, 106, 107, 108, 166, 168, 228, 260, 263, 266, 268, 269, 271, 284], "include_dir": 269, "include_lag0": [44, 92, 95, 102, 105, 106, 107, 108, 228], "inclus": [26, 86, 223], "incom": 65, "incompatible_kei": 63, "incomplet": 260, "incorpor": 268, "incorrect": 260, "increas": [86, 96, 112, 171, 195, 197, 264, 284], "increment": [18, 73, 111, 203, 285], "independ": [51, 55, 96, 148, 149, 163, 231, 232, 233, 234, 235, 244, 264, 277, 283], "index": [9, 10, 12, 18, 83, 90, 93, 94, 95, 97, 102, 103, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 126, 145, 166, 168, 205, 223, 227, 237], "indexerror": 108, "indic": [9, 10, 11, 12, 16, 85, 86, 92, 95, 102, 104, 105, 106, 107, 108, 111, 112, 113, 117, 118, 119, 120, 125, 127, 142, 147, 151, 153, 168, 195, 197, 199, 203, 223, 233, 234, 235, 260, 266, 272, 273, 276, 283, 286], "indices_by_distribut": 259, "indices_by_sequ": 259, "indices_by_st": 259, "individu": [55, 57, 63, 74, 86, 107, 123, 132, 133, 143, 150, 191, 236, 243, 260, 272], "induc": [57, 269, 286, 287], "ineffici": [85, 149, 286], "inequ": [96, 276], "inertia": [11, 12, 269, 273], "inf": [20, 55, 57, 121, 132, 133, 147, 237, 277, 284], "infer": [112, 113, 161, 283], "infin": 20, "infinit": [102, 106, 107, 108, 284, 287], "infinitesim": 57, "influenc": [19, 187, 200, 242, 283], "influx": [166, 168], "info": [195, 197], "inform": [12, 63, 106, 107, 112, 199, 200, 253, 260, 268, 269, 271, 276, 278, 283, 286, 287, 330], "infti": [153, 269, 281], "ingmar": [53, 278], "inherit": 263, "inhomogen": [80, 273, 287], "init": [63, 91, 95, 98, 99, 100, 101, 263, 276, 278, 301], "init_func": 301, "init_hmm": 100, "init_hmm_random": 276, "init_maxerr": 111, "init_maxit": 111, "init_pos_i": 299, "init_pos_x": 299, "init_strategi": [11, 14, 111, 269, 285, 319, 330], "init_weight": 63, "initi": [1, 8, 11, 14, 15, 16, 18, 20, 22, 23, 27, 32, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 85, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 130, 143, 161, 198, 199, 218, 236, 238, 240, 242, 243, 244, 259, 273, 276, 281, 283, 284, 285, 287, 319, 328, 330], "initial_batchnorm": 282, "initial_cent": [11, 14, 269], "initial_count": 95, "initial_distribut": 95, "initial_distribution_prior": 91, "initial_hmm": [91, 276], "initial_model": [91, 96, 276], "initial_posit": [33, 242, 299], "inlin": 268, "inner": [111, 277], "inplac": [63, 236], "input": [3, 4, 5, 6, 7, 9, 11, 14, 16, 18, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 73, 74, 85, 86, 88, 91, 95, 96, 98, 102, 106, 107, 108, 109, 110, 111, 112, 116, 144, 148, 164, 175, 176, 181, 183, 187, 198, 199, 200, 207, 212, 221, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 242, 262, 271, 282, 283, 285, 287, 288], "input_dimens": 44, "input_featur": [6, 198, 199, 281], "insert": 223, "insid": [55, 57, 103, 111, 196, 200, 242, 263, 271], "insight": 287, "inspect": 281, "inspir": 213, "instabl": [94, 242, 280], "instal": [215, 222, 250, 262, 268, 269, 272, 288], "instanc": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 26, 27, 29, 32, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 188, 198, 199, 200, 208, 210, 227, 228, 239, 273, 276, 279, 283, 286, 287, 288], "instantan": [0, 18, 19, 44, 49, 50, 54, 57, 60, 62, 65, 66, 67, 68, 75, 177, 208, 210, 225, 282, 283, 287], "instantaneous_coeffici": 44, "instantaneous_ob": [44, 48, 50, 52, 54, 56], "instanti": [13, 17, 102, 276, 279, 281, 287, 328], "instead": [44, 48, 49, 50, 52, 54, 55, 56, 57, 63, 70, 74, 102, 103, 104, 106, 107, 108, 109, 110, 111, 200, 237, 240, 264, 282, 283, 325, 326], "institut": 260, "instruct": 263, "int": [6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 49, 51, 53, 55, 57, 58, 59, 60, 62, 63, 65, 73, 74, 75, 80, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 161, 162, 163, 164, 165, 166, 168, 171, 177, 178, 187, 189, 192, 193, 194, 196, 199, 200, 203, 209, 210, 211, 212, 216, 218, 219, 220, 223, 225, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 263, 269, 272, 273, 274, 282, 283, 287, 288], "int32": [272, 285, 286, 330], "integ": [8, 11, 15, 44, 55, 57, 84, 85, 86, 95, 102, 103, 105, 106, 107, 108, 109, 111, 112, 116, 119, 121, 122, 134, 150, 155, 174, 199, 220, 240, 241, 269, 283, 284, 287], "integr": [22, 25, 26, 27, 31, 32, 34, 35, 36, 39, 40, 42, 43, 57, 63, 149, 199, 218, 236, 238, 243, 244, 271, 278, 328], "integrator_kw": 199, "intend": [76, 77, 78, 79, 80, 81, 260], "intens": [283, 284, 287], "interact": [33, 55, 242, 283], "interaction_dist": 242, "intercept": [199, 200], "intercept_": 198, "interdisciplinari": 277, "interest": [102, 104, 106, 107, 108, 148, 149, 205, 266, 269, 273, 284], "interfac": [11, 76, 77, 78, 79, 80, 81, 97, 111, 112, 127, 204, 263, 268, 269, 270, 271, 276, 279, 280, 281, 282, 283, 287, 288], "intermedi": [84, 240, 264, 284], "intermediate_st": 84, "intern": [1, 8, 11, 14, 15, 18, 20, 22, 27, 32, 34, 35, 36, 39, 40, 43, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 71, 73, 85, 91, 93, 94, 95, 96, 102, 103, 104, 106, 107, 108, 109, 110, 111, 116, 198, 218, 241, 242, 264, 269, 284], "internet": 260, "interp": [274, 283], "interpol": [192, 240, 283, 284, 306, 310, 311, 315, 327], "interpret": [44, 92, 109, 189, 222, 223, 225, 240, 264, 277, 283, 284, 286, 287], "intersect": 104, "interv": [30, 86, 92, 103, 104, 105, 191, 202, 205, 226, 241, 252, 273, 279, 283, 290, 291, 301, 312], "introduc": [23, 33, 55, 85, 102, 106, 107, 108, 116, 264, 266, 270, 276, 279, 283, 284, 286], "introduct": [49, 135, 139, 266, 276], "invalid": [63, 102, 106, 107, 108, 213, 275], "invari": [278, 280], "invers": [35, 40, 44, 48, 50, 52, 54, 56, 65, 68, 70, 71, 83, 84, 95, 102, 106, 107, 108, 170, 184, 230, 240, 271, 274, 278, 284, 287], "invert": [65, 70, 177, 183, 184, 185, 186, 277], "invok": [55, 63, 65, 268], "involv": [104, 287], "ioanni": [47, 53, 264, 271, 278, 283], "iota": [86, 95, 240], "ipu": 63, "ipython": [273, 277, 287], "irreduc": [135, 279], "irrespect": [86, 164], "irrevers": 57, "is_avail": [272, 273, 288], "is_connect": 86, "is_dataset": 224, "is_diagon": 179, "is_diagonal_matrix": 259, "is_full_model": 86, "is_lag": 18, "is_real": [102, 106, 107, 108], "is_square_matrix": 259, "is_timelagged_dataset": [225, 259], "is_torch_kernel": 259, "is_valid": 240, "is_valid_coordin": 240, "isabella": [107, 123, 132, 133, 143], "isfinit": 325, "isn": 104, "isol": 268, "issu": 268, "item": [0, 207, 273], "iter": [11, 12, 14, 63, 84, 91, 92, 95, 96, 103, 104, 105, 109, 111, 116, 144, 164, 199, 200, 203, 211, 212, 218, 221, 227, 242, 269, 276, 284, 285], "its": [0, 10, 11, 12, 14, 55, 57, 60, 63, 73, 84, 89, 102, 106, 107, 108, 112, 142, 161, 164, 177, 189, 193, 227, 240, 263, 264, 268, 269, 270, 272, 273, 274, 276, 279, 280, 284, 287, 330], "its_data": [229, 323], "its_stat": 227, "itself": [6, 63, 108, 242, 263, 269, 278, 281, 287], "ix": [272, 273, 277, 280, 305], "ix_0": 275, "ix_1": 275, "ix_2": 281, "ix_good": 273, "j": [18, 24, 29, 44, 45, 60, 63, 76, 77, 78, 79, 80, 81, 91, 93, 102, 106, 107, 108, 112, 113, 121, 125, 126, 135, 136, 139, 141, 145, 151, 152, 157, 158, 160, 161, 162, 163, 165, 167, 189, 198, 200, 237, 240, 242, 262, 264, 266, 270, 273, 279, 280, 281, 282, 283, 284, 285, 286, 330], "jack": 240, "jackknif": 149, "jan": [15, 34, 91, 95, 98, 99, 107, 110, 151, 164, 264, 266, 269, 276], "jcd": 47, "jd": 161, "jerald": 161, "jeremi": [107, 123, 132, 133, 143], "jet": [23, 236, 261, 265, 277, 285, 289, 295, 306, 311, 315, 317, 330, 334, 335], "ji": [98, 111, 137, 159, 161, 163, 164, 167, 173, 279, 280, 284], "jk": 152, "joana": 153, "job": [9, 10, 12, 14, 15, 16, 74, 220, 236, 238, 242, 243, 244, 282], "john": [15, 34, 91, 96, 107, 111, 123, 132, 133, 143, 151, 164, 266, 269, 276], "joint": 112, "joint_model": [55, 57], "jonathan": [45, 264, 270], "jordan": [51, 264, 277], "joseph": 242, "joshua": [198, 200, 281], "journal": [15, 20, 21, 31, 34, 39, 44, 45, 47, 51, 53, 55, 57, 65, 73, 74, 85, 91, 95, 98, 99, 104, 107, 109, 110, 111, 116, 135, 150, 151, 153, 154, 155, 156, 161, 164, 240, 242, 264, 266, 269, 270, 271, 276, 277, 278, 279, 283, 284, 286, 287, 288], "jul": [51, 264, 277], "jump": [29, 41, 84, 102, 106, 107, 108, 112, 116, 121, 161, 167, 171, 173, 174, 240, 266, 270, 276, 279, 280, 282, 283, 284, 288, 326], "jun": [60, 262, 282], "june": 268, "just": [10, 45, 85, 104, 149, 189, 221, 238, 240, 243, 244, 269, 271, 279, 281, 284, 286, 287], "k": [7, 10, 11, 12, 14, 16, 23, 26, 44, 47, 48, 50, 52, 53, 54, 56, 57, 68, 71, 76, 77, 78, 79, 80, 81, 92, 93, 94, 95, 97, 102, 103, 105, 106, 107, 108, 111, 112, 113, 121, 123, 124, 125, 126, 127, 130, 132, 133, 136, 142, 143, 144, 146, 147, 151, 152, 161, 162, 178, 182, 183, 187, 216, 217, 219, 228, 230, 233, 234, 235, 236, 263, 264, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 287, 305, 319, 330], "k0": 161, "k_": [113, 121, 136, 161, 172, 284], "k_bt": [201, 219], "k_d": 6, "k_i": 285, "kab": [172, 237], "kaiser": [91, 276], "kalbfleisch": 161, "kappa": [76, 77, 78, 79, 80, 81], "karpathi": 60, "karrasch": [23, 236], "kathleen": 268, "kbt": [201, 219, 322], "kcca": [273, 275, 277], "kcca_estim": 277, "kcca_model": 277, "kcca_opt": 277, "kcca_transform": 275, "kde": [242, 287], "kde_input": [275, 282, 288, 300], "kde_trajectori": [287, 332], "kedmd": [54, 275], "kedmd_estim": 278, "kedmd_model": 278, "kedmd_transf": 275, "keep": [55, 57, 187, 200], "keep_var": 63, "kei": [63, 263, 273, 281], "keller": [15, 34, 91, 151, 153, 157, 164, 266, 269, 276], "kept": [55, 57, 106, 107, 264, 283, 287], "kernel": [49, 50, 51, 52, 53, 54, 69, 76, 77, 79, 80, 81, 82, 200, 242, 259, 264, 265, 282, 288, 300, 317, 334, 335], "kernel_s": 63, "kernelcca": [52, 251, 259, 273, 275, 277, 324, 325], "kernelccamodel": [51, 259], "kerneledmd": [54, 259, 275, 278], "kerneledmdmodel": [53, 259], "kevrekidi": [47, 53, 264, 271, 278, 283], "keyword": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 63, 65, 85, 92, 101, 104, 105, 109, 191, 192, 193, 194, 196, 199, 200, 203, 214, 242], "kind": [44, 60, 62, 63, 65, 67, 74, 104, 228, 260, 263, 268, 279, 282, 284, 286, 326], "kinet": [15, 20, 21, 34, 44, 55, 57, 60, 65, 73, 74, 83, 91, 95, 98, 99, 102, 106, 107, 108, 111, 113, 123, 132, 133, 143, 151, 157, 164, 262, 266, 269, 276, 280, 282, 283, 285, 287, 288], "kinetic_map": [55, 57, 283, 287], "kingma": 282, "kinteic": 272, "kj": 219, "kl": [112, 152, 161, 162], "kld": 62, "klu": [20, 21, 47, 53, 55, 264, 277, 278, 283], "km": [44, 57], "kmean": [12, 14, 16, 259, 269, 271, 272, 273, 275, 277, 278, 280, 285, 288, 318, 319, 320, 322, 323, 324, 325], "kmeans_plusplu": 259, "kmeansmodel": [11, 14, 259], "know": [279, 284], "knowledg": [242, 275, 284, 285], "knowlegd": 260, "known": [102, 106, 107, 108, 149, 277, 279, 284], "kolmogorov": [44, 92, 95, 102, 105, 106, 107, 108, 191, 226, 228, 258, 265, 272, 317, 334, 335], "kolmogorow": 95, "koltai": [20, 21, 47, 55, 283, 287], "koopman": [20, 21, 44, 47, 48, 50, 52, 54, 55, 56, 57, 65, 68, 71, 73, 102, 106, 107, 108, 110, 228, 262, 264, 271, 278, 287, 288], "koopman_estim": 283, "koopman_matrix": [44, 48, 50, 52, 54, 56, 259], "koopman_model": [20, 73, 102, 106, 107, 108], "koopman_oper": 21, "koopmanestim": 18, "koopmanreweightedmsm": 110, "koopmanweightingestim": [259, 283], "koopmanweightingmodel": [20, 259], "krikamol": [53, 278], "kt": [27, 34, 41, 322], "kuensch": 149, "kutta": [22, 25], "kutz": [45, 198, 200, 264, 270, 281], "kvad": [50, 251, 259], "kvad_scor": [259, 273], "kvadmodel": [49, 259], "kvadnets_lob": 273, "kw": [11, 14, 20, 21, 44, 48, 50, 52, 55, 56, 57, 60, 62, 85, 92, 103, 104, 109, 110, 111, 200, 203, 227, 238, 242], "kwarg": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 85, 91, 92, 96, 103, 104, 105, 109, 110, 111, 196, 198, 202, 230], "kxy": [76, 77, 78, 79, 80, 81], "kyle": 164, "l": [45, 63, 95, 102, 104, 106, 107, 108, 112, 121, 123, 132, 133, 142, 143, 149, 152, 157, 161, 162, 165, 167, 170, 172, 177, 184, 185, 186, 198, 200, 202, 226, 264, 270, 276, 279, 281, 284, 285, 312], "l0": 236, "l1": 325, "l2": [200, 325], "l_": [121, 161, 284], "l_0": [23, 236], "l_i": [123, 127, 132, 133, 137, 177], "l_ij": [102, 106, 107, 108], "label": [11, 14, 84, 95, 102, 106, 107, 108, 116, 121, 122, 134, 174, 189, 191, 195, 197, 240, 269, 270, 272, 273, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 297, 298, 304, 307, 313, 319, 325, 327, 328, 331, 332, 333], "labyrinth": 39, "lack": 284, "lag": [18, 19, 20, 22, 27, 32, 35, 36, 43, 44, 47, 49, 55, 57, 58, 60, 61, 62, 64, 65, 67, 68, 75, 85, 86, 88, 89, 91, 95, 96, 98, 102, 104, 106, 107, 108, 109, 110, 111, 112, 132, 133, 139, 147, 148, 151, 153, 161, 177, 207, 208, 210, 212, 224, 225, 226, 262, 264, 266, 272, 274, 277, 278, 283, 285, 286, 288, 318, 323], "lag_multipl": 44, "lag_observ": 88, "lagrang": [103, 113], "lagrangian": [23, 111, 236, 277], "lagrangian_mult_log": [111, 113], "lagtim": [0, 18, 19, 20, 44, 45, 47, 49, 51, 53, 55, 57, 74, 85, 86, 88, 89, 91, 92, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 148, 151, 153, 191, 209, 210, 212, 225, 226, 227, 228, 264, 272, 273, 274, 275, 276, 279, 280, 283, 285, 286, 287, 288, 318, 320, 322, 323, 330, 332, 333], "lagtime_index": 227, "lambda": [26, 30, 74, 144, 241, 270, 273, 275, 277, 278, 285, 292, 305, 321, 330], "lambda_": 161, "lambda_0": 279, "lambda_i": [44, 55, 102, 106, 107, 108, 123, 132, 133, 147, 161, 279, 283], "lanczo": [102, 106, 107, 108, 123, 125, 127, 132, 133, 142, 144, 147, 178], "landau": 283, "landscap": [27, 34, 35, 36, 40, 41, 42, 43, 201, 219, 256, 261, 271, 274, 303, 306, 310, 314, 315, 316, 335], "langl": [44, 102, 106, 107, 108, 123, 127, 132, 133, 264, 277, 287], "languag": 269, "lapack": [127, 254], "laplacian": 79, "laplaciankernel": 259, "larest": 156, "larg": [34, 74, 85, 91, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 171, 195, 197, 264, 269, 276, 284], "larger": [15, 89, 149, 187, 241, 242, 264, 272, 283, 284], "largest": [86, 90, 91, 92, 95, 96, 98, 104, 107, 109, 112, 114, 149, 150, 155, 156, 178, 183, 185, 187, 284, 285, 286], "largest_connected_set": 156, "largest_connected_submatrix": 154, "last": [23, 24, 57, 102, 106, 107, 108, 121, 151, 217, 236, 237, 263, 285], "latent": [61, 62, 64, 262, 282], "latent_cod": [61, 64], "later": [91, 197, 268, 283, 286], "latest": [11, 14, 15, 51, 85, 198, 263], "latter": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 269, 287], "lauri": 284, "law": 284, "lawless": 161, "lawrenc": 276, "layer": 282, "layout": [189, 190, 197, 268], "lazi": [30, 241, 280, 298], "lbl": 274, "lcc": [150, 155, 156], "lcc_direct": 155, "lcc_undirect": 155, "ldot": [24, 45, 47, 77, 102, 106, 107, 108, 179, 216, 241, 242, 266, 269, 270, 271, 276, 279, 284, 287], "lead": [29, 44, 57, 58, 66, 70, 85, 91, 98, 113, 183, 187, 189, 205, 231, 232, 233, 234, 235, 239, 240, 242, 264, 269, 270, 279, 280, 286], "leader": [15, 269], "learn": [1, 11, 14, 20, 44, 51, 55, 57, 60, 62, 65, 73, 74, 91, 96, 101, 103, 107, 109, 198, 199, 262, 264, 273, 277, 279, 281, 282, 283, 287, 288, 328], "learning_r": [60, 62, 65, 272, 275, 282, 288], "least": [15, 39, 74, 112, 114, 200, 223, 269, 276, 281, 283, 286], "leav": 284, "left": [6, 8, 9, 11, 23, 34, 40, 41, 43, 44, 55, 57, 60, 62, 66, 74, 76, 77, 79, 95, 98, 102, 106, 107, 108, 113, 126, 127, 137, 139, 142, 144, 151, 152, 157, 159, 160, 161, 162, 163, 167, 181, 189, 190, 194, 195, 197, 199, 218, 236, 269, 271, 274, 275, 281, 282, 287, 332], "legal": 260, "legend": [191, 226, 240, 270, 272, 273, 275, 279, 280, 281, 282, 283, 284, 287, 288, 293, 297, 298, 304, 307, 313, 318, 325, 328, 331, 332, 333], "legend1": 275, "legend_el": [275, 325], "len": [74, 97, 104, 119, 120, 153, 195, 197, 211, 216, 225, 239, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 285, 288, 293, 294, 297, 298, 305, 306, 310, 311, 315, 325, 329, 330, 332], "length": [0, 10, 11, 12, 14, 25, 26, 29, 44, 58, 65, 74, 83, 85, 86, 93, 94, 95, 97, 102, 106, 107, 108, 110, 111, 112, 118, 142, 148, 149, 153, 176, 189, 199, 208, 211, 212, 218, 224, 225, 236, 238, 239, 240, 243, 244, 268, 271, 273, 274, 284, 285, 286, 292, 312, 314, 320, 321, 322, 323], "leon": 242, "leonard": [96, 276], "leq": [6, 24, 39, 136, 160, 216, 284], "lerp": 240, "less": [11, 14, 25, 26, 44, 112, 118, 120, 151, 164, 195, 197, 239, 269, 276, 284], "lesser": 268, "let": [10, 57, 63, 151, 272, 273, 275, 276, 277, 278, 280, 281, 288], "letter": [55, 264, 283], "lev": 283, "level": [109, 194, 201, 208, 254, 263, 266, 271, 273, 275, 276, 277, 278, 285, 288, 305, 306, 310, 311, 312, 315, 330], "levels_fin": 275, "levequ": 18, "lexicograph": 182, "lfloor": [151, 286], "lgomp": 269, "lh": [199, 328], "li": [44, 283, 285], "liabil": [260, 268], "liabl": [260, 268], "lib": [277, 318, 325], "librari": [13, 17, 198, 199, 258, 264, 268, 281, 328], "licens": 259, "lie": [111, 112], "life": 282, "lifetim": 95, "lifshitz": 283, "lighter": 284, "like": [13, 17, 25, 26, 30, 55, 63, 65, 92, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 148, 149, 165, 188, 200, 205, 228, 237, 242, 252, 263, 264, 269, 271, 275, 276, 279, 282, 283, 284, 285, 287], "likelihood": [85, 86, 91, 94, 95, 96, 98, 104, 107, 109, 111, 112, 113, 153, 157, 161, 164, 196, 227, 266, 276, 285, 286], "likewis": 104, "lim_": 153, "limit": [44, 55, 57, 85, 102, 106, 107, 108, 111, 112, 191, 268, 284, 286], "linalg": [26, 270, 305], "lindner": 107, "line": [14, 63, 189, 240, 268, 282, 287], "line2d": 282, "line3dcollect": [293, 294], "linear": [44, 45, 55, 57, 63, 135, 150, 154, 155, 156, 189, 198, 199, 200, 240, 270, 272, 273, 275, 280, 281, 282, 283, 287, 288, 321], "linear_model": 198, "linearli": [37, 38, 240, 275, 282, 283, 288, 325], "linecollect": [240, 306, 310, 311, 315], "linestyl": [275, 287, 290, 304, 328, 332, 333], "linewidth": [189, 273, 275, 281, 332], "link": [13, 17, 260, 268], "linspac": [8, 271, 273, 274, 275, 277, 278, 281, 282, 283, 285, 288, 292, 293, 298, 300, 306, 309, 310, 311, 313, 314, 315, 330, 331, 333], "list": [6, 8, 11, 13, 15, 16, 18, 25, 26, 29, 44, 45, 49, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 134, 139, 140, 143, 150, 151, 153, 165, 171, 174, 176, 189, 195, 196, 197, 198, 199, 200, 202, 206, 207, 209, 210, 212, 225, 226, 227, 228, 229, 235, 239, 240, 242, 268, 269, 274, 279, 284], "literatur": [93, 266], "live": [27, 29, 31, 35, 36, 39, 40, 43, 63, 240, 269, 274, 284], "lj": 161, "ller": [33, 242, 287], "llmann": [107, 123, 132, 133, 143], "lloyd": 269, "lm": 178, "ln": [55, 95, 102, 106, 107, 108, 279, 283], "load": [55, 57, 63, 111, 264, 272, 273, 278], "load_state_dict": [63, 273], "loader": [60, 62, 208, 272, 273, 282, 288], "loader_train": [272, 273, 275, 282, 288], "loader_v": [272, 273, 282, 288], "lobe": [65, 66, 272, 273, 275, 288], "lobe_timelag": [65, 66], "loc": [10, 275, 304], "local": [63, 96, 218, 242, 268, 269, 276, 285], "local_metadata": 63, "locat": [29, 34, 83, 95, 189, 223, 240, 284, 321], "log": [44, 63, 64, 111, 113, 132, 133, 147, 157, 161, 193, 219, 269, 272, 282, 283, 319, 321, 323], "log_likelihood": 113, "logarithm": [111, 113, 161, 269], "logl": 157, "logloc": 321, "loglog": [269, 272, 288], "logm": 161, "lognorm": [284, 329], "long": [102, 106, 107, 108, 209, 210, 266, 278, 283], "longer": [58, 86, 91, 95, 96, 98, 102, 106, 107, 108, 149, 267, 272, 286], "longest": 149, "look": [55, 63, 86, 133, 143, 149, 195, 197, 263, 264, 269, 271, 272, 274, 282, 285], "loop": [12, 223, 273, 290, 291, 299, 301, 312], "lorenz": [31, 261, 289, 295, 335], "lorenz_system": [259, 293], "loss": [60, 62, 65, 72, 273, 282], "lost": 242, "lot": [85, 91, 128], "lothar": [116, 121, 284], "low": [49, 51, 161, 184, 185, 186, 254, 269, 278, 319], "lower": [8, 9, 65, 73, 95, 110, 161, 202, 205, 226, 264, 269, 275, 276, 283, 284, 287, 327], "lowest": 193, "lr": [60, 142], "lr_schedul": 273, "lt": [275, 282, 283], "luca": [65, 262, 288], "luchtenburg": [45, 264, 270], "luci": 242, "lump": 284, "lutz": [55, 264, 283], "lvert": [132, 133, 147], "lw": [271, 284, 332], "lysian": 153, "m": [13, 17, 23, 27, 29, 33, 34, 41, 44, 45, 47, 48, 50, 52, 54, 55, 56, 57, 63, 70, 83, 91, 93, 95, 102, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 156, 157, 158, 159, 160, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 184, 185, 186, 208, 223, 231, 232, 233, 234, 235, 236, 237, 240, 242, 264, 269, 270, 276, 278, 280, 285, 287, 319], "m_": 153, "m_a": 128, "m_i": 242, "m_t": 139, "maaik": 285, "machin": [51, 264, 277], "macklin": [33, 242, 287], "macro": [95, 268, 276, 280], "macrost": [276, 280], "made": [63, 86, 93, 94, 95, 97, 98, 104, 106, 109, 268, 283], "magnitud": [86, 125, 178, 182, 200, 242, 287], "mai": [13, 17, 34, 45, 47, 51, 53, 63, 74, 95, 104, 109, 110, 111, 112, 149, 166, 168, 187, 195, 197, 199, 200, 212, 218, 219, 223, 268, 269, 272, 285, 288], "mailinglist": 260, "main": [84, 279], "mainli": [228, 263, 269, 288], "major": 272, "major_flux": 84, "make": [2, 9, 10, 12, 16, 19, 21, 44, 46, 48, 50, 52, 54, 56, 61, 63, 64, 65, 66, 83, 84, 85, 86, 92, 93, 94, 95, 97, 98, 99, 101, 102, 105, 106, 107, 108, 113, 157, 165, 195, 197, 199, 236, 263, 264, 268, 269, 273, 275, 279, 280, 282, 283, 284, 286, 287], "make_anim": [242, 277, 287, 291, 299], "make_axes_locat": [284, 326, 329], "man": 284, "manag": [65, 282], "mani": [44, 55, 96, 102, 106, 107, 108, 109, 199, 220, 242, 266, 276, 277, 279, 280, 282, 283], "manner": [211, 268], "manual": [9, 10, 12, 86], "map": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 23, 25, 26, 27, 32, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 192, 193, 198, 199, 200, 236, 240, 241, 253, 262, 269, 270, 273, 276, 278, 282, 283, 286, 287, 320], "map_discrete_to_observ": [241, 283, 333], "map_observations_to_submodel": [93, 95], "mappabl": [192, 193, 320], "mappable1": 321, "mappable2": 321, "mapped_data": [44, 48, 50, 52, 54, 56], "mapped_observ": 93, "mapsto": [6, 23, 37, 38, 47, 48, 192, 236, 282, 287], "marc": [107, 123, 132, 133, 143], "marco": [15, 34, 43, 151, 164, 266, 269, 271], "marcu": [83, 98, 99, 107, 115, 141, 266, 276, 280], "mardt": [65, 262, 288], "mark": [214, 215], "marker": [269, 270, 274, 275, 280, 283, 284, 288, 290, 297, 298, 301, 313, 319, 333], "markers": [281, 332], "markov": [15, 28, 30, 34, 41, 43, 44, 55, 57, 65, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 135, 136, 137, 138, 142, 144, 147, 189, 197, 228, 237, 239, 240, 241, 259, 264, 268, 269, 271, 272, 273, 274, 279, 280, 283, 284, 285, 286, 287, 288, 297, 313, 318, 320, 322, 323, 326, 327, 329, 330], "markov_state_energi": 113, "markovian": [44, 95, 228, 256, 264, 272], "markovmodel": 268, "markovstatemodel": [83, 84, 92, 95, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 189, 197, 237, 239, 240, 259, 266, 276, 279, 284, 285, 313, 326, 330], "markovstatemodelcollect": [109, 111, 113, 259], "marku": [107, 123, 132, 133, 143, 268], "marquse": [91, 276], "martin": [15, 34, 151, 164, 266, 269, 287], "maruyama": [26, 27, 32, 34, 35, 36, 43, 271, 278], "mask": [37, 200, 325], "mass": [11, 27, 34, 242, 269, 306], "mat": [70, 181, 187], "match": [10, 18, 45, 63, 77, 94, 103, 164, 209, 210, 270], "materi": [260, 268], "math": 325, "mathbb": [6, 7, 18, 26, 29, 44, 45, 47, 48, 50, 52, 54, 56, 57, 76, 77, 78, 79, 80, 81, 94, 97, 102, 106, 107, 108, 121, 123, 128, 130, 131, 132, 133, 135, 139, 143, 152, 162, 163, 187, 240, 241, 242, 262, 264, 266, 270, 271, 276, 277, 279, 280, 281, 282, 284, 286, 287, 292, 305], "mathbf": [6, 11, 44, 47, 57, 102, 106, 107, 108, 139, 153, 177, 269, 278, 283], "mathcal": [34, 57, 225, 228, 241, 264, 269, 270, 271, 276, 277, 279, 287, 331], "mathemat": [43, 96, 121, 266, 271, 276, 284], "mathrm": [18, 23, 25, 26, 27, 34, 35, 36, 40, 41, 42, 43, 44, 55, 57, 72, 77, 84, 86, 91, 94, 95, 97, 98, 102, 103, 104, 106, 107, 108, 111, 113, 179, 189, 216, 219, 228, 236, 240, 269, 270, 271, 274, 276, 278, 279, 280, 283, 284, 287, 288, 292, 293, 305, 331], "matplotlib": [102, 106, 107, 108, 188, 189, 190, 192, 193, 194, 195, 196, 197, 240, 242, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "matplotlibdeprecationwarn": [325, 326], "matric": [18, 24, 44, 47, 55, 57, 58, 65, 67, 68, 74, 81, 85, 86, 91, 93, 94, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 138, 144, 148, 160, 161, 162, 163, 164, 177, 197, 218, 225, 230, 237, 254, 264, 269, 270, 274, 277, 278, 279, 281, 283, 285, 286, 287, 319], "matrix": [24, 29, 30, 37, 38, 41, 44, 45, 50, 55, 57, 58, 65, 67, 68, 70, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 195, 197, 198, 200, 228, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 252, 254, 264, 266, 269, 270, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288], "matshow": 276, "matt": 277, "matter": 112, "matthew": [47, 53, 264, 271, 278, 283], "matthia": [33, 242, 287], "max": [11, 14, 85, 90, 113, 114, 161, 166, 167, 168, 173, 189, 231, 232, 233, 234, 235, 269, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 287, 288, 291, 300, 304, 312, 313, 326, 329, 330, 332, 333], "max_cach": 103, "max_cent": [15, 269, 319], "max_fram": 291, "max_it": [11, 14, 200, 269, 285], "max_n_process": 227, "max_n_sampl": 227, "maxerr": [104, 109, 111, 164, 330], "maxi": 272, "maxim": [55, 111, 161, 177, 212, 262, 276, 277, 283, 287], "maximum": [6, 11, 14, 15, 74, 84, 85, 86, 91, 94, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 111, 113, 161, 164, 171, 189, 196, 200, 218, 227, 239, 240, 266, 269, 276, 285, 286, 319], "maximumlikelihoodhmm": [95, 259, 276], "maximumlikelihoodmsm": [104, 106, 107, 108, 259, 273, 274, 275, 279, 280, 284, 288, 320, 322], "maximummetr": 269, "maxit": [84, 96, 103, 104, 109, 111, 161, 164, 171, 218, 284, 285, 330], "maxit_revers": 96, "maxnorm": 269, "maxnormmodul": 269, "maxtim": [95, 102, 106, 107, 108], "mb": [290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "mbar": [111, 285, 330], "mc": 163, "mcgibbon": [74, 107, 287], "mcmc": [28, 163, 239], "mdshare": 272, "mean": [6, 11, 12, 14, 16, 18, 19, 22, 27, 32, 35, 36, 37, 38, 43, 44, 55, 57, 63, 64, 65, 67, 73, 74, 84, 91, 93, 94, 95, 97, 98, 102, 104, 106, 107, 108, 111, 113, 139, 140, 170, 180, 189, 196, 200, 202, 204, 218, 223, 230, 231, 232, 233, 234, 235, 236, 238, 243, 244, 263, 264, 266, 268, 272, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 319], "mean_0": [19, 44, 287], "mean_model": 263, "mean_t": [19, 44, 287], "meanestim": 263, "meaning": [65, 109, 149, 268, 287], "meanmodel": 263, "means_": [269, 319], "meant": [93, 94, 97, 163, 195, 197], "measur": [91, 103, 153, 198, 199, 219, 248, 276, 281, 328], "mechan": [45, 63, 200, 264, 268, 270, 283], "media": 266, "mediendienstestaatsvertrag": 260, "megabyt": 103, "mem": [295, 302, 316, 334, 335], "member": [63, 84, 92, 103, 105, 202], "membership": [83, 95, 99, 102, 106, 107, 108, 115, 141, 273, 276, 280, 284, 327], "membership_transform": 273, "memberships_transform_kcca": 273, "memberships_transform_kvad": 273, "memberships_transform_kvadnet": 273, "memberships_transform_vamp": 273, "memberships_transform_vampnet": 273, "memo": 63, "memori": [55, 57, 63, 264, 269, 273, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "memory_format": 63, "merchant": 268, "merg": 268, "meshgrid": [271, 273, 275, 277, 278, 282, 283, 288, 298, 299, 300, 305, 306, 310, 311, 312, 315, 333], "messag": [214, 260], "met": [12, 15], "meta": [141, 200], "metadata": 200, "metadata_rout": 200, "metadatarequest": 200, "metast": [37, 43, 83, 91, 95, 98, 99, 102, 106, 107, 108, 115, 141, 264, 266, 271, 276, 278, 280, 284, 287, 320, 327], "metastabil": 264, "metastable_assign": [95, 102, 106, 107, 108], "metastable_distribut": [83, 95, 102, 106, 107, 108, 280], "metastable_from_data": [95, 99, 101, 259, 276], "metastable_from_msm": [95, 98, 101, 259, 276], "metastable_membership": [95, 102, 106, 107, 108], "metastable_set": [95, 102, 106, 107, 108], "meth": 263, "method": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 23, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 127, 144, 149, 151, 161, 163, 164, 177, 183, 184, 185, 186, 187, 189, 192, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 224, 226, 227, 228, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 251, 253, 262, 263, 264, 265, 266, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 287, 288, 317, 325, 326, 330, 334, 335], "metric": [9, 10, 11, 12, 13, 14, 15, 16, 259, 330], "metricregistri": [17, 259], "metropoli": [41, 261, 303, 316, 335], "metzner": [84, 116, 121, 167, 171, 173, 174, 266, 284], "mfpt": [84, 102, 104, 106, 107, 108, 140, 279, 284], "mho": [277, 318, 325, 326], "mi": [85, 286], "michael": [51, 111, 264, 277], "micro": [95, 102, 106, 107, 108, 276, 280, 284, 327], "microsecond": 110, "microst": [83, 121, 139, 141, 147, 150, 151, 153, 239, 276, 280, 284], "mid": [57, 95, 103, 237, 264, 266, 274, 276, 279, 281, 284, 286, 287], "middl": 287, "midpoint": [189, 217], "might": [15, 66, 82, 84, 85, 95, 98, 102, 106, 107, 108, 171, 227, 231, 232, 233, 234, 235, 242, 260, 264, 280, 284, 285, 287], "mikhailovich": 283, "mile": [33, 242, 287], "millisecond": 110, "mimic": 108, "min": [41, 47, 55, 57, 189, 269, 272, 273, 274, 275, 282, 283, 284, 285, 287, 288, 300, 312, 326, 329, 330, 332, 333], "mincnt": 272, "mincount_connect": 86, "minflux": [195, 197], "mini": [14, 272], "minibatchkmean": [11, 12, 259, 269], "miniconda3": 277, "minim": [11, 15, 47, 112, 134, 161, 195, 197, 200, 240, 268, 269, 275, 277, 284], "minima": 34, "minimum": [15, 58, 74, 87, 89, 95, 110, 112, 200, 219, 223, 269, 285, 287, 319], "minut": [290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "mismatch": [273, 275], "mismatches_kcca": 273, "mismatches_kvad": 273, "mismatches_kvadnet": 273, "mismatches_vamp": 273, "mismatches_vampnet": 273, "miss": [63, 284, 286], "missing_kei": 63, "mit": 268, "mix": [14, 55, 91, 102, 106, 107, 108, 195, 197, 229, 283], "mixtur": [55, 101, 264, 269, 283, 319], "ml": [276, 279], "mle": [91, 93, 161, 164, 266], "mlmsm": 284, "mlp": [63, 66, 275, 282, 288], "mm": 104, "mnone": [60, 62], "mode": [18, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 63, 65, 68, 69, 70, 71, 72, 74, 76, 81, 85, 86, 98, 104, 107, 109, 110, 112, 144, 231, 232, 233, 234, 235, 242, 264, 268, 270, 271, 273, 278, 283, 286, 287], "model": [1, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 25, 27, 28, 30, 32, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 74, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 141, 148, 149, 151, 157, 161, 163, 164, 167, 171, 173, 174, 195, 196, 197, 198, 199, 200, 226, 227, 228, 229, 239, 240, 241, 254, 259, 261, 263, 264, 265, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 296, 297, 302, 303, 316, 317, 318, 323, 324, 326, 328, 330, 332, 334, 335], "model_index": 108, "model_onedim": 55, "model_var": 55, "models2": 318, "moder": 161, "modif": [63, 268], "modifi": [21, 56, 63, 111, 113, 242, 268, 273], "modified_state_counts_log": [111, 113], "modify_data": [231, 232, 233, 234, 235], "modnam": 222, "modul": [13, 17, 60, 61, 62, 63, 64, 65, 66, 222, 245, 254, 261, 263, 282, 285, 288], "module_avail": [259, 263], "mol": 219, "molecul": [91, 95, 98, 99, 102, 106, 107, 108, 272, 276], "molecular": [15, 20, 21, 34, 43, 44, 53, 55, 57, 60, 65, 73, 74, 102, 103, 107, 111, 113, 151, 157, 163, 164, 262, 266, 269, 271, 278, 282, 283, 285, 287, 288], "molgedei": [55, 264, 283], "mollenhau": 277, "moment": [18, 19, 20, 104, 232, 233, 234, 235, 264, 279, 283], "moments_block": 259, "moments_xx": [231, 259], "moments_xxxi": [232, 259], "momentum": 272, "monaghan": 242, "monahan": 277, "monitor": 171, "monomi": [259, 271, 275, 281], "mont": 279, "monthli": 242, "moor": 184, "more": [11, 15, 28, 30, 33, 55, 63, 84, 85, 86, 91, 92, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 149, 166, 168, 181, 187, 190, 195, 197, 198, 199, 200, 207, 223, 239, 242, 263, 264, 269, 270, 276, 280, 281, 283, 284, 330, 332], "moreov": 278, "moritz": 287, "most": [6, 84, 86, 92, 95, 103, 104, 109, 111, 149, 161, 164, 187, 211, 269, 276, 279, 283, 284, 286], "mostli": 269, "motion": [264, 283, 287], "motiv": 284, "move": [63, 149, 284, 285, 288, 330], "mpl": [280, 284, 325, 326, 327, 329], "mpl_toolkit": [284, 293, 294, 326, 329], "mplot3d": [293, 294], "msg": 214, "msm": [30, 74, 83, 84, 85, 86, 89, 95, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 189, 190, 197, 219, 237, 240, 241, 253, 259, 266, 272, 273, 275, 276, 280, 284, 285, 286, 288, 304, 313, 318, 320, 322, 323, 326, 327, 329, 330], "msm1": 109, "msm2": 109, "msm_collect": 113, "msm_statdist": 279, "msmtool": [254, 268], "mtia": 63, "mu": [55, 57, 84, 102, 106, 107, 108, 113, 121, 123, 125, 127, 128, 131, 132, 137, 139, 142, 144, 147, 163, 164, 230, 269, 274, 283, 285], "mu_0": [37, 38, 44, 287], "mu_1": [37, 38, 102, 106, 107, 108, 287], "mu_2": 38, "mu_3": 38, "mu_i": [11, 12, 44, 125, 127, 128, 137, 147, 163, 269, 283], "mu_j": [125, 127, 137, 147, 163], "mu_l": [44, 283], "mu_n": [102, 106, 107, 108], "mu_t": 44, "mu_x": 139, "mu_z": 139, "muandet": [53, 278], "much": [103, 104, 109, 110, 111, 149, 280, 283, 287], "multi": [63, 282, 285], "multidimension": 277, "multiensembl": [111, 113, 266, 285], "multilay": [275, 282, 288], "multioutput": 200, "multioutputregressor": 200, "multipl": [0, 14, 44, 55, 57, 60, 62, 90, 95, 102, 106, 107, 108, 111, 142, 148, 149, 209, 210, 212, 223, 231, 232, 236, 238, 243, 244, 285], "multipli": [103, 111, 112, 113], "multiscal": [74, 84, 107, 116, 121, 149, 161, 167, 171, 173, 174, 266, 284, 287], "multivari": [30, 55, 241, 283], "multivariate_norm": 298, "must": [6, 11, 15, 18, 20, 24, 25, 26, 29, 44, 55, 57, 60, 62, 63, 65, 74, 77, 80, 92, 94, 95, 96, 97, 102, 104, 106, 107, 108, 109, 118, 123, 125, 127, 132, 133, 142, 144, 147, 177, 180, 181, 189, 199, 208, 209, 210, 212, 218, 236, 238, 240, 242, 243, 244, 268, 276, 279, 282, 283, 287, 288], "mutual": [196, 284], "my": 94, "n": [4, 5, 6, 7, 8, 11, 14, 15, 18, 19, 20, 21, 24, 29, 31, 34, 44, 46, 47, 48, 50, 52, 54, 55, 56, 57, 63, 67, 71, 74, 75, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 127, 130, 131, 132, 133, 134, 135, 139, 141, 148, 149, 151, 161, 163, 165, 177, 178, 182, 183, 184, 185, 186, 187, 189, 190, 195, 197, 202, 208, 212, 216, 218, 219, 223, 226, 230, 232, 234, 235, 237, 239, 240, 241, 242, 262, 264, 266, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 325, 331], "n_": [93, 94, 95, 97, 189, 269, 284], "n_basi": 273, "n_bin": [23, 113, 192, 193, 285, 320, 321], "n_bins_i": 201, "n_bins_x": 201, "n_box": [8, 9, 269, 275], "n_burn_in": [33, 91, 276, 299, 332], "n_center": 16, "n_cluster": [9, 10, 11, 12, 14, 15, 16, 269, 271, 273, 274, 275, 277, 278, 280, 285, 318, 319, 320, 322, 323, 324], "n_compon": [55, 57, 269, 283, 319, 333], "n_connected_msm": [108, 109], "n_dim": [16, 241], "n_eig": [47, 51, 53, 178, 271, 273, 275, 277, 278, 324, 325], "n_eigenfunct": 274, "n_eigenvalu": [102, 106, 107, 108], "n_epoch": [60, 62, 65, 272, 273, 275, 282, 288], "n_eval": 292, "n_evalu": [238, 243, 244], "n_featur": [199, 200], "n_grid_i": [242, 287, 332], "n_grid_x": [242, 287, 332], "n_hidden": [94, 97], "n_hidden_st": [91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 276], "n_i": [91, 102, 106, 107, 108, 118, 148, 149], "n_initial_condit": [238, 243, 244], "n_input_featur": [198, 199], "n_input_features_": 198, "n_interp": 283, "n_it": [196, 229, 323], "n_iter": 273, "n_job": [9, 10, 11, 12, 14, 15, 16, 22, 23, 27, 32, 33, 34, 35, 36, 40, 43, 74, 85, 220, 236, 238, 242, 243, 244, 269, 271, 277, 278, 285, 287, 290, 291, 299, 319, 324, 332], "n_k": [93, 94, 285], "n_lagtim": 227, "n_markov_st": [111, 112], "n_metast": 83, "n_metastable_set": [102, 105, 106, 107, 108, 280, 318, 320], "n_mismatch": 325, "n_mismatch_perm": 325, "n_monomi": 6, "n_node": 189, "n_observ": 44, "n_observable_st": [93, 94, 97], "n_observation_st": [95, 100, 276], "n_oscil": [242, 287, 332], "n_output": 200, "n_output_featur": 199, "n_output_features_": 198, "n_particl": [23, 236, 242, 277, 287, 291, 324], "n_process": 227, "n_proj": 275, "n_sampl": [37, 38, 55, 57, 91, 104, 198, 199, 200, 227, 275, 279, 282, 285, 288, 300, 301, 323, 330], "n_samples_fit": 200, "n_sing": 287, "n_solver_iter": 242, "n_split": [18, 212], "n_state": [84, 85, 86, 88, 89, 94, 95, 102, 103, 106, 107, 108, 110, 189, 240, 273, 274, 275, 280, 284, 286, 304, 307], "n_states_ful": [86, 284], "n_statist": 44, "n_step": [22, 25, 26, 27, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 95, 102, 104, 106, 107, 108, 236, 238, 239, 240, 241, 242, 243, 244, 273, 278, 279, 280, 283, 284, 285, 287, 290, 292, 294, 297, 299, 305, 306, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 330, 332, 333], "n_target": 200, "n_test_point": [6, 236, 238, 243, 244], "n_therm_stat": [111, 112, 113], "n_thin": [91, 276], "n_traj": 242, "n_trajectori": 239, "n_transition_matrix_sampling_step": 91, "n_uncorrelated_featur": [55, 57], "n_val": [272, 282, 288], "nabla": [27, 34, 35, 36, 40, 42, 43, 271, 278], "name": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 202, 222, 269, 276, 279, 281, 325, 326], "named_buff": 63, "named_children": 63, "named_modul": 63, "named_paramet": 63, "namedtupl": 63, "nan": [34, 176, 205, 227, 284], "nanosecond": 110, "naratip": 277, "naritomi": [264, 283], "nathan": [45, 198, 200, 264, 270, 281], "nation": [102, 103, 107, 111, 113, 116, 121, 123, 132, 133, 143, 198, 200, 266, 281, 284, 285], "nativ": [55, 283], "natl": [165, 167, 170, 172], "natur": [65, 262, 276, 283, 288], "nb": 110, "ncol": [242, 271, 273, 274, 275, 276, 277, 278, 287, 304, 314, 324, 333], "ncov": [18, 20, 55, 57, 264], "ncv": [95, 102, 106, 107, 108, 123, 125, 127, 132, 133, 142, 144, 147], "ndarrai": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 26, 33, 37, 38, 41, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 201, 202, 205, 208, 209, 210, 212, 216, 217, 218, 219, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 263], "ndez": [55, 283], "ndim": [180, 223], "ndiscret": 307, "ndmin": 223, "nearest": [192, 269, 284, 327], "nearli": 280, "necessari": [84, 171, 223, 268, 283], "necessarili": [165, 269], "need": [11, 14, 45, 47, 63, 111, 112, 113, 199, 223, 236, 238, 243, 244, 268, 269, 281, 282, 283, 285, 286, 287, 319], "neg": [11, 15, 16, 65, 80, 85, 90, 102, 106, 107, 108, 109, 117, 134, 136, 138, 169, 200, 220, 223, 236, 238, 242, 243, 244, 273], "negat": 242, "neglect": [89, 91, 96, 98], "neglig": [91, 183, 187], "neig": 107, "neighbor": [41, 159, 242, 284], "neq": [95, 136, 139, 151, 162, 167, 284], "nest": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200], "net": [63, 84, 165, 166, 167, 168, 169, 265, 284, 317, 326, 334, 335], "net_b": 63, "net_c": 63, "net_flux": [84, 195, 284, 326, 329], "netflux": [165, 167, 171, 173, 237], "netork": 171, "network": [60, 61, 62, 63, 64, 65, 66, 84, 102, 106, 107, 108, 116, 167, 171, 190, 195, 197, 237, 240, 254, 256, 259, 262, 264, 265, 273, 282, 284, 288, 317, 334, 335], "networkx": [189, 190, 197, 280, 284, 286, 326], "neural": [65, 262, 273, 282, 288], "neutron": [102, 106, 107, 108], "never": [91, 264], "new": [2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 44, 46, 48, 50, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 86, 92, 93, 94, 95, 96, 97, 102, 105, 106, 107, 108, 109, 113, 149, 191, 197, 199, 208, 210, 223, 236, 245, 259, 263, 268, 269, 272, 281, 287], "newton": [103, 161, 242], "next": [57, 89, 121, 240, 262, 264, 281, 284], "nhidden": [102, 106, 107, 108], "ni": [102, 106, 107, 108], "nice": [269, 276, 280, 288], "niemann": 264, "nina": [91, 276], "nine": 277, "nipy_spectr": 322, "nj": [29, 240], "nm": [29, 240], "nn": [60, 61, 62, 63, 64, 65, 66, 272, 273, 275, 282, 288], "no_grad": [63, 273], "nob": 94, "node": [84, 155, 189, 190, 195, 197, 217, 218, 286], "node_color": 286, "node_s": [189, 284], "noe": [149, 157, 163, 165, 167, 170, 172, 260], "nois": [30, 110, 241, 270, 273], "noise_vari": 331, "noisi": [218, 273, 331], "non": [11, 14, 15, 16, 44, 55, 57, 63, 65, 80, 85, 91, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 132, 133, 134, 136, 138, 143, 144, 162, 164, 183, 220, 223, 242, 266, 283, 287], "non_block": 63, "none": [1, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 30, 33, 37, 38, 44, 45, 47, 49, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 73, 74, 75, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 120, 121, 123, 125, 127, 128, 131, 132, 133, 137, 139, 142, 143, 144, 147, 148, 151, 153, 156, 161, 162, 163, 164, 174, 178, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 213, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 263, 268, 279, 283, 287, 325, 330], "nonempty_ob": 95, "noninfring": 268, "nonlinear": [44, 47, 52, 53, 57, 63, 65, 73, 74, 107, 109, 198, 200, 264, 270, 271, 273, 275, 277, 278, 279, 281, 282, 283, 287, 288], "nonoverlap": 287, "nonperiod": 31, "nonrevers": [89, 91, 163, 164, 264], "nonsmooth": 218, "nontrivi": 274, "nonzero": [98, 99, 281, 284, 329], "noqa": 63, "norm": [20, 26, 44, 55, 57, 102, 104, 106, 107, 108, 109, 142, 164, 177, 181, 182, 183, 184, 185, 186, 200, 218, 269, 275, 280, 284, 305, 326, 327, 329], "normal": [6, 10, 26, 30, 55, 85, 93, 102, 104, 106, 107, 108, 109, 127, 142, 164, 200, 218, 219, 240, 242, 263, 270, 271, 273, 275, 276, 278, 280, 283, 284, 285, 287, 323, 326, 327, 331], "note": [11, 14, 37, 38, 41, 44, 45, 55, 57, 60, 62, 63, 65, 73, 76, 77, 78, 79, 80, 81, 82, 84, 86, 95, 96, 102, 104, 106, 107, 108, 113, 116, 119, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 175, 195, 197, 199, 200, 218, 223, 236, 237, 242, 250, 263, 264, 269, 272, 277, 280, 281, 283, 287, 328], "notebook": [269, 272, 273, 275, 277, 278, 285, 288], "noth": [221, 263], "notic": [218, 242, 284], "notin": [121, 134, 139], "notion": [270, 284, 287], "novel": [281, 328], "now": [22, 27, 32, 34, 35, 36, 40, 43, 109, 189, 236, 263, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 287, 288], "no\u00e9": [260, 277], "np": [4, 5, 6, 7, 9, 10, 11, 12, 16, 18, 22, 25, 26, 27, 32, 34, 35, 36, 40, 43, 44, 45, 55, 57, 58, 59, 60, 61, 62, 65, 66, 74, 85, 86, 87, 93, 94, 95, 102, 104, 106, 107, 108, 109, 113, 117, 119, 120, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 188, 189, 198, 199, 205, 212, 223, 225, 230, 236, 238, 243, 244, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 298, 299, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333], "npz": 272, "nrow": [242, 271, 273, 274, 276, 277, 278, 287, 314, 324, 333], "nsampl": [95, 104, 118, 120], "nstate": [151, 153, 195, 197], "nstep": [104, 163, 278], "ntl9": [55, 283], "ntrajectori": 94, "nu_k": 153, "nuesk": 149, "num": [271, 275, 285, 290, 292, 293, 306, 310, 311, 313, 314, 315, 325, 330], "num_featur": 63, "number": [6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 22, 23, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 51, 53, 55, 57, 59, 60, 62, 63, 65, 74, 75, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 125, 127, 130, 131, 132, 133, 135, 141, 142, 143, 144, 147, 148, 149, 153, 161, 163, 164, 171, 172, 176, 177, 178, 189, 194, 196, 200, 203, 205, 212, 218, 219, 220, 223, 227, 229, 236, 238, 239, 240, 241, 242, 243, 244, 264, 266, 268, 269, 272, 274, 276, 278, 280, 281, 283, 284, 285, 297, 319], "number_of_st": 259, "numer": [19, 33, 44, 45, 47, 55, 57, 94, 141, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 195, 197, 218, 230, 242, 259, 264, 268, 270, 281, 283, 284, 287, 328], "numpi": [6, 22, 25, 26, 27, 32, 34, 35, 36, 40, 43, 44, 45, 49, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 93, 94, 95, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 176, 188, 189, 199, 218, 223, 254, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 298, 299, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333], "numpydoc": 263, "nuria": [91, 95, 98, 99, 107, 276], "nx": [189, 280, 284, 286, 326], "o": [47, 53, 63, 264, 269, 271, 275, 276, 278, 279, 280, 283, 287, 290, 301, 319], "o_": 103, "o_t": [93, 94, 97], "ob": [92, 93, 94, 95, 97, 133, 143, 269, 325], "obei": [163, 213, 280, 281, 287], "object": [1, 2, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 161, 163, 167, 175, 180, 189, 191, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 211, 224, 227, 229, 242, 258, 260, 266, 268, 269, 275, 276, 277, 279, 283, 284, 285, 319], "oblig": 260, "obs1": [4, 123, 132], "obs2": [4, 123, 132], "obs_ix": 276, "obs_ref": 325, "obs_test": 325, "observ": [4, 5, 6, 30, 37, 38, 44, 49, 50, 52, 54, 56, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 119, 123, 128, 129, 132, 133, 143, 148, 149, 152, 157, 162, 163, 226, 228, 230, 241, 253, 259, 262, 264, 266, 269, 271, 272, 273, 275, 276, 279, 280, 282, 283, 284, 287, 288, 298, 300, 318, 325], "observable_transform": [49, 50, 55, 57, 272, 273, 275, 283, 288], "observable_valu": 113, "observables_mean_fre": 44, "observation_symbol": 95, "observation_symbols_ful": 95, "observation_trajectori": 276, "observations_per_st": [93, 94, 97], "observe_nonempti": [92, 95], "obtain": [0, 25, 34, 44, 55, 57, 86, 92, 94, 95, 96, 97, 99, 102, 105, 106, 107, 108, 110, 112, 151, 153, 189, 194, 195, 196, 197, 202, 213, 230, 263, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 323, 325], "occup": 164, "occupi": 161, "occur": [91, 93, 94, 97, 111, 112, 113, 114, 117, 118, 119, 120, 260, 284, 286], "occurr": [90, 112, 117, 118, 119, 120], "od": [22, 25, 295, 328, 335], "odeint": [199, 328], "off": [20, 21, 44, 55, 57, 95, 102, 106, 107, 108, 116, 121, 136, 165, 167, 170, 172, 177, 189, 239, 264, 269, 280, 283, 284, 287, 319], "offer": [11, 23, 103, 104, 207, 258, 260, 263, 266, 269, 276, 279, 280, 282, 283, 284, 288], "offset": [21, 86, 95, 311, 325], "often": [148, 149, 266, 269, 276, 281, 286, 287], "olsson": [102, 103, 266], "omega": [22, 23, 236], "omit": 266, "on_error": 161, "onc": [11, 16, 63, 95, 102, 106, 107, 108, 114, 240, 269, 281, 290, 291, 299, 301, 312, 328], "one": [0, 1, 6, 8, 9, 11, 14, 15, 18, 20, 25, 29, 30, 32, 34, 42, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 66, 73, 74, 83, 85, 86, 90, 91, 93, 94, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 135, 138, 139, 149, 153, 161, 164, 189, 198, 199, 218, 226, 231, 232, 233, 234, 235, 236, 238, 240, 243, 244, 253, 260, 263, 264, 266, 268, 269, 270, 271, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 319, 328], "one_hot": 9, "ones": [29, 44, 55, 57, 63, 112, 153, 240, 242, 269, 273, 280, 284, 285], "onli": [13, 17, 18, 20, 29, 44, 55, 57, 58, 63, 65, 74, 83, 85, 86, 91, 92, 95, 96, 98, 99, 102, 103, 104, 106, 107, 108, 109, 112, 125, 127, 135, 144, 147, 149, 162, 163, 177, 189, 190, 195, 196, 197, 200, 214, 218, 223, 225, 233, 234, 235, 236, 238, 240, 242, 243, 244, 260, 264, 266, 268, 269, 270, 276, 277, 280, 281, 283, 284, 286, 287], "onlin": [1, 18, 67, 260, 264, 269], "only_us": 114, "onto": [15, 23, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 63, 84, 95, 102, 105, 106, 107, 108, 165, 192, 193, 240, 250, 262, 270, 283, 284, 287, 288], "oom": [106, 110], "oom_compon": 106, "oom_eigenvalu": 106, "oom_evalu": 106, "oom_information_state_vector": 106, "oom_rank": 106, "oom_timescal": 106, "oomreweightedmsm": [106, 107], "oopman": [47, 53, 264, 271, 278, 283], "open": [30, 86, 241], "openmm": 153, "openmp": 269, "oper": [4, 20, 21, 44, 47, 48, 50, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 66, 71, 73, 102, 106, 107, 108, 110, 217, 218, 228, 236, 240, 242, 262, 264, 266, 268, 270, 271, 277, 278, 283, 284, 287, 288], "operator_invers": [44, 48, 50, 52, 54, 56], "opportun": 28, "oppos": 276, "opt": 273, "opt_data": 277, "opt_data_lag": 277, "optim": [60, 62, 63, 65, 66, 83, 102, 111, 115, 141, 161, 164, 195, 197, 198, 200, 242, 269, 273, 275, 276, 277, 279, 281, 282, 287, 288, 328], "optima": [96, 269, 276], "optimizer_st": 102, "option": [1, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 30, 33, 37, 38, 40, 41, 44, 45, 46, 47, 49, 51, 53, 55, 56, 57, 60, 62, 63, 65, 66, 68, 70, 73, 74, 75, 80, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 120, 122, 123, 125, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 171, 174, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 212, 218, 219, 221, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 263, 268, 269, 270, 276, 279, 281, 283, 284, 286, 287], "orang": 197, "order": [18, 45, 55, 57, 58, 63, 83, 84, 86, 87, 91, 96, 98, 102, 104, 106, 107, 108, 109, 112, 115, 125, 127, 148, 149, 164, 181, 182, 199, 231, 232, 233, 234, 235, 240, 262, 272, 274, 277, 281, 283, 284, 287, 288], "ordereddict": 63, "ordinari": [25, 109, 177, 269, 276, 282], "org": [195, 197, 268], "organ": [112, 263], "origin": [40, 45, 55, 70, 86, 95, 116, 139, 200, 237, 268, 270, 274, 276, 277, 284, 285, 287, 312, 327], "ornstein": [32, 261, 303, 316, 335], "ornstein_uhlenbeck": [259, 308], "orscipi": 157, "orthogon": 270, "orthonorm": [127, 287], "oscil": [40, 242, 287, 312], "oscillatori": 287, "ot": 165, "other": [15, 47, 63, 112, 163, 200, 208, 223, 260, 262, 268, 269, 276, 277, 278, 279, 280, 283, 286, 287, 302, 335], "otherwis": [1, 8, 11, 14, 15, 18, 20, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 73, 74, 82, 85, 86, 88, 91, 95, 96, 97, 98, 103, 104, 107, 109, 110, 111, 112, 113, 126, 127, 135, 136, 137, 138, 154, 164, 179, 189, 190, 194, 195, 198, 200, 219, 225, 268, 276, 283, 284, 286, 287, 288], "otraj": 95, "our": [26, 268, 270, 271, 272, 276, 277, 278, 282, 284, 285, 286, 288], "ourselv": 273, "out": [4, 5, 6, 7, 15, 29, 63, 108, 112, 133, 143, 164, 199, 200, 230, 240, 253, 266, 268, 270, 288, 295, 302, 312, 316, 334], "out_dim": 273, "out_featur": [63, 272, 282, 288], "outcom": [11, 269], "outflux": [166, 168], "outlier": [93, 94, 97], "outlin": [116, 163], "outperform": 55, "output": [11, 14, 20, 30, 44, 45, 47, 49, 53, 55, 57, 60, 62, 63, 65, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 177, 197, 230, 242, 252, 259, 272, 273, 274, 275, 276, 279, 282, 287], "output_dimens": [44, 48, 50, 52, 54, 56, 287], "output_dir": 273, "output_model": [93, 94, 95], "output_nonlinear": 282, "output_prob": [93, 95], "output_trajectori": 46, "outputmodel": [93, 94, 95, 253, 259], "outsid": [103, 277, 284], "over": [11, 12, 14, 18, 23, 44, 55, 57, 63, 68, 81, 85, 86, 90, 95, 99, 102, 103, 104, 106, 107, 108, 111, 112, 113, 115, 118, 148, 149, 164, 192, 193, 219, 227, 263, 266, 269, 271, 272, 274, 276, 279, 280, 281, 283, 285, 286, 313, 327, 330], "overcom": 284, "overestim": [85, 286], "overfit": 282, "overid": 63, "overlai": [191, 318], "overlap": [58, 74, 112, 264], "overrid": [11, 14, 18, 20, 85, 96], "overridden": [63, 76, 77, 78, 79, 80, 81, 213], "overset": 228, "overview": 266, "overwrit": [1, 8, 49, 102, 106, 107, 108, 111, 195, 197], "overwritten": [14, 200], "own": [63, 273], "p": [4, 5, 6, 7, 20, 21, 24, 29, 30, 37, 38, 41, 44, 47, 55, 57, 80, 83, 91, 95, 96, 102, 106, 107, 108, 110, 115, 121, 123, 130, 132, 133, 135, 137, 138, 143, 144, 157, 162, 163, 167, 171, 173, 174, 181, 189, 195, 197, 219, 230, 237, 240, 241, 266, 270, 271, 275, 276, 277, 279, 280, 282, 283, 284, 286, 287, 304, 326], "p0": [91, 95, 102, 106, 107, 108, 130, 133, 143], "p11": 279, "p22": 279, "p33": 279, "p_": [24, 41, 44, 91, 95, 113, 125, 127, 134, 138, 147, 157, 162, 163, 164, 167, 237, 240, 264, 266, 276, 279, 280, 283, 284, 286], "p_0": [95, 102, 106, 107, 108], "p_1": 242, "p_c": 95, "p_fold": [102, 106, 107, 108], "p_i": [24, 197, 237, 242], "p_ij": 197, "p_j": 242, "p_k": [95, 102, 106, 107, 108, 242], "p_n": 242, "p_o": 93, "p_out": 83, "p_t": [94, 97], "p_x": 237, "packag": [45, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 266, 268, 269, 277, 279, 281, 318, 325], "pad": [112, 284, 326, 329], "page": [22, 51, 260, 263, 277, 287], "pair": [0, 45, 47, 49, 51, 53, 84, 112, 135, 142, 165, 166, 167, 168, 169, 173, 174, 178, 212, 237, 270, 283], "pairwis": [18, 283], "pand": [55, 74, 107, 164, 266, 283, 287], "panel": [161, 275], "paper": [111, 200], "parallel": [11, 14, 30, 74, 112, 220, 236, 238, 241, 243, 244, 284], "param": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 275, 277], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 263, 264, 268, 269, 273, 275, 277, 278, 279, 283, 287, 288], "parameter": [103, 240, 241, 276, 282, 283, 288], "parametr": [95, 214, 273], "parent": 263, "part": [18, 44, 63, 73, 84, 113, 160, 195, 197, 236, 238, 243, 244, 260, 268, 272, 277, 283, 287, 325], "partial": [65, 102, 106, 107, 108, 152, 223, 269], "partial_fit": [1, 8, 14, 15, 18, 20, 49, 55, 57, 65, 263, 264, 269], "particl": [23, 27, 33, 34, 35, 36, 40, 43, 236, 242, 271, 273, 274, 278, 281, 287, 320, 321], "particular": [11, 12, 19, 20, 30, 44, 57, 63, 94, 95, 97, 98, 102, 104, 106, 107, 108, 187, 189, 196, 220, 224, 227, 262, 266, 268, 269, 270, 276, 286, 287, 326], "particularli": [262, 266], "partion": [15, 269], "partit": [15, 44, 73, 84, 219, 269, 287], "partli": 260, "pasquali": [65, 262, 288], "pass": [11, 14, 15, 20, 45, 47, 49, 53, 55, 57, 60, 61, 62, 63, 64, 65, 85, 92, 95, 101, 104, 105, 161, 176, 195, 197, 198, 199, 200, 202, 268, 269, 281, 283, 285, 328], "passag": [84, 102, 106, 107, 108, 139, 140, 170, 259, 266, 284], "path": [63, 84, 95, 98, 102, 106, 107, 108, 116, 121, 153, 167, 171, 172, 173, 174, 240, 259, 266, 273, 286], "pathlib": 273, "pathwai": [84, 102, 106, 107, 108, 112, 116, 121, 165, 167, 170, 172, 259], "patienc": 273, "paul": [20, 21, 55, 85, 91, 102, 103, 104, 111, 113, 135, 139, 163, 164, 266, 279, 283, 285, 286, 287], "pbf": [33, 242, 287, 299], "pbf_simul": [287, 332], "pbfsimul": [33, 259], "pc": 21, "pca": [19, 55, 265, 317, 334, 335], "pca_project": 333, "pcca": [83, 98, 99, 102, 106, 107, 108, 141, 195, 252, 259, 265, 266, 276, 284, 317, 320, 334, 335], "pcca_obj": [102, 106, 107, 108], "pccamodel": [102, 106, 107, 108, 259], "pcm": 269, "pdf": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 190, 191, 192, 193, 194, 195, 196, 197, 218, 219, 228, 229, 298], "peitz": 264, "penalti": 82, "penros": 184, "peopl": [270, 271], "peptid": 272, "per": [8, 9, 10, 11, 12, 13, 16, 17, 20, 23, 25, 26, 31, 39, 42, 65, 77, 86, 91, 93, 94, 95, 97, 109, 112, 113, 118, 120, 163, 172, 191, 192, 193, 195, 196, 228, 242, 269, 283, 284, 287, 306, 310, 311, 315], "percentag": [44, 55, 283, 287], "percentil": 104, "perceptron": [282, 288], "perfect": [83, 115], "perfectli": 270, "perform": [11, 14, 15, 16, 18, 19, 20, 33, 44, 45, 57, 60, 62, 63, 65, 66, 73, 74, 82, 92, 95, 96, 102, 103, 104, 105, 106, 107, 108, 116, 141, 177, 179, 183, 184, 185, 186, 200, 226, 228, 240, 242, 263, 264, 268, 269, 271, 272, 273, 276, 279, 282, 284, 285, 287], "period": [23, 236, 273, 277, 287], "periodic_bc": 236, "perman": 268, "permiss": 268, "permit": [110, 260, 268], "perron": [47, 141, 278, 280], "persist": 63, "person": 268, "perturb": [65, 95, 102, 106, 107, 108, 152], "peter": [45, 264, 270, 279, 283, 284], "ph": [102, 106, 107, 108], "phase": 57, "phd": 285, "phenomena": 264, "phi": [44, 57, 271, 272, 277, 278], "phi_": 44, "phi_1": 287, "phi_i": 287, "phi_k": 287, "philipp": [84, 116, 121, 266, 284], "phillip": [91, 276], "phy": [60, 157, 163, 167, 262, 282], "physic": [15, 20, 21, 23, 34, 53, 55, 74, 85, 91, 95, 98, 99, 104, 107, 110, 111, 116, 151, 153, 164, 236, 264, 266, 269, 276, 278, 279, 281, 283, 284, 286, 287], "physica": 264, "pi": [22, 23, 40, 95, 102, 106, 107, 108, 121, 161, 167, 170, 172, 236, 241, 276, 279, 280, 290, 331], "pi_c": 95, "pi_chang": 164, "pi_coars": 83, "pi_i": [102, 106, 107, 108, 164, 167, 172, 279, 280, 284], "pi_iq_i": 284, "pi_j": [164, 279, 280], "pick": [11, 236, 243, 269, 271, 272, 277], "pickl": 63, "picklabl": 63, "picosecond": 110, "piec": 285, "pin": 63, "pipelin": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 264, 272, 283], "pk": [95, 102, 106, 107, 108], "place": [63, 195, 197, 236, 263, 266, 268, 269, 284, 285, 287, 319, 328], "plai": [85, 286], "plan": 263, "planar_layout": 326, "plane": [29, 240, 269, 272], "plasma": 275, "platform": [221, 222, 263], "plattner": [91, 95, 98, 99, 107, 276], "pleas": [12, 33, 44, 55, 57, 62, 63, 91, 127, 195, 197, 200, 263, 268, 283, 287, 288], "plot": [102, 106, 107, 108, 110, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 215, 219, 226, 227, 228, 229, 240, 242, 259, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 300, 305, 308, 309, 313, 314, 317, 318, 319, 320, 321, 322, 323, 325, 328, 331, 332, 333, 334, 335], "plot_2d_map": [240, 284, 297, 327, 329], "plot_abc_flow": [290, 295, 335], "plot_adjac": 259, "plot_bickley_jet": [291, 295, 335], "plot_birth_death_chain": [304, 316, 335], "plot_ck_test": [102, 106, 107, 108, 226, 228, 259, 272, 318, 334, 335], "plot_clustering_comparison": [319, 334, 335], "plot_contour2d_from_xyz": [259, 320, 334, 335], "plot_contour_with_colourbar": 330, "plot_custom_od": [292, 295, 335], "plot_custom_sd": [305, 316, 335], "plot_dens": [259, 321, 334, 335], "plot_dominant_compon": 333, "plot_double_well_2d": [306, 316, 335], "plot_double_well_discret": [307, 316, 335], "plot_drunkards_walk": [297, 302, 335], "plot_ellipsoid": [298, 302, 335], "plot_energy2d": [188, 201, 219, 259, 322], "plot_energy_surfac": [322, 334, 335], "plot_flux": [259, 326], "plot_implied_timescal": [227, 229, 259, 272, 323, 334, 335], "plot_kcca_bicklei": [324, 334, 335], "plot_kcca_project": [325, 334, 335], "plot_kw": 240, "plot_kwarg": [191, 226], "plot_lorenz_system": [293, 295, 335], "plot_markov_model": [259, 326], "plot_method": 275, "plot_mismatch": 273, "plot_network": [240, 284, 326, 329, 334, 335], "plot_ornstein_uhlenbeck": [308, 316, 335], "plot_path": [240, 284, 297], "plot_pbf": [299, 302, 335], "plot_pcca_drunkard": [327, 334, 335], "plot_prinz": [309, 316, 335], "plot_quadruple_wel": [310, 316, 335], "plot_quadruple_well_asymmetr": [311, 316, 335], "plot_scatt": 325, "plot_sindy_rossler_attractor": [328, 334, 335], "plot_singular_funct": 273, "plot_sqrt_model": [300, 302, 335], "plot_swissroll_model": [301, 302, 335], "plot_thomas_attractor": [294, 295, 335], "plot_time_quintuple_wel": [312, 316, 335], "plot_tmatrix_1d": [313, 316, 335], "plot_tpt_gross_net_flux": [329, 334, 335], "plot_tram": [330, 334, 335], "plot_triple_well_1d": [314, 316, 335], "plot_triple_well_2d": [315, 316, 335], "plot_tv_deriv": [331, 334, 335], "plot_vamp_pbf_project": [332, 334, 335], "plot_vamp_vs_tica_vs_pca": [333, 334, 335], "plotter": 240, "plotting_funct": 259, "plt": [102, 106, 107, 108, 190, 194, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "plu": [86, 270, 284, 333], "plug": 20, "pm": [275, 276], "pmatrix": [23, 30, 37, 38, 236, 241, 283], "pmf": 113, "png": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 190, 191, 192, 193, 194, 195, 196, 197, 218, 219, 228, 229], "po": [189, 195, 197, 223, 280, 284, 286, 298, 321], "point": [4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 22, 25, 26, 27, 29, 32, 34, 35, 36, 39, 40, 43, 44, 57, 63, 73, 76, 77, 78, 79, 80, 81, 91, 92, 93, 102, 103, 104, 105, 106, 107, 108, 111, 123, 136, 137, 138, 149, 151, 163, 199, 216, 217, 218, 230, 231, 232, 233, 234, 236, 238, 240, 242, 243, 244, 262, 266, 269, 270, 271, 276, 277, 278, 280, 281, 282, 283, 284, 287, 290, 293, 294, 306, 310, 311, 315], "pointer": [74, 275], "polynomi": [80, 198, 199, 275, 277, 281], "polynomialfeatur": [281, 328], "polynomialkernel": 259, "popul": [86, 92, 95, 98, 239, 269, 272, 286, 304], "popular": 277, "populu": 98, "port": [135, 139], "portion": [85, 268], "posit": [6, 10, 15, 23, 25, 26, 33, 55, 57, 63, 65, 70, 86, 104, 109, 135, 169, 177, 183, 184, 185, 186, 187, 189, 190, 195, 197, 209, 210, 218, 220, 224, 236, 242, 261, 265, 272, 273, 281, 283, 284, 296, 302, 317, 320, 321, 326, 334, 335], "position_based_fluid": [259, 287, 299, 332], "possess": [18, 22, 27, 29, 32, 34, 35, 36, 40, 43, 48, 203, 228, 240, 273, 283, 287], "possibl": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 29, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 171, 195, 197, 198, 199, 200, 219, 225, 231, 232, 233, 234, 235, 240, 242, 260, 264, 266, 269, 276, 277, 280, 283, 287, 288], "possibli": [63, 86], "post": [63, 240, 260, 268], "post_hoc_r": 112, "posterior": [91, 92, 104, 105, 162, 163, 276, 279], "potenti": [18, 26, 27, 28, 34, 35, 36, 40, 42, 43, 44, 45, 48, 50, 52, 54, 55, 56, 57, 65, 73, 85, 113, 153, 221, 227, 236, 238, 239, 242, 243, 244, 252, 261, 269, 270, 271, 272, 278, 284, 285, 286, 287, 303, 306, 310, 311, 312, 314, 315, 316, 320, 330, 335], "potential_landscap": 305, "pout": 95, "power": [44, 95, 102, 106, 107, 108, 281, 287], "pp": 149, "pproach": 287, "pracitic": 283, "practic": [281, 287, 328], "pre": [47, 63, 269, 288], "preced": [44, 55, 57], "preceptron": [275, 282], "precis": [135, 164, 199, 276], "precomput": [125, 127, 147, 200], "pred": 103, "predefin": [49, 51, 287], "predict": [44, 102, 103, 106, 107, 108, 191, 198, 199, 200, 226, 281], "predictions_sampl": 226, "prefactor": 26, "prefer": 276, "prefix": 63, "prepar": [102, 106, 107, 108], "prepend": [63, 223], "preprint": [45, 49, 85, 91, 264, 270, 276, 282, 286], "preprocess": [281, 328], "presenc": 224, "present": [63, 86, 102, 106, 107, 108, 121, 148, 149, 242, 260, 262, 266, 268, 270, 278, 284, 286, 287], "preserv": [63, 84, 102, 106, 107, 108, 223, 242], "press": [135, 139], "pressur": [102, 106, 107, 108, 242], "pretti": 110, "prevent": [171, 260, 273], "previous": [104, 109, 121, 269, 276, 284], "prime": [57, 277], "principl": [44, 242, 264, 270, 283, 287, 288], "print": [10, 23, 63, 102, 104, 106, 107, 108, 110, 151, 153, 164, 189, 195, 197, 199, 212, 225, 260, 263, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 297, 328], "prinz": [15, 34, 91, 95, 98, 99, 107, 110, 151, 157, 164, 261, 266, 269, 276, 303, 316, 335], "prinz_potenti": [259, 274, 309], "prinz_system": 274, "prior": [91, 92, 93, 96, 98, 104, 105, 158, 159, 160, 163, 212, 242, 259, 264, 266, 275, 276, 279, 284], "prior_submodel": 91, "priori": 279, "probabilist": [96, 276], "probabilitii": 153, "probability_constraint": 86, "probabilitydistribut": 142, "probabl": [24, 29, 30, 41, 57, 65, 83, 84, 86, 91, 93, 94, 95, 97, 98, 99, 100, 102, 104, 106, 107, 108, 109, 113, 116, 118, 121, 130, 134, 135, 137, 141, 144, 149, 153, 157, 161, 163, 164, 191, 195, 197, 219, 226, 237, 240, 241, 266, 269, 272, 273, 276, 279, 280, 283, 286, 287, 319, 326, 327], "probe": [107, 123, 132, 133, 143], "problem": [44, 47, 55, 57, 91, 121, 177, 259, 263, 268, 277, 278, 283, 284, 285, 287], "proc": [165, 167, 170, 172], "procedur": [12, 20, 67, 85, 91, 95, 98, 99, 149, 264, 276, 286, 287], "proceed": [102, 103, 107, 111, 113, 116, 121, 123, 132, 133, 143, 198, 200, 266, 269, 276, 281, 284, 285], "process": [1, 9, 10, 12, 20, 26, 27, 28, 32, 35, 36, 40, 42, 43, 44, 55, 57, 63, 65, 73, 74, 84, 92, 96, 98, 102, 103, 105, 106, 107, 108, 109, 116, 121, 123, 132, 133, 135, 139, 143, 149, 161, 167, 171, 173, 174, 196, 223, 227, 239, 250, 256, 261, 262, 264, 266, 269, 270, 271, 272, 276, 277, 279, 280, 282, 283, 284, 286, 287, 288, 303, 316, 335], "process_index": 227, "proctor": [198, 200, 281], "prod": 169, "prod_": [6, 91, 113, 157, 162, 163, 279], "prod_i": 91, "produc": [9, 18, 34, 37, 38, 44, 45, 46, 50, 52, 57, 61, 63, 64, 83, 84, 85, 89, 104, 109, 161, 166, 168, 174, 189, 199, 212, 268, 272, 275, 276, 282, 283, 285], "product": [84, 95, 102, 106, 107, 108, 112, 163, 169, 170, 172, 187, 216, 237, 277, 281], "prof": 260, "program": 268, "progress": [11, 16, 44, 65, 91, 92, 95, 96, 102, 104, 105, 106, 107, 108, 111, 112, 164, 203, 204, 218, 221, 228, 240, 269, 272, 275, 285, 288, 330], "progress_bar": 221, "progressbar": [44, 91, 218, 221, 228], "progresscallback": [204, 259], "prohibitev": 171, "proj": 282, "project": [44, 45, 48, 55, 57, 63, 91, 95, 98, 99, 107, 250, 262, 263, 264, 268, 270, 271, 272, 273, 275, 276, 282, 283, 287, 288, 290, 293, 294, 301, 328, 332, 333], "projected_data": 55, "projection_left": [287, 332], "projection_right": [287, 332], "projector": 263, "promin": 268, "prone": [96, 276], "prop": [238, 243, 244, 274, 275], "prop_cycl": 196, "propag": [23, 25, 26, 44, 45, 48, 50, 52, 54, 55, 56, 57, 60, 62, 65, 95, 102, 106, 107, 108, 123, 132, 228, 242, 264, 270, 271, 287, 332], "propagated_sampl": [25, 26], "properli": [55, 57, 268, 283], "properti": [1, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 138, 165, 189, 198, 199, 202, 206, 207, 208, 209, 210, 213, 226, 227, 228, 236, 237, 238, 239, 240, 241, 242, 243, 244, 263, 270, 274, 279, 281, 283, 286, 288], "propos": 18, "propto": [162, 163, 219], "protein": [164, 264, 283, 284], "provid": [11, 13, 14, 17, 44, 55, 57, 63, 65, 74, 78, 84, 85, 86, 89, 92, 95, 96, 102, 106, 107, 108, 109, 111, 112, 178, 179, 189, 192, 193, 194, 200, 211, 212, 220, 225, 230, 236, 238, 243, 244, 253, 260, 262, 264, 266, 268, 269, 276, 281, 282, 283, 286, 287, 288], "proxi": 268, "prune": 86, "pseudo": [44, 48, 50, 52, 54, 56, 161, 271], "psi": [7, 44, 47, 48, 57, 264, 272], "psi_": [44, 271], "psi_1": [271, 287], "psi_2": 271, "psi_i": [47, 271, 287], "psi_k": [271, 287], "psi_x": [47, 271], "ptp": [293, 294], "public": [85, 242, 260, 268, 286], "publish": [260, 268], "pull": 223, "pure": [12, 137], "purpos": [30, 60, 62, 83, 95, 268, 269, 280, 285, 287, 288], "put": [149, 273, 279], "py": [163, 263, 269, 277, 285, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "pybind11": 269, "pybind11_modul": [13, 17, 269], "pydanni": 213, "pyemma": 268, "pylab": [102, 106, 107, 108], "pypi": 263, "pyplot": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "pysindi": [268, 281], "pytest": 263, "python": [103, 104, 109, 110, 111, 116, 161, 212, 223, 269, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "python3": [277, 318, 325], "pytorch": [60, 62, 65, 81, 82, 208, 250, 251, 262, 272, 282, 288], "q": [24, 44, 121, 237, 284, 304, 327], "q_": [44, 121, 284], "q_i": [24, 167, 172, 237, 284], "q_j": [167, 284], "qminu": [84, 116, 167, 170, 172], "qplu": [84, 116, 167], "qquad": 281, "qr": [19, 177, 183, 184, 185, 186, 270], "quad": [43, 45, 266, 268, 277, 278, 279], "quadcontourset": 188, "quadrat": [264, 285], "quadrupl": [34, 35, 36, 261, 278, 303, 316, 335], "quadruple_wel": [259, 278, 310, 321], "quadruple_well_asymmetr": [259, 311], "qualifi": 63, "qualit": [104, 333], "qualiti": [28, 260, 269], "quantit": 104, "quantiti": [83, 84, 92, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 202, 266, 276, 279, 280, 284], "quantitystatist": [92, 105, 259], "quantiz": 269, "quantum": 283, "quasi": [161, 236, 273, 325], "queri": 63, "question": 284, "quicker": 269, "quintupl": [40, 261, 303, 316, 335], "quit": 287, "quiver": [283, 333], "quotient": [44, 73, 102, 106, 107, 108], "r": [6, 7, 23, 26, 29, 44, 45, 47, 51, 55, 56, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 94, 97, 98, 99, 102, 103, 104, 106, 107, 108, 111, 113, 115, 116, 121, 127, 141, 142, 149, 164, 177, 181, 184, 185, 186, 187, 199, 200, 202, 226, 236, 240, 241, 242, 262, 263, 264, 266, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 292, 293, 298, 305, 331], "r0": 236, "r2_score": [199, 200], "r_": [44, 306, 310, 311, 315], "r_0": [23, 236], "r_i": [24, 55, 111, 113, 123, 127, 132, 133, 137, 237, 283], "r_ij": [102, 106, 107, 108], "rabin": 276, "rad": [280, 284], "radiu": [23, 26, 211, 218, 236, 305], "rainbow": 280, "rais": [44, 63, 74, 95, 104, 108, 112, 161, 195, 197, 200, 209, 210, 225, 236, 238, 243, 244], "ralf": [55, 283], "rand": 278, "randal": 18, "randint": 94, "randn": 94, "random": [6, 10, 11, 14, 16, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 43, 55, 58, 59, 74, 94, 100, 104, 149, 153, 188, 212, 236, 238, 240, 241, 243, 244, 263, 269, 270, 271, 273, 276, 277, 278, 283, 284, 290, 294, 312, 319, 323, 331], "random_guess": [259, 276], "random_split": [272, 282, 288], "random_st": [58, 59, 74, 212, 241, 269, 275, 312, 319], "random_walk": 240, "randomli": [58, 74, 100, 148, 149, 269], "randomsampl": 273, "randomst": [58, 59, 74, 212, 269, 270, 271, 273, 312, 319], "rang": [86, 94, 95, 223, 227, 228, 240, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 284, 285, 287, 288, 290, 321, 329, 332], "rangl": [102, 106, 107, 108, 123, 127, 132, 133, 264], "rangle_": [44, 123, 132, 277, 287], "rangle_t": [102, 106, 107, 108], "rank": [19, 44, 45, 51, 55, 57, 106, 110, 175, 177, 183, 184, 185, 186, 187, 271, 283, 287], "rank0": 44, "rank_0": 44, "rank_mod": 110, "rank_t": 44, "rankt": 44, "rapid": [102, 106, 107, 108], "rapidli": 171, "rare": [264, 272, 283], "rate": [60, 62, 65, 84, 136, 161, 170, 237, 259, 273, 284], "rather": [13, 17, 30, 102, 106, 107, 108, 121, 241, 280, 283, 284], "ratio": 153, "raw": [49, 55, 57, 67, 209, 283], "rayleigh": [44, 73, 102, 106, 107, 108], "rc": 196, "rcparam": 189, "rdl_decomposit": 127, "re": [18, 55, 63, 95, 96, 98, 99, 102, 106, 107, 108, 110, 143, 177, 223, 279, 283, 284, 285, 318], "reach": [15, 95, 96, 102, 106, 107, 108, 112, 121, 135, 240, 242, 269, 284], "reactant": [84, 170, 172, 174, 237], "reaction": [55, 84, 116, 121, 167, 170, 171, 172, 237, 259], "reactiv": [84, 102, 106, 107, 108, 116, 189, 195, 259, 329], "reactive_flux": [84, 102, 106, 107, 108, 189, 259, 284, 326, 329], "reactiveflux": [102, 106, 107, 108, 116, 195, 259, 284, 329], "readabl": 199, "readi": [251, 279, 281], "readm": 263, "real": [44, 102, 106, 107, 108, 137, 262, 270, 271, 273, 275, 277, 278, 324, 325], "realiz": [44, 73, 95, 102, 106, 107, 108, 148, 149, 279], "reason": [63, 102, 106, 107, 108, 279, 281], "recalcul": 128, "receiv": [63, 112, 268], "recent": [103, 104, 109, 111], "recip": 63, "recognit": 276, "recombin": 268, "recommend": [83, 85, 91, 95, 102, 106, 107, 108, 109, 111, 112, 123, 125, 127, 132, 133, 142, 144, 147, 286], "recomput": 112, "reconstruct": [62, 275, 282], "record": [25, 26, 31, 39, 40, 63, 236, 242], "recov": [91, 113, 272, 276], "recurs": 63, "red": [195, 197, 273, 275, 276, 284, 293, 312], "reduc": [19, 44, 57, 93, 183, 184, 185, 186, 187, 209, 210, 269, 271, 276, 285], "reducelronplateau": 273, "reduct": [55, 57, 186, 269, 283, 287], "ref": 273, "refer": [1, 8, 11, 13, 14, 15, 16, 18, 20, 21, 22, 23, 26, 31, 33, 34, 39, 43, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 73, 74, 83, 84, 85, 86, 91, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 121, 123, 132, 133, 135, 139, 141, 143, 149, 150, 151, 153, 154, 155, 156, 157, 161, 163, 164, 165, 167, 170, 171, 172, 173, 174, 194, 195, 197, 198, 200, 218, 236, 240, 242, 260, 262, 263, 264, 266, 268, 269, 270, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "referenc": [63, 188], "referr": 260, "reflect": [84, 264, 274, 288, 290, 291, 299, 301, 312, 333], "regard": [260, 274, 277], "regardless": [63, 86], "regim": [91, 287], "region": [98, 121, 271, 272, 283, 307], "regist": [13, 17, 63, 269], "register_backward_hook": 63, "register_buff": 63, "register_clust": [13, 17, 269], "register_forward_hook": 63, "register_forward_pre_hook": 63, "register_full_backward_hook": 63, "register_full_backward_pre_hook": 63, "register_load_state_dict_post_hook": 63, "register_load_state_dict_pre_hook": 63, "register_modul": 63, "register_module_forward_hook": 63, "register_module_forward_pre_hook": 63, "register_module_full_backward_hook": 63, "register_module_full_backward_pre_hook": 63, "register_paramet": 63, "register_state_dict_post_hook": 63, "register_state_dict_pre_hook": 63, "registerclusteringimplement": [13, 17, 269], "registri": [9, 10, 11, 12, 13, 14, 15, 16, 17], "regress": [200, 281, 287], "regressor": [198, 200], "regular": [15, 44, 49, 51, 53, 62, 65, 68, 69, 70, 71, 75, 98, 99, 102, 106, 107, 108, 200, 218, 230, 242, 273, 275, 277, 278, 319, 331], "regularspac": [259, 269, 319], "reich": [116, 121, 165, 167, 170, 172, 284], "reject": 260, "rel": [11, 12, 14, 103, 104, 109, 143, 164, 166, 168, 195, 197, 218, 269, 283], "relat": [9, 10, 12, 51, 55, 86, 142, 262, 264, 266, 276, 277, 283, 284, 285, 287], "relationship": [45, 278], "relativist": 283, "relax": [55, 92, 95, 102, 105, 106, 107, 108, 123, 132, 133, 149, 264, 272, 276, 279, 283, 287], "relaxation_ob": 95, "releas": 63, "relev": [55, 57, 102, 106, 107, 108, 144, 149, 200, 270, 272, 284], "reli": [167, 172], "relink": 268, "relu": [275, 282, 288], "remain": [14, 44, 55, 57, 98, 99, 149, 177, 205, 260, 268, 279, 284], "remaind": [84, 284, 287], "remainder_low": 284, "remainder_upp": 284, "remark": 270, "remedi": 242, "remov": [18, 19, 20, 44, 63, 67, 73, 74, 106, 176, 183, 184, 185, 186, 187, 230, 231, 232, 233, 234, 235, 284, 286, 312, 325, 326], "removablehandl": 63, "remove_data_mean": 18, "remove_dupl": 63, "remove_mean": [67, 231, 232, 233, 234, 235], "remove_nan": 205, "ren": [39, 107, 123, 132, 133, 143], "renam": [13, 17], "renorm": [98, 99], "reparametr": 64, "repeat": [142, 269, 273, 283, 284, 312], "repeatedli": 14, "repetit": 74, "replac": [6, 110, 118, 120, 214, 269, 277], "replaced_bi": 214, "replica": [111, 112, 266, 285], "report": [1, 8, 11, 14, 15, 16, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 198, 269, 284], "repres": [44, 65, 86, 87, 95, 102, 106, 107, 108, 123, 132, 133, 143, 260, 266, 281, 284], "represent": [61, 63, 64, 102, 106, 107, 108, 195, 197, 283, 287, 288], "reproduc": [11, 14, 16, 30, 53, 102, 104, 106, 107, 108, 236, 238, 241, 243, 244, 268, 269, 278, 287, 319], "request": [84, 86, 96, 104, 200, 276, 287], "requir": [0, 18, 20, 45, 63, 82, 86, 87, 89, 91, 95, 96, 98, 104, 107, 109, 112, 163, 216, 218, 223, 228, 242, 250, 262, 264, 268, 269, 270, 272, 276, 279, 283, 286, 288], "requires_grad": 63, "requires_grad_": 63, "requires_networkx": 215, "resampl": [148, 149], "rescal": [189, 274], "rescaled_proj": 275, "research": [51, 218, 260, 264, 277], "reserv": [260, 268], "reset": [60, 62, 63], "reshap": [271, 273, 275, 277, 282, 284, 285, 287, 288, 293, 294, 298, 299, 300, 305, 306, 309, 310, 311, 312, 314, 315, 327, 330], "residu": 200, "resolut": [192, 193, 196], "resolv": [63, 85, 86, 88, 89, 92, 98, 256, 269, 272], "resourc": 266, "respect": [11, 12, 14, 26, 29, 37, 38, 44, 55, 57, 63, 73, 84, 87, 102, 106, 107, 108, 109, 111, 113, 135, 137, 142, 160, 163, 189, 190, 195, 236, 240, 242, 260, 263, 269, 272, 277, 278, 279, 281, 283, 286, 287, 330], "respons": [242, 260], "rest": [242, 283, 287], "rest_dens": 242, "restrict": [18, 55, 57, 73, 86, 92, 93, 94, 95, 97, 98, 102, 104, 105, 106, 107, 108, 109, 112, 163, 164, 230, 233, 234, 235, 268, 279, 286], "restrict_to_largest_connected_set": [112, 285], "restrict_to_submodel": 112, "restructur": 112, "result": [4, 5, 6, 7, 11, 12, 14, 16, 23, 28, 44, 45, 55, 58, 63, 85, 86, 91, 92, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 113, 161, 164, 188, 191, 195, 197, 199, 201, 205, 225, 226, 228, 230, 241, 258, 264, 269, 275, 276, 277, 280, 283, 286, 287], "resum": [1, 11, 14], "retain": [177, 200], "retriev": [95, 104], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 263, 269, 273, 275, 277, 279, 283, 284, 285, 290, 301, 305, 312, 325, 328, 330], "return_conv": 164, "return_count": 273, "return_estim": [102, 106, 107, 108], "return_rank": [177, 186], "return_sqrt": 70, "return_st": [240, 284], "return_statdist": 164, "return_statist": 164, "return_tim": [123, 236, 243], "rev_pisym": 164, "reveal": [55, 264, 269, 270, 271, 273, 282, 283, 287, 288], "revers": [18, 44, 55, 73, 85, 91, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 125, 127, 137, 142, 147, 160, 161, 162, 163, 164, 237, 264, 268, 273, 276, 279, 280, 283, 284, 286, 287], "reversib": [98, 99], "reversibli": 98, "review": [23, 55, 236, 264, 266, 283], "revis": 268, "reweigh": [102, 106, 107, 108], "reweight": [21, 102, 106, 107, 108, 110, 111, 153, 285, 287, 330], "reweighting_factor": 153, "reweighting_model": 283, "rez": [55, 283], "rfloor": [151, 286], "rgb": [189, 195, 197], "rh": [25, 26, 292, 305], "rho": [31, 228, 277], "rho_": 44, "rho_0": 242, "rho_1": 287, "rho_i": 242, "rick": 218, "ridg": 200, "ridge_kw": 200, "right": [6, 8, 9, 11, 23, 25, 26, 34, 40, 41, 43, 44, 55, 57, 76, 77, 79, 95, 98, 102, 106, 107, 108, 113, 126, 127, 137, 139, 141, 142, 151, 152, 157, 159, 160, 161, 162, 163, 167, 181, 199, 236, 238, 243, 244, 260, 268, 269, 274, 275, 281, 283, 284, 287, 309, 320, 326, 329, 332], "right_hand_sid": [236, 238, 243, 244], "rightarrow": [84, 85, 110, 153, 284, 286], "rigor": 280, "rise": [284, 287], "rk45": 236, "rl": [98, 121, 158, 159, 160, 167], "rmsprop": 60, "rnd": [269, 319], "rng": 241, "ro": 281, "robeniu": 47, "robert": [74, 107, 135, 150, 154, 155, 156, 242, 287], "robust": [177, 183, 184, 185, 186, 280], "rocess": 287, "role": [85, 86, 286], "room": 272, "root": [70, 104, 230, 286], "rossler": 328, "rotat": [30, 241, 274], "rough": [149, 276], "roughli": [223, 269, 280, 287], "round": [199, 272, 277, 287, 311], "rout": 200, "routin": [96, 111, 127, 198, 254, 275, 281], "row": [44, 83, 91, 93, 95, 100, 102, 106, 107, 108, 109, 117, 118, 119, 120, 136, 138, 142, 144, 162, 176, 185, 198, 226, 231, 232, 233, 234, 235, 240, 242, 266, 273, 276, 277, 281, 283], "rowlei": [45, 47, 53, 264, 270, 271, 278, 283], "royal": 242, "royalblu": 328, "rtol": [166, 168], "rule": 223, "run": [55, 57, 63, 95, 102, 106, 107, 108, 242, 263, 268, 285, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "rung": [22, 25], "running_mean": 63, "running_var": 63, "runtim": [63, 277], "runtimeerror": [63, 95], "runtimewarn": 277, "rv1": 298, "rv2": 298, "rvert": [132, 133, 147], "rvert_": 152, "r\u00f6ssler": [265, 317, 334, 335], "s00332": [53, 278], "s_": [85, 111, 112, 152, 153, 276, 284, 286], "s_0": 279, "s_1": [85, 111, 112, 284, 286], "s_2": [85, 111, 112, 284, 286], "s_i": [11, 12, 102, 106, 107, 108, 269, 284, 285], "s_k": 284, "s_t": [93, 94, 97, 279], "s_x": [234, 235], "s_y": [234, 235], "safe": 218, "sai": [63, 279, 281], "said": [55, 57, 283, 284, 286], "sake": [277, 278], "salvag": 287, "same": [18, 21, 24, 44, 48, 50, 52, 54, 55, 56, 57, 58, 63, 65, 74, 86, 103, 111, 112, 113, 153, 161, 164, 176, 189, 193, 208, 212, 218, 219, 242, 263, 268, 269, 270, 273, 284, 286, 287, 319], "sampl": [10, 14, 18, 25, 26, 37, 38, 58, 65, 73, 74, 85, 86, 89, 91, 92, 93, 94, 95, 97, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 148, 149, 160, 163, 192, 193, 196, 200, 202, 205, 219, 226, 227, 228, 229, 239, 252, 259, 266, 269, 277, 278, 283, 284, 285, 286, 287, 298, 300, 301, 319, 330, 333], "sample_by_observation_prob": 95, "sample_confid": 196, "sample_trajectori": 330, "sample_weight": 200, "sample_weights_log": 113, "sampledmsm": 104, "sampler": [91, 163, 273], "samples_for_process": 227, "santitissadeekorn": 277, "sarich": [15, 34, 43, 151, 157, 164, 266, 269, 271], "satisfi": [198, 284], "sauer": [107, 123, 132, 133, 143], "save": [63, 92, 95, 102, 106, 107, 108, 128, 231, 232, 233, 234, 235], "scalar": [152, 198, 199, 223], "scalarmapp": [280, 284, 326, 327, 329], "scale": [10, 26, 44, 45, 55, 57, 102, 106, 107, 108, 112, 132, 133, 146, 147, 177, 189, 190, 193, 195, 197, 236, 269, 270, 273, 321, 323, 326], "scale_st": 190, "scaled_model": 287, "scatter": [102, 106, 107, 108, 242, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 282, 283, 284, 287, 288, 290, 293, 297, 298, 301, 312, 319, 324, 325, 333], "scatter1": 325, "scatter2": 325, "scatter_handl": 312, "scatter_s": 275, "scatterplot": 240, "sch": [15, 34, 43, 47, 53, 84, 116, 121, 151, 164, 264, 266, 269, 271, 278, 279, 280, 284, 287], "schaefer": 153, "schatten": 181, "schatten_norm": 259, "schedul": 273, "scherer": 287, "schmid": [45, 264, 270, 283], "scholarli": 218, "schroer": [85, 91, 104, 111, 163, 164, 279, 286], "schuett": [157, 165, 167, 170, 171, 172, 173, 174], "schur": [177, 183, 184, 185, 186], "schuster": [53, 55, 264, 278, 283], "schwant": [55, 283], "sci": [165, 167, 170, 172], "scienc": [31, 44, 47, 53, 57, 65, 73, 74, 102, 103, 107, 109, 111, 113, 116, 121, 123, 132, 133, 143, 198, 200, 264, 266, 271, 277, 278, 279, 281, 283, 284, 285, 287, 288], "scientif": 284, "scikit": [11, 14, 20, 55, 57, 65, 91, 96, 101, 103, 109, 199, 281], "scipi": [45, 84, 116, 121, 123, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 171, 178, 190, 192, 199, 254, 275, 277, 282, 288, 298, 300, 306, 310, 311, 315, 328], "score": [12, 19, 44, 50, 60, 62, 65, 66, 71, 72, 73, 74, 75, 85, 96, 102, 106, 107, 108, 199, 200, 262, 264, 272, 275, 277, 281, 288], "score_kcca": 273, "score_kvad": 273, "score_kvadnet": 273, "score_method": [65, 287], "score_mod": 65, "score_std": 275, "score_vamp": 273, "score_vampnet": 273, "scoring_kw": 199, "script": [290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "scullei": 269, "sde": [25, 26, 40, 236, 238, 243, 244, 278, 316, 335], "search": [135, 150, 154, 155, 156, 279], "sebastian": 264, "second": [4, 6, 15, 18, 19, 60, 62, 65, 95, 102, 106, 107, 108, 109, 110, 111, 112, 113, 123, 132, 189, 212, 232, 234, 235, 269, 281, 283, 284, 287, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "section": [260, 268, 287], "see": [6, 11, 12, 14, 15, 16, 18, 19, 33, 44, 45, 46, 47, 49, 51, 53, 55, 57, 62, 63, 65, 66, 68, 71, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 91, 92, 93, 95, 98, 103, 105, 106, 109, 112, 121, 149, 165, 170, 173, 178, 188, 192, 194, 195, 197, 198, 199, 200, 201, 216, 218, 219, 223, 225, 226, 232, 234, 239, 241, 242, 262, 263, 266, 269, 270, 277, 281, 283, 285, 286, 287, 288, 293, 294, 318, 320, 321, 327, 329, 330, 332], "seed": [11, 14, 16, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 43, 58, 59, 74, 100, 102, 106, 107, 108, 236, 238, 240, 241, 243, 244, 269, 271, 273, 275, 278, 280, 283, 284, 287, 297, 298, 306, 310, 311, 314, 315, 319, 333], "seek": [87, 198, 264, 272, 281], "seem": 281, "seen": [39, 282, 287, 330], "segment": [149, 293, 294, 306, 310, 311, 315], "select": [18, 30, 44, 47, 49, 51, 73, 85, 86, 92, 95, 98, 108, 109, 110, 113, 126, 149, 161, 164, 209, 210, 240, 241, 271, 276, 281, 283, 284, 287, 288], "selected_count_fract": 86, "selected_state_fract": 86, "self": [1, 2, 3, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 175, 198, 199, 200, 203, 236, 263, 273], "sell": 268, "semi": [65, 187], "semilogi": 282, "semilogx": [273, 274], "senn": [15, 34, 151, 157, 164, 266, 269], "sens": [85, 92, 263, 281, 287], "sensit": [122, 124, 126, 129, 140, 145, 146, 152, 259], "separ": [37, 38, 55, 91, 92, 95, 98, 99, 105, 110, 202, 231, 232, 233, 234, 260, 264, 269, 275, 276, 279, 280, 281, 282, 283, 288, 325], "separate_symbol": [98, 99], "seper": 151, "seq": 211, "sequenc": [37, 38, 55, 93, 94, 95, 119, 120, 211, 227, 241, 274, 276, 279, 283, 284], "sequenti": [63, 200, 270, 272, 273, 281, 282, 288], "sequentialsampl": 273, "sergei": [11, 16, 269], "seri": [7, 12, 18, 44, 55, 57, 65, 73, 74, 91, 92, 103, 107, 109, 149, 208, 209, 210, 241, 247, 248, 263, 264, 266, 279, 280, 283, 287, 288], "serial": 63, "serv": [91, 270], "servic": 260, "set": [0, 1, 2, 6, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 27, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 74, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 122, 134, 139, 140, 141, 148, 149, 150, 155, 156, 157, 164, 165, 171, 174, 175, 189, 191, 195, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 219, 223, 227, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 244, 264, 265, 266, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 317, 327, 328, 334, 335], "set1": 274, "set_3d_properti": 290, "set_arrai": [293, 294, 306, 310, 311, 315], "set_aspect": [271, 272, 273, 283, 298, 311, 326, 333], "set_box_aspect": [293, 294], "set_config": 200, "set_data": 290, "set_descript": [203, 204], "set_extra_st": 63, "set_fit_request": 200, "set_label": [272, 322], "set_linewidth": [293, 294, 306, 310, 311, 315], "set_num_thread": [272, 273, 282, 288], "set_offset": [273, 312], "set_param": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200], "set_score_request": 200, "set_submodul": 63, "set_ticks_posit": 276, "set_titl": [269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 287, 288, 290, 300, 306, 310, 311, 314, 315, 319, 321, 323, 324, 325, 326, 327, 329, 333], "set_to_non": 63, "set_vis": [274, 326], "set_xlabel": [272, 275, 276, 282, 283, 287, 288, 300, 304, 309, 314, 323, 325, 333], "set_xlim": [271, 273, 274, 290, 312], "set_xlim3d": 293, "set_xtick": [274, 304], "set_ylabel": [272, 275, 276, 282, 283, 288, 300, 304, 309, 314, 323, 325, 333], "set_ylim": [271, 273, 274, 275, 290, 312], "set_ylim3d": 293, "set_yscal": [272, 323], "set_ytick": [274, 275], "set_yticklabel": [275, 284], "set_zlim": 290, "set_zlim3d": 293, "setdiff1d": 273, "setflag": [0, 112, 206, 207, 208, 209, 210], "setminu": 121, "setter": [11, 14, 15, 18, 20, 44, 55, 57, 60, 62, 65, 85, 104, 109, 189, 213, 236], "setup": [240, 269, 283], "setup_optim": [60, 62, 65], "setuptool": 269, "sever": [0, 63, 96, 102, 106, 107, 108, 116, 266, 286], "sgd": 60, "shade": 196, "shadow": 304, "shall": [84, 268], "shallow": 63, "shape": [6, 9, 11, 16, 18, 19, 22, 23, 25, 26, 27, 30, 32, 34, 35, 36, 40, 43, 55, 57, 70, 85, 93, 94, 95, 103, 111, 112, 119, 120, 125, 127, 139, 147, 151, 153, 161, 163, 180, 189, 190, 192, 193, 198, 199, 200, 201, 205, 209, 210, 219, 223, 227, 236, 238, 241, 242, 243, 244, 270, 271, 272, 273, 274, 275, 277, 280, 282, 283, 284, 285, 287, 288, 298, 300, 305, 306, 310, 311, 312, 315, 325, 331], "share": [65, 66, 191, 268, 288], "share_memori": 63, "share_memory_": 63, "sharei": [191, 226, 274, 284, 309, 327], "sharex": [274, 284, 327], "shift": [18, 19, 44, 55, 57, 58, 66, 71, 85, 109, 111, 112, 189, 212, 219, 264, 270, 283, 285, 286], "shift_energi": [219, 322], "shirt": 111, "short": [20, 21, 55, 110, 116, 121, 165, 167, 170, 172, 210, 265, 266, 283, 284, 317], "shortcut": [1, 8, 11, 14, 15, 18, 20, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 65, 85, 91, 96, 103, 104, 109, 110, 111, 198, 226], "shorter": 149, "shortest": 269, "should": [10, 11, 12, 13, 14, 17, 18, 25, 26, 44, 55, 57, 60, 62, 63, 65, 66, 74, 75, 85, 93, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 176, 189, 196, 198, 199, 200, 203, 229, 230, 240, 263, 264, 269, 270, 276, 279, 283, 286, 287, 333], "show": [63, 112, 196, 269, 272, 273, 284, 285, 286, 287, 299, 304, 306, 307, 308, 312, 313, 314, 322, 324, 325, 327, 328, 329, 330, 333], "show_committor": 195, "show_cutoff": 196, "show_ml": 196, "show_sampl": 196, "show_sample_confid": 196, "show_sample_mean": 196, "showcas": [269, 307], "shown": [55, 57, 85, 111, 112, 223, 269, 286, 287, 327], "shrink": [280, 284, 327], "shuffl": [212, 269, 272, 275, 282, 288], "siam": [135, 149, 150, 154, 155, 156], "side": [25, 26, 60, 62, 199, 236, 238, 243, 244, 268, 287, 320], "sidnei": [135, 139], "sigma": [26, 27, 31, 36, 42, 43, 44, 76, 77, 79, 81, 94, 103, 104, 270, 271, 277, 278, 305, 331], "sigma_": [44, 162, 283], "sigma_1": [77, 287], "sigma_2": 287, "sigma_d": 77, "sigma_i": [44, 181, 287], "sigma_k": 287, "sigmoid": 282, "sign": [183, 185, 280, 287], "signal": [55, 102, 106, 107, 108, 110, 264, 283], "signatur": 63, "signific": 283, "significantli": [111, 283, 287], "silent": 63, "silva": 268, "sim": [34, 91, 241, 269, 281, 284, 297, 327, 329], "similar": [15, 18, 63, 125, 127, 147, 223, 268, 269, 273, 287], "similarli": [63, 123, 132, 269, 271, 279, 287], "simon": [102, 103, 266], "simpl": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 223, 276, 285, 311, 330], "simplefilt": 269, "simpli": [86, 263, 281, 287], "simplic": [33, 242, 284], "simplifi": 277, "simul": [20, 21, 22, 23, 24, 27, 29, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 55, 57, 73, 74, 84, 95, 102, 103, 106, 107, 108, 109, 110, 112, 116, 121, 123, 132, 133, 143, 149, 161, 165, 167, 170, 171, 172, 173, 174, 199, 238, 239, 240, 242, 243, 244, 264, 266, 273, 274, 276, 279, 281, 283, 284, 285, 287, 299, 304, 313, 328, 330, 332], "simulate_oscillatory_forc": [242, 287, 299, 332], "simulate_trajectori": 239, "simultan": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85, 220], "sin": [22, 23, 38, 39, 40, 236, 241, 331], "sinc": [63, 71, 74, 96, 98, 131, 242, 264, 270, 272, 273, 277, 279, 282, 283, 287, 333], "sindi": [199, 200, 259, 264, 265, 268, 317, 334, 335], "sindymodel": [198, 259, 281, 328], "singhal": [91, 276], "singl": [8, 39, 63, 85, 91, 103, 109, 135, 148, 149, 154, 195, 197, 210, 223, 225, 236, 243, 268, 269, 276, 282, 283, 287], "singleton": [13, 17, 86], "singular": [44, 47, 50, 55, 57, 71, 73, 74, 102, 106, 107, 108, 181, 187, 264, 273, 324], "singular_valu": [44, 50, 287], "singular_vector": 50, "singular_vectors_left": [44, 283, 287, 333], "singular_vectors_right": [44, 287], "sink": [84, 174], "site": [260, 277, 318, 325], "situat": [57, 143, 276], "six": 284, "size": [6, 10, 14, 18, 22, 25, 26, 27, 29, 31, 32, 34, 35, 36, 39, 40, 42, 43, 55, 57, 58, 63, 81, 86, 87, 92, 94, 95, 102, 103, 105, 106, 107, 108, 111, 112, 113, 149, 150, 163, 177, 188, 189, 195, 197, 199, 209, 210, 212, 236, 238, 240, 242, 243, 244, 263, 269, 270, 271, 273, 278, 283, 284, 286, 290, 294, 312, 319, 323, 326, 329], "size_t": 269, "ske": [20, 21, 55, 74, 107, 110, 264, 266, 283, 287], "skip": [63, 151], "sklearn": [110, 198, 200, 269, 281, 283, 319, 328, 333], "slash": 276, "slice": 207, "slide": [58, 74, 85, 86, 109, 110, 111, 112, 151, 153, 161, 211, 273, 274, 275, 279, 284, 286], "sliding_window": 259, "slidingwindow": 151, "slightli": [149, 189, 273], "slow": [20, 21, 55, 60, 74, 102, 106, 107, 108, 111, 149, 195, 197, 250, 262, 264, 271, 278, 282, 283, 287], "slower": 242, "slowest": [55, 73, 102, 106, 107, 108, 149, 272, 283, 287], "slowli": [40, 55, 283, 312], "slsqp": [275, 277], "small": [65, 68, 70, 71, 86, 91, 104, 109, 164, 171, 195, 197, 218, 268, 272, 274, 275, 281], "smaller": [11, 12, 20, 55, 57, 86, 112, 118, 120, 183, 184, 185, 186, 277, 284], "smallest": 228, "smith": [107, 123, 132, 133, 143], "smooth": 242, "snell": 284, "so": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 30, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 137, 162, 171, 187, 198, 199, 200, 216, 218, 220, 223, 228, 242, 263, 264, 266, 268, 269, 278, 282, 283, 284, 285, 287, 288], "soc": [43, 271, 284], "societi": [96, 242, 266, 276], "soft": 284, "softmax": [65, 272], "softwar": 259, "solid": [74, 318, 325], "solut": [134, 177, 218, 270, 272, 277, 281, 328], "solv": [47, 55, 121, 177, 198, 270, 277, 278, 281, 283, 287], "solver": [242, 259], "some": [25, 26, 44, 45, 63, 65, 85, 95, 102, 103, 106, 107, 108, 200, 228, 236, 238, 243, 244, 253, 256, 262, 263, 265, 267, 270, 273, 275, 276, 281, 284, 285, 287, 317], "someth": [63, 236, 238, 243, 244, 279], "sometim": [1, 8, 49, 85, 269, 270, 280, 283, 287], "son": [15, 269], "soon": [91, 283], "sooner": 91, "sort": [95, 102, 106, 107, 108, 150, 177, 182, 183], "sort_by_popul": 86, "sort_eig": 259, "sotaro": [264, 283], "sought": [202, 287], "sound": 260, "sourc": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 84, 174, 189, 190, 191, 192, 193, 194, 195, 196, 197, 218, 219, 228, 229, 263, 268, 269, 287, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "source_st": [84, 102, 106, 107, 108, 116, 326], "space": [7, 8, 10, 15, 23, 24, 30, 44, 49, 53, 55, 56, 57, 65, 73, 74, 78, 86, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 112, 115, 121, 123, 132, 133, 143, 164, 194, 198, 199, 230, 236, 237, 238, 240, 241, 243, 244, 264, 266, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 287, 319, 324, 325, 330], "span": [8, 270], "spars": [18, 24, 84, 85, 86, 102, 103, 104, 106, 107, 108, 109, 110, 111, 116, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 171, 189, 190, 198, 200, 218, 231, 232, 233, 234, 235, 237, 254, 281, 331], "sparse_mod": [18, 231, 232, 233, 234, 235], "sparse_return": [151, 153], "sparse_tol": [231, 232, 233, 234, 235], "sparsereg": 268, "sparsiti": [85, 161, 164], "spatial": [11, 28, 239, 269, 274], "spd": [44, 183, 184, 185, 186], "spd_eig": 259, "spd_inv": 259, "spd_inv_split": 259, "spd_inv_sqrt": [19, 230, 259], "spd_truncated_svd": 259, "special": [102, 106, 107, 108, 207, 259, 264, 284, 287], "specif": [44, 76, 77, 78, 79, 80, 81, 149, 205, 212, 223, 263, 287], "specifi": [55, 57, 63, 74, 84, 86, 92, 95, 98, 103, 104, 105, 109, 110, 122, 124, 125, 131, 140, 145, 146, 150, 154, 155, 156, 164, 187, 190, 195, 236, 238, 243, 244, 254, 268, 279, 282, 283, 284, 288], "spectral": [23, 53, 83, 98, 99, 102, 106, 107, 108, 115, 141, 236, 264, 266, 270, 276, 278, 280, 283, 284, 287], "spectroscopi": [91, 102, 106, 107, 108, 276], "spectrum": [132, 133, 177, 187, 283], "speech": 276, "speed": [111, 236, 273], "spent": 283, "sperat": [151, 153], "sph": 242, "spheric": [26, 242], "sphinx_gallery_thumbnail_numb": 291, "spine": 274, "spirit": 268, "splash": 287, "splev": [306, 310, 311, 315], "spline": 240, "split": [18, 45, 58, 59, 74, 84, 102, 106, 107, 108, 212, 264, 272, 282, 288], "splitting_mod": 74, "splprep": [306, 310, 311, 315], "spring": 189, "spring_layout": [189, 190], "springer": [18, 22, 51, 266, 277, 287], "sqrt": [22, 27, 32, 34, 35, 37, 40, 44, 55, 104, 125, 127, 147, 261, 265, 269, 275, 278, 282, 283, 288, 296, 302, 317, 331, 334, 335], "sqrt_inv_cov": 230, "sqrt_model": [259, 275, 282, 288, 300, 325], "squar": [12, 44, 70, 73, 102, 104, 106, 107, 108, 180, 200, 230, 269, 274, 275, 281, 282, 284, 287], "squareroot": 275, "squeez": [238, 243, 244, 275, 308, 309, 311], "stabil": 264, "stabl": [39, 141, 195, 197, 287], "stack": [271, 273, 281, 306, 310, 311, 312, 315], "stackoverflow": 213, "stai": [30, 98, 99, 112, 241, 273, 278, 279, 283, 284], "stand": [102, 106, 107, 108, 281], "standard": [45, 91, 93, 94, 96, 103, 104, 142, 148, 149, 202, 242, 266, 270, 275, 276, 277, 278, 279, 287], "standard_dmd": 270, "standard_model": 270, "stanford": [11, 16, 269], "star": 242, "start": [40, 58, 91, 95, 96, 98, 99, 102, 104, 106, 107, 108, 111, 121, 133, 139, 143, 149, 163, 171, 220, 237, 239, 240, 266, 269, 272, 274, 276, 282, 283, 284, 293, 297, 332], "stat": [104, 149, 167, 275, 276, 282, 288, 298, 300], "statdist": 279, "state": [0, 7, 9, 24, 25, 26, 28, 29, 30, 31, 34, 37, 38, 39, 40, 43, 44, 48, 50, 52, 54, 55, 56, 63, 65, 74, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 129, 132, 133, 134, 135, 139, 140, 141, 143, 150, 153, 156, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 189, 195, 197, 212, 219, 228, 236, 237, 238, 239, 240, 241, 243, 244, 252, 253, 254, 263, 264, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 297, 300, 301, 304, 313, 319, 320, 323, 325, 326, 327, 330], "state_0_mean": 298, "state_1_mean": 298, "state_color": [189, 195, 197, 326], "state_count": 112, "state_dict": 63, "state_fract": [108, 284], "state_histogram": [86, 286], "state_histogram_ful": 86, "state_index": [94, 95], "state_indic": [102, 106, 107, 108], "state_label": [189, 195, 197], "state_prob": [94, 95, 97, 272], "state_s": [189, 195, 197], "state_scal": [189, 195, 197], "state_symbol": [86, 108, 109, 284, 286], "state_symbols_with_blank": 86, "state_to_coordin": [240, 284], "statement": 268, "states_largest": 95, "states_popul": 95, "states_to_symbol": [86, 284], "static": [44, 85, 91, 103, 202, 209, 210, 227, 236, 240, 269, 276], "stationari": [57, 83, 84, 91, 92, 95, 96, 98, 99, 102, 104, 105, 106, 107, 108, 109, 115, 116, 125, 127, 128, 131, 137, 139, 142, 144, 145, 147, 149, 161, 163, 164, 167, 170, 172, 195, 197, 219, 237, 239, 264, 274, 279, 280, 287, 304, 307, 326], "stationary_distribut": [84, 102, 106, 107, 108, 115, 116, 237, 279, 304, 307], "stationary_distribution_constraint": [104, 109, 279], "stationary_distribution_ob": 95, "statist": [18, 44, 51, 55, 85, 86, 91, 92, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 148, 149, 161, 163, 202, 233, 234, 235, 259, 266, 276, 277, 279, 284, 286, 287], "statistics_mean_fre": 44, "stats_c": 279, "stats_mfpt": 279, "stats_p": 279, "stats_timescal": 279, "std": [104, 202, 269, 275], "stead": 285, "steadi": 22, "steer": 65, "stefan": [20, 21, 53, 55, 264, 277, 278, 283], "stem": [9, 10, 12, 44, 108, 287, 333], "stencil": 240, "step": [22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 39, 40, 42, 43, 44, 55, 57, 60, 62, 65, 91, 95, 102, 104, 106, 107, 108, 110, 111, 123, 130, 131, 132, 135, 139, 147, 149, 151, 153, 161, 163, 172, 191, 199, 226, 236, 238, 239, 240, 241, 242, 243, 244, 264, 269, 271, 272, 273, 274, 276, 277, 278, 281, 283, 284, 286, 287, 288, 297, 323, 330], "steven": [45, 198, 200, 264, 270, 281], "still": [82, 85, 102, 106, 107, 108, 109, 166, 168, 195, 197, 268, 269, 284], "stlsq": [198, 259, 281, 328], "stochast": [26, 27, 32, 35, 36, 42, 43, 74, 93, 95, 100, 107, 108, 126, 127, 135, 138, 139, 144, 145, 149, 163, 164, 259, 264, 266, 271, 276, 278, 279, 284, 287], "stone": [135, 139], "stop": [11, 12, 14, 95, 96, 102, 106, 107, 108, 239, 240, 284, 332], "storag": [18, 20, 63, 264], "store": [10, 12, 63, 85, 91, 92, 103, 105, 107, 111, 112, 113, 199, 202, 269, 285], "store_hidden": [91, 92], "store_sampl": [92, 104, 105, 202, 279], "str": [6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 44, 45, 46, 47, 55, 57, 60, 62, 63, 65, 68, 70, 71, 72, 73, 74, 75, 85, 86, 88, 91, 92, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 144, 161, 164, 177, 178, 182, 183, 184, 185, 186, 189, 191, 192, 195, 197, 199, 200, 202, 214, 222, 231, 232, 233, 234, 235, 236, 238, 240, 242, 243, 244], "straight": [189, 240], "strategi": [11, 14, 111, 269, 285, 319], "stream": [264, 269], "strength": 65, "strict": 63, "strictli": [44, 55, 57, 63], "stridden": 88, "stride": [63, 85, 88, 89, 91, 95, 96, 98, 111, 112, 212, 242, 277, 286, 287, 299], "string": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 161, 189, 195, 197, 198, 199, 203, 242, 279, 288], "strong": [95, 286], "strongest": 284, "strongli": [95, 112, 219, 286], "struck": 287, "struct": 269, "structur": [44, 65, 164, 263, 264, 268, 271, 273, 277, 283, 324], "stuart": 269, "stuck": [96, 98, 99, 269, 276], "studi": [270, 272, 274, 284], "style": [189, 242, 263], "sub": [93, 95, 200, 264, 321], "sub_hmm": 95, "subcategori": 287, "subclass": [11, 14, 63, 268], "subdivid": 284, "subject": [27, 35, 36, 40, 43, 60, 62, 268, 271], "sublicens": 268, "submatrix": [102, 106, 107, 108, 156], "submit": 163, "submodel": [86, 92, 93, 94, 95, 97, 102, 105, 106, 107, 108, 109, 112, 284, 285], "submodel_disconnect": 95, "submodel_explicit": 286, "submodel_largest": [86, 92, 95, 98, 274, 275, 284, 286, 318], "submodel_popul": [92, 95], "submodul": 63, "subobject": 200, "subok": 223, "suboptim": [98, 99], "subplot": [269, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 287, 288, 291, 297, 300, 304, 306, 307, 309, 310, 311, 312, 314, 315, 319, 320, 321, 323, 325, 326, 327, 329, 330, 332], "subsampl": [85, 95, 111, 112, 286], "subselect": [86, 95, 98, 252, 286], "subselected_ob": 276, "subsequ": [1, 8, 9, 11, 13, 14, 15, 17, 18, 20, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 65, 85, 91, 95, 96, 98, 103, 104, 109, 110, 111, 198, 211, 219, 263, 269, 275, 277, 283, 284], "subset": [86, 95, 102, 106, 107, 108, 109, 117, 120, 206, 207, 209, 283, 286], "subspac": [55, 57], "substack": 277, "substanti": 268, "subtract": [18, 153, 200, 230], "subtrajectori": 149, "success": [269, 277], "successfulli": 96, "successor": 280, "suffic": [263, 264, 276], "suffici": [264, 279], "suffix": 98, "suggest": [103, 104, 109, 110, 111, 149, 242], "suit": 264, "suitabl": [152, 268, 269], "sum": [6, 12, 24, 44, 62, 73, 83, 95, 102, 106, 107, 108, 109, 112, 113, 118, 136, 138, 144, 200, 233, 234, 269, 274, 284, 285, 287, 319, 325], "sum_": [11, 12, 57, 102, 106, 107, 108, 130, 136, 139, 151, 152, 153, 157, 161, 165, 266, 269, 281, 284], "sum_i": [102, 106, 107, 108, 123, 128, 132, 133, 143, 148, 172, 181, 242, 269, 284, 287], "sum_j": [111, 121, 134, 138, 284], "sum_k": [76, 104, 109, 113, 164], "sum_l": [44, 283], "sum_n": 284, "sum_t": [18, 233, 234, 235, 283], "sum_x": [123, 132, 133, 143], "summari": [104, 287], "summed_count_matrix": 112, "sup": 121, "sup_": 277, "super": 263, "superclass": [0, 2, 12, 14, 97], "superposit": 57, "supersampl": 283, "superse": 15, "supersed": [11, 14, 212], "supplement": 268, "suppli": [111, 161, 268], "support": [45, 47, 82, 103, 204, 242, 269, 273, 277, 287], "support_ci": 103, "support_confid": 103, "supports_progress_interfac": [11, 111, 112, 203, 259], "suppos": [97, 102, 106, 107, 108, 263, 281], "suptitl": [269, 287, 307], "sure": [65, 96, 98, 99, 165], "surfac": [23, 188, 194, 236, 242, 265, 317, 334, 335], "surpris": [231, 232, 233, 234, 235], "susan": [91, 276], "susanna": [83, 98, 99, 107, 115, 141, 266, 276, 280], "svd": [45, 49, 50, 102, 106, 107, 108, 270, 287], "swap": 112, "sweep": 163, "swissrol": [38, 261, 296, 302, 335], "swissroll_model": [259, 301], "switch": [108, 109], "sx": 235, "sy": 235, "sym_invers": [65, 68, 71, 259], "symbol": [86, 93, 95, 108, 109, 281, 285, 286], "symbols_to_st": [86, 284, 286], "symmetr": [18, 19, 28, 55, 102, 106, 107, 108, 125, 127, 147, 177, 183, 184, 185, 186, 187, 232, 234, 239, 264, 283], "symmetri": [55, 164, 279], "symposium": 18, "synthesi": 39, "synthet": [28, 30, 93, 94, 97, 102, 106, 107, 108, 283], "system": [22, 25, 26, 27, 31, 32, 33, 34, 35, 36, 39, 40, 42, 43, 44, 49, 56, 74, 106, 107, 116, 123, 132, 133, 143, 149, 164, 198, 199, 200, 219, 236, 238, 240, 242, 243, 244, 259, 261, 264, 265, 267, 268, 270, 271, 272, 273, 274, 277, 278, 281, 283, 284, 285, 287, 288, 289, 290, 294, 295, 306, 309, 310, 311, 312, 314, 315, 317, 320, 321, 323, 334, 335], "systemat": [284, 287, 288], "szabo": 284, "t": [7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 25, 26, 27, 34, 35, 36, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 67, 74, 75, 76, 77, 78, 79, 80, 81, 85, 91, 93, 94, 95, 96, 97, 98, 102, 104, 106, 107, 108, 110, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 157, 161, 162, 163, 164, 165, 167, 170, 172, 181, 185, 188, 192, 193, 198, 199, 200, 208, 210, 212, 226, 228, 231, 232, 233, 234, 235, 236, 237, 239, 242, 254, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 290, 293, 294, 298, 300, 301, 305, 306, 308, 310, 311, 312, 315, 319, 320, 321, 322, 324, 325, 328, 330, 333], "t0": [163, 236, 243, 273], "t_": [85, 111, 112, 121, 135, 137, 139, 152, 157, 163, 279, 284, 286, 293], "t_0": 152, "t_1": [76, 77, 78, 79, 80, 81, 102, 106, 107, 108, 281], "t_2": [76, 77, 78, 79, 80, 81, 281], "t_a": 237, "t_agg": 161, "t_b": 237, "t_corr": 149, "t_i": [44, 55, 102, 106, 107, 108, 132, 133, 147, 212, 237, 283], "t_k": [93, 94, 97], "t_m": 281, "t_mu": 164, "t_n": [102, 106, 107, 108, 281], "t_nrev": 164, "t_rev": 164, "t_test": [281, 328], "t_train": 328, "t_y": 139, "tab": 170, "tabul": 273, "tae": [61, 62, 259, 282], "tae_model": 282, "taemodel": [60, 64, 259], "tag": [273, 277, 287], "take": [29, 44, 55, 57, 60, 63, 70, 74, 85, 86, 88, 95, 102, 104, 106, 107, 108, 111, 112, 130, 161, 189, 190, 194, 221, 240, 264, 269, 272, 276, 277, 283, 284, 285], "taken": [15, 44, 95, 98, 102, 106, 107, 108, 161, 189, 198, 199, 223, 268, 283, 284, 285], "target": [63, 84, 102, 106, 107, 108, 134, 139, 140, 153, 189, 200, 282], "target_st": [84, 102, 106, 107, 108, 116, 326], "tarjan": [135, 150, 154, 155, 156], "tau": [44, 48, 50, 52, 54, 55, 56, 57, 58, 85, 86, 91, 95, 102, 104, 106, 107, 108, 110, 111, 112, 123, 132, 133, 139, 147, 151, 153, 161, 212, 228, 262, 264, 272, 274, 277, 278, 279, 282, 283, 286, 287, 332], "tau_1": 228, "tau_2": 228, "tb": 175, "tcca": [264, 287], "tdg": 260, "technic": [11, 16, 63, 269], "techniqu": [262, 264, 278, 283], "tell": [144, 284], "temperatur": [27, 34, 35, 40, 102, 106, 107, 108, 272, 278, 285, 330], "temperature_factor": [27, 34, 306], "templat": [268, 269], "tempor": [18, 23, 45, 56, 74, 225, 271, 283], "ten": [268, 270], "tensil": 242, "tensile_instability_dist": 242, "tensile_instability_k": 242, "tension": 242, "tensor": [60, 62, 63, 65, 66, 67, 68, 71, 72, 81, 103, 152, 162, 273, 282, 288], "ter": [20, 21, 55, 283, 287], "teramoto": [23, 236], "term": [18, 39, 65, 107, 121, 132, 135, 199, 237, 240, 242, 268, 276, 277, 281, 284, 285], "termin": [15, 218], "tessel": 266, "test": [6, 11, 22, 27, 32, 34, 35, 36, 40, 43, 44, 55, 59, 73, 74, 82, 85, 91, 92, 95, 102, 105, 106, 107, 108, 111, 112, 137, 191, 200, 203, 215, 218, 226, 228, 236, 238, 242, 243, 244, 258, 265, 272, 273, 287, 288, 290, 317, 325, 328, 334, 335], "test_mean_estim": 263, "test_model": [44, 73, 228, 287, 318], "test_model2": 318, "test_point": [22, 27, 32, 34, 35, 36, 40, 43, 236, 238, 243, 244], "testf": 331, "text": [24, 98, 102, 106, 107, 108, 130, 152, 159, 160, 162, 195, 197, 203, 237, 240, 260, 272, 274, 275, 277, 280, 283, 284, 286, 287], "text_api": [195, 197], "textcoord": 311, "textkwarg": [189, 195, 197], "tfinish": 294, "tfrac": 281, "th": [44, 95, 102, 106, 107, 108, 111, 112, 113, 124, 126, 146, 162, 198, 216, 263, 281, 285, 286, 330], "than": [11, 12, 14, 15, 20, 30, 55, 57, 84, 86, 89, 95, 96, 102, 106, 107, 108, 110, 112, 118, 120, 121, 123, 125, 127, 132, 133, 142, 144, 147, 151, 177, 183, 184, 185, 186, 187, 236, 238, 239, 241, 242, 243, 244, 263, 264, 268, 269, 270, 272, 273, 276, 277, 280, 283, 284, 285, 287], "thei": [63, 70, 84, 86, 93, 96, 102, 106, 107, 108, 178, 212, 225, 240, 245, 253, 262, 264, 271, 272, 276, 279, 280, 281, 282, 284, 285], "them": [44, 50, 52, 54, 55, 56, 57, 61, 63, 64, 70, 92, 98, 99, 104, 108, 148, 149, 197, 266, 271, 283, 286], "themselv": [102, 106, 107, 108, 263], "theorem": 287, "theoret": 149, "theori": [44, 45, 49, 55, 57, 73, 84, 91, 102, 106, 107, 108, 110, 116, 121, 167, 171, 172, 173, 174, 218, 242, 259, 262, 264, 266, 269, 270, 276, 283, 287], "therebi": [166, 168], "therefor": [55, 57, 86, 95, 102, 106, 107, 108, 149, 237, 260, 269, 279, 287, 288], "thereof": [56, 95, 109, 279], "therm_stat": 113, "therm_state_energi": 113, "thermodynam": [111, 112, 113, 266, 285, 330], "thermostat": 55, "theta": [44, 198, 199, 281, 283], "theta_": 281, "theta_1": [198, 281], "theta_2": [198, 281], "theta_3": 281, "theta_i": 281, "theta_j": [44, 283], "theta_k": 198, "thi": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 127, 135, 137, 138, 141, 148, 149, 151, 153, 160, 161, 163, 164, 171, 177, 179, 180, 183, 184, 185, 186, 188, 189, 195, 196, 197, 198, 199, 200, 206, 207, 208, 209, 211, 212, 215, 218, 219, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 254, 260, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 333], "thick": 189, "thing": [282, 283], "third": [6, 10, 111, 112, 113, 164, 287], "thoma": [39, 116, 121, 261, 284, 289, 295, 335], "thomas_attractor": [259, 294], "those": [112, 163, 164, 233, 234, 235, 260, 279], "thread": [11, 14, 15, 23, 33, 220, 242, 282], "three": [6, 10, 22, 23, 31, 39, 84, 102, 106, 107, 108, 269, 273, 274, 276, 279, 281, 287, 320], "thresh": [284, 329], "threshold": [15, 44, 86, 92, 95, 96, 98, 103, 110, 112, 200, 231, 232, 233, 234, 235, 240, 280, 281, 287, 328], "through": [13, 15, 17, 44, 55, 57, 60, 61, 62, 63, 64, 65, 66, 92, 105, 202, 236, 240, 269, 275, 276, 280, 282, 283, 285, 287], "throughout": [258, 284], "throw": 63, "thrown": 63, "thu": [14, 55, 95, 110, 264, 278, 285, 287], "tian": 49, "tic": 283, "tica": [44, 57, 259, 264, 265, 287, 317, 334, 335], "tica_model": 283, "tica_model_commute_map": 283, "tica_model_kinetic_map": 283, "tica_model_reweight": 283, "tica_project": 333, "tick": [275, 284], "ticker": 321, "tight_layout": [276, 284, 287], "tild": [228, 270], "time": [7, 11, 18, 19, 20, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 40, 43, 44, 45, 47, 48, 49, 50, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 128, 132, 133, 139, 140, 143, 146, 147, 148, 149, 161, 170, 172, 177, 187, 198, 199, 207, 208, 209, 210, 212, 224, 225, 226, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 259, 261, 262, 263, 264, 266, 268, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "time_depend": [236, 238, 243, 244], "time_dependent_quintuple_wel": [259, 312], "time_unit": 110, "timedependentsystem": [40, 259], "timeindependentsystem": [22, 27, 31, 32, 34, 35, 36, 39, 42, 43, 259], "timelag": [0, 18, 23, 65, 66, 208, 225], "timelagged_coeffici": 44, "timelagged_ob": [44, 48, 50, 52, 54, 56], "timelaggedconcatdataset": [0, 208, 259], "timelaggeddataset": [0, 207, 210, 225, 259, 273], "timescal": [44, 55, 89, 91, 92, 95, 96, 98, 102, 105, 106, 107, 108, 132, 133, 149, 196, 227, 229, 258, 264, 265, 266, 272, 274, 279, 283, 317, 334, 335], "timescale_i": 55, "timescales_for_process": 227, "timescales_sampl": 227, "timeseri": [18, 55, 57, 93, 96, 97, 104, 109, 209, 210, 252, 262, 266, 269, 283, 284, 287, 288, 332], "timeshift": [212, 264], "timeshifted_split": [55, 57, 259, 264], "timestep": [23, 103, 149, 198, 199, 239, 242, 273], "tiotal": 237, "titl": [242, 269, 271, 272, 275, 277, 278, 280, 284, 287, 298, 328, 329, 333], "tmatrix_metropolis1d": [259, 285, 313, 330], "to_3d": [23, 236, 273], "to_dataset": [45, 47, 51, 53, 55, 57, 259], "to_empti": 63, "to_html5_video": [273, 277, 287], "to_koopman_model": [102, 106, 107, 108], "to_netflux": 165, "to_state_probability_trajectori": [93, 94, 97], "toarrai": [151, 153], "tog": [33, 242, 287], "togeth": [44, 57, 133, 208, 251, 268, 280, 284], "toi": [264, 287], "tol": [136, 137, 138, 144, 161, 218, 331], "tol_rank": 110, "toler": [11, 12, 14, 102, 104, 106, 107, 108, 109, 116, 136, 137, 138, 144, 161, 164, 166, 168, 187, 218], "toni": [18, 55, 283], "too": [34, 65, 70, 85, 86, 111, 112, 209, 210, 236, 243, 269, 276], "tool": [84, 86, 110, 116, 125, 127, 135, 136, 137, 138, 142, 144, 147, 208, 253, 259, 266, 268, 269, 277, 287], "top": [10, 18, 23, 33, 37, 38, 44, 47, 48, 50, 52, 54, 56, 57, 73, 77, 80, 95, 102, 106, 107, 108, 187, 199, 231, 232, 233, 234, 235, 236, 263, 264, 271, 274, 275, 276, 277, 278, 281, 283, 287], "topic": 260, "toplevel": 263, "topologi": 22, "torch": [60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 263, 272, 273, 275, 282, 288], "torch_doctest_cuda1": 63, "torchgaussiankernel": [259, 273], "tort": 268, "tot": 284, "total": [44, 84, 86, 148, 149, 161, 170, 171, 172, 174, 200, 203, 204, 218, 237, 242, 284, 286, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "total_count": 86, "total_flux": [84, 172, 284], "totalflux": 237, "totflux": [170, 172], "toulous": 18, "toward": [102, 106, 107, 108, 116, 167, 189, 284, 287], "tpt": [84, 102, 106, 107, 108, 116, 167, 172, 189, 252, 284], "tptobj": [102, 106, 107, 108], "tqdm": [11, 44, 65, 91, 95, 102, 106, 107, 108, 111, 112, 203, 218, 228, 269, 272, 273, 275, 285, 288, 330], "trace": 286, "track": [104, 109, 164], "track_log_likelihood": 111, "track_running_stat": 272, "train": [12, 14, 44, 59, 60, 62, 63, 65, 72, 73, 74, 95, 198, 200, 269, 272, 273, 275, 276, 277, 278, 282, 287, 288, 328], "train_data": [272, 282, 288], "train_loss": [60, 62, 282], "train_sampl": 273, "train_scor": [65, 272, 273, 288], "train_score_callback": 65, "traj": [22, 25, 27, 32, 34, 35, 36, 40, 43, 58, 59, 74, 101, 109, 149, 271, 272, 275, 278, 282, 284, 285, 288, 292, 293, 294, 300, 301, 305, 306, 308, 309, 310, 311, 312, 313, 315, 318, 320, 321, 322, 323, 330], "traj2": 318, "traj_concat": [320, 321, 322], "traj_exact": 270, "traj_standard": 270, "traj_test": 273, "traj_test_backward": 273, "traj_train": 273, "trajectori": [0, 9, 10, 11, 12, 14, 18, 22, 23, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 40, 43, 44, 46, 49, 55, 57, 58, 59, 61, 64, 74, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 139, 147, 148, 149, 151, 153, 209, 210, 212, 225, 231, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 264, 269, 271, 272, 273, 274, 275, 276, 278, 279, 282, 283, 285, 286, 287, 288, 292, 293, 294, 300, 301, 305, 306, 308, 309, 310, 311, 312, 314, 315, 320, 321, 322, 323, 330, 332, 333], "trajectories_shift": 285, "trajectoriesdataset": [0, 208, 210, 225, 259, 272], "trajectorydataset": [0, 208, 209, 259, 272, 275, 282, 288], "tram": [112, 113, 259, 265, 266, 317, 334, 335], "tram_input": 112, "tramdataset": [111, 113, 259, 285], "traminput": 112, "trammodel": [111, 112, 259], "transact": [33, 242, 269, 287], "transax": 275, "transfer": [53, 56, 228, 278, 288], "transferoperatormodel": [44, 259], "transform": [4, 5, 6, 7, 9, 10, 11, 12, 14, 19, 20, 21, 37, 38, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 75, 85, 198, 199, 230, 236, 240, 242, 246, 259, 262, 265, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 282, 283, 285, 287, 288, 300, 301, 317, 319, 320, 322, 323, 324, 330, 333, 334, 335], "transform_discrete_trajectories_to_observed_symbol": 95, "transform_discrete_trajectories_to_submodel": [86, 275, 286], "transform_onehot": 9, "transform_opt": [11, 14, 20, 45, 47, 49, 53, 55, 57, 60, 62, 65, 85], "transform_to_dens": [242, 287, 332], "transformed_data": [44, 50, 52, 54, 56], "transient": 109, "transit": [24, 29, 30, 37, 38, 41, 58, 63, 83, 84, 85, 86, 91, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 157, 160, 161, 162, 163, 164, 167, 171, 172, 173, 174, 189, 190, 195, 197, 228, 237, 239, 240, 241, 253, 259, 264, 266, 269, 271, 274, 276, 278, 279, 280, 283, 285, 288, 307, 330], "transition_count": [95, 112], "transition_matric": [108, 113], "transition_matrix": [101, 102, 104, 106, 107, 108, 116, 237, 239, 273, 274, 276, 279, 280, 285, 288, 313, 330], "transition_matrix_coars": 83, "transition_matrix_kwarg": 101, "transition_matrix_ob": 95, "transition_matrix_prior": 91, "transition_matrix_toler": [102, 106, 107, 108, 109, 116], "transition_model": [95, 276], "transitioncountestim": [86, 104, 109, 112, 272, 273, 274, 275, 279, 284, 286, 318, 323], "transitioncountmodel": [85, 95, 98, 102, 103, 104, 106, 107, 108, 109, 112, 113], "transitionmatrixsampl": 163, "translat": 268, "transport": 277, "transpos": 264, "trap": 284, "trasform": 287, "travel": 236, "treat": [23, 85, 93, 94, 97], "tree": 264, "trendelkamp": [85, 91, 104, 111, 163, 164, 279, 286], "tri": [11, 63, 96, 144, 242, 269, 279, 282, 284], "triangl": 160, "triangular": 160, "trick": 277, "tripl": [42, 43, 261, 271, 303, 316, 335], "triple_well_1d": [259, 314], "triple_well_2d": [259, 271, 315, 320, 322], "triplet": [108, 192], "true": [0, 11, 13, 17, 18, 19, 44, 48, 50, 52, 54, 55, 56, 57, 58, 63, 66, 67, 70, 73, 74, 82, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 120, 121, 122, 123, 125, 126, 127, 135, 136, 137, 138, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 163, 164, 167, 177, 179, 181, 190, 191, 194, 195, 196, 200, 201, 205, 206, 207, 208, 209, 210, 211, 218, 219, 223, 226, 228, 231, 232, 233, 234, 235, 236, 240, 269, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 290, 293, 304, 306, 307, 309, 310, 311, 312, 313, 314, 315, 318, 321, 322, 325, 327, 328], "true_deriv": 331, "true_msm": 279, "truli": [184, 185, 186], "trunc": [68, 70, 71, 72], "truncat": [19, 20, 45, 49, 50, 70, 161, 177, 183, 184, 185, 186, 270, 271, 287], "truncated_log": 161, "truth": [270, 275, 276, 279, 281, 325], "try": [65, 197, 242, 262, 269, 276, 282, 288], "tstart": 294, "tt": [44, 55, 57, 68, 283, 287], "tte": [15, 34, 43, 47, 53, 84, 116, 121, 151, 164, 264, 266, 269, 271, 278, 279, 280, 284, 287], "ttraj": [111, 112], "tu": [45, 264, 270], "tupl": [13, 29, 55, 57, 63, 65, 68, 92, 95, 105, 111, 117, 118, 119, 120, 148, 153, 164, 188, 189, 211, 224, 225, 240, 264, 282], "turnov": 174, "tutori": [276, 330, 332], "tv": [218, 265, 317, 334, 335], "tv_deriv": [259, 331], "tvae": [64, 259, 282], "tvae_model": 282, "tvaeencod": [259, 282], "tvaemodel": [62, 259], "twice": [189, 228], "twilight": 294, "two": [6, 11, 14, 15, 23, 27, 29, 30, 35, 36, 37, 39, 40, 43, 44, 45, 51, 63, 65, 74, 76, 77, 78, 79, 80, 81, 85, 86, 89, 91, 95, 96, 98, 102, 104, 106, 107, 108, 109, 110, 112, 121, 123, 132, 151, 192, 193, 194, 219, 233, 234, 235, 236, 240, 241, 242, 256, 264, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 318, 322, 330, 333], "twostep_count_matric": 106, "type": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 178, 179, 180, 181, 182, 184, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 259, 263, 266, 269, 276, 282, 287], "typenam": 269, "typic": [44, 63, 73, 161, 278, 287], "u": [10, 21, 44, 57, 110, 112, 151, 161, 187, 200, 237, 241, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 287, 288, 300, 306, 309, 310, 311, 315], "u0": [218, 236], "u_": 161, "u_0": [23, 236], "u_const": 21, "u_i": 287, "u_minu": 121, "u_plu": 121, "u_x": 237, "ugli": [195, 197], "uhlenbeck": [32, 261, 303, 316, 335], "ultim": 109, "umathrm": 187, "umbrella": [266, 285, 330], "unbias": [18, 113, 164, 266, 285], "uncertainti": [85, 86, 91, 102, 103, 104, 106, 107, 108, 111, 112, 163, 164, 276, 279, 286], "unchang": [63, 200], "uncombin": 268, "unconnect": 98, "unconsid": [86, 95], "uncorrel": [58, 85, 86, 89, 91, 95, 96, 98, 109, 111, 112, 163, 286], "uncoupl": 280, "undefin": 63, "under": [44, 55, 57, 60, 62, 63, 65, 85, 91, 95, 102, 106, 107, 108, 109, 161, 163, 187, 228, 236, 238, 243, 244, 263, 264, 268, 269, 271, 272, 274, 276, 279, 287], "underdetermin": 271, "underli": [23, 45, 55, 86, 95, 102, 106, 107, 108, 112, 113, 241, 242, 262, 263, 276, 280, 281, 283, 285, 286, 287, 328], "understand": 266, "understood": 281, "undirect": [86, 87, 95, 104, 150, 154, 155, 156, 286], "unexpect": 63, "unexpected_kei": 63, "unhandl": [93, 94, 97], "uniform": [11, 14, 22, 25, 27, 29, 32, 34, 35, 36, 40, 43, 91, 95, 96, 100, 149, 188, 189, 195, 198, 199, 240, 270, 271, 273, 276, 278, 283, 284, 285, 290, 294, 312, 319], "uniform_averag": 200, "uniformli": [11, 18, 23, 148, 236, 269, 276, 277, 278], "uninfluenc": 260, "union": 164, "uniqu": [6, 95, 111, 112, 273, 279, 284], "unit": [41, 44, 63, 84, 95, 102, 106, 107, 108, 110, 142, 201, 219, 223, 270, 275, 282, 284, 288], "universit\u00e4t": 260, "unknown": [104, 112, 137, 149, 270, 276, 285], "unless": [55, 57, 63, 91, 260, 284, 287], "unmodifi": 44, "unnecessari": [84, 102, 106, 107, 108], "unnorm": [233, 234, 235], "unord": [192, 193, 320, 321], "unpack": 188, "unscal": [55, 283, 287], "unsuccess": 144, "unsuccessfulli": 111, "until": [55, 57, 102, 106, 107, 108, 269, 284], "up": [6, 22, 27, 32, 33, 34, 35, 36, 40, 43, 44, 73, 102, 106, 107, 108, 111, 118, 136, 138, 149, 195, 197, 242, 269, 271, 272, 273, 275, 277, 281, 284], "updat": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 34, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 203, 204, 218, 242, 263, 269, 290, 312], "update_stationary_distribut": [102, 106, 107, 108], "update_transition_matrix": [102, 106, 107, 108], "upon": [57, 108, 195, 197, 287], "upper": [8, 9, 149, 160, 202, 205, 226, 275, 284, 304], "us": [1, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 77, 83, 84, 85, 86, 88, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 120, 121, 123, 125, 127, 132, 135, 141, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 161, 163, 164, 165, 167, 177, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 207, 208, 212, 218, 219, 220, 223, 227, 228, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 247, 250, 251, 252, 254, 258, 260, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 307, 318, 325, 326, 328, 329, 330, 333], "usa": [165, 167, 170, 172], "usabl": 82, "usag": [55, 57, 250, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "use_lcc": 109, "user": [8, 11, 63, 84, 111, 112, 189, 195, 197, 200, 260, 268, 269, 276, 281, 282, 283, 285, 287, 288], "user_set": 84, "usual": [14, 91, 263, 264, 269, 270, 271, 272, 285], "util": [0, 44, 55, 57, 63, 65, 66, 70, 92, 95, 102, 105, 106, 107, 108, 188, 191, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 236, 238, 243, 244, 251, 254, 255, 256, 259, 263, 264, 268, 272, 273, 275, 282, 288, 322, 323, 331], "uu": 270, "uw": 270, "v": [27, 34, 35, 36, 40, 42, 43, 44, 57, 152, 183, 200, 265, 270, 271, 272, 274, 277, 278, 279, 287, 306, 310, 311, 312, 314, 315, 317, 325, 334, 335], "v0": [8, 9, 274], "v1": [8, 9, 274], "v_1": 242, "v_i": [111, 113, 127, 287], "v_n": 242, "va": 274, "vac": 264, "val": [102, 106, 107, 108, 128, 325], "val_data": [272, 282, 288], "val_sampl": 273, "val_scor": 273, "valid": [15, 29, 34, 44, 60, 62, 65, 73, 74, 76, 81, 95, 102, 106, 107, 108, 136, 138, 151, 157, 164, 191, 226, 227, 228, 229, 240, 259, 260, 266, 269, 272, 273, 282, 287, 288, 323], "valid_impl": [76, 81], "validation_data": 65, "validation_load": [60, 62, 65, 272, 282, 288], "validation_loss": [60, 62, 282], "validation_scor": [65, 272, 288], "validation_score_callback": 65, "valleriani": 284, "valu": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 70, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 123, 127, 128, 129, 130, 131, 133, 143, 152, 158, 159, 160, 161, 165, 166, 167, 168, 169, 171, 173, 174, 177, 181, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 205, 218, 219, 220, 236, 237, 241, 242, 263, 264, 269, 276, 277, 280, 281, 283, 284, 286, 287, 288, 325], "valuabl": 266, "valueerror": [44, 63, 112, 225], "vamp": [19, 44, 55, 65, 66, 71, 73, 75, 102, 106, 107, 108, 259, 264, 265, 272, 288, 317, 334, 335], "vamp1": [44, 73, 102, 106, 107, 108], "vamp2": [44, 65, 71, 72, 73, 102, 106, 107, 108], "vamp2_scor": 273, "vamp_back": 275, "vamp_edmd": 275, "vamp_estim": [272, 287], "vamp_kcca": 275, "vamp_kedmd": 275, "vamp_model": 272, "vamp_model_direct": 288, "vamp_model_vnet": 288, "vamp_msm": 275, "vamp_project": 333, "vamp_scor": [74, 75, 259, 273], "vamp_score_cv": [259, 275], "vamp_score_data": [259, 277], "vamp_vampnet": [273, 275], "vampnet": [66, 72, 259, 262], "vampnet_loss": 259, "vampnetmodel": [65, 259, 273], "vanden": [84, 116, 121, 161, 165, 167, 170, 171, 172, 173, 174, 266, 284], "vanish": 242, "var": 63, "var_cutoff": [44, 55, 57, 283], "varepsilon": [236, 242, 277, 278], "vari": [28, 274], "variabl": [20, 21, 55, 60, 111, 112, 176, 198, 199, 212, 262, 272, 277, 281, 282, 283], "varianc": [18, 44, 55, 57, 63, 64, 73, 102, 106, 107, 108, 112, 152, 241, 282, 283, 285, 287], "variant": [270, 277], "variat": [20, 21, 44, 49, 51, 55, 57, 62, 64, 65, 73, 74, 102, 106, 107, 108, 109, 149, 218, 262, 264, 277, 279, 283, 287, 288, 331], "varieti": 266, "variou": [102, 106, 107, 108, 254, 258, 275, 281], "varphi": [48, 270, 278], "vassilvitskii": [11, 16, 269], "vdot": 281, "ve": 328, "vector": [7, 10, 18, 21, 25, 26, 44, 45, 50, 55, 81, 84, 94, 95, 97, 102, 104, 106, 107, 108, 109, 116, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 137, 139, 141, 142, 143, 144, 147, 152, 161, 163, 164, 187, 200, 236, 237, 238, 243, 244, 270, 275, 279, 280, 281, 282, 283], "vectorized_f": [236, 238, 243, 244], "veloc": [236, 242], "venv": [318, 325], "verbatim": 268, "veri": [11, 15, 20, 85, 103, 104, 109, 110, 111, 195, 197, 223, 242, 264, 266, 269, 280, 281], "verifi": 228, "versa": [278, 283, 284, 287], "version": [51, 63, 74, 91, 116, 200, 212, 225, 264, 268, 269, 273, 277, 278], "vertex": [8, 9], "vertic": [150, 156, 287], "verticalalign": [274, 275], "via": [9, 10, 11, 12, 23, 26, 34, 37, 38, 65, 84, 102, 103, 106, 107, 108, 111, 112, 130, 137, 141, 142, 176, 190, 194, 196, 199, 225, 263, 266, 269, 271, 272, 276, 279, 280, 284, 327, 328], "vice": [278, 283, 284, 287], "video": [273, 277, 287], "view": [63, 135, 149, 150, 155, 156, 191, 223, 260, 318], "view_init": 301, "vijai": [55, 74, 107, 164, 266, 283, 287], "violat": [166, 168], "viridi": 312, "visibl": [269, 283], "visit": [57, 83, 86, 90, 95, 121, 240, 280, 285, 286, 287, 313], "visited_set": 86, "visitor": 260, "visual": [83, 95, 189, 195, 197, 269, 270, 271, 272, 276, 277, 278, 279, 280, 282, 283, 284, 287, 288, 329], "viterbi": 95, "vladimir": 22, "vline": [287, 304, 332], "vmag": 275, "vmax": [273, 275, 280, 284, 312, 326, 327, 329, 330], "vmin": [273, 275, 280, 284, 312, 326, 327, 329, 330], "volum": [43, 57, 189, 266, 271, 283, 284], "voronoi": [15, 266, 269], "vortex": [23, 236], "vortic": 277, "vstack": 273, "w": [45, 47, 53, 55, 125, 142, 149, 167, 177, 183, 184, 185, 186, 200, 216, 233, 234, 235, 237, 240, 242, 264, 270, 271, 273, 278, 280, 283], "w2": 273, "w_": [102, 106, 107, 108, 133, 143], "w_0": [133, 143], "w_i": 287, "w_t": [26, 27, 35, 36, 40, 42, 43, 271, 278, 305], "w_x": 237, "wa": [1, 9, 10, 11, 12, 14, 15, 19, 20, 21, 33, 44, 45, 46, 48, 49, 50, 52, 54, 55, 57, 73, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 123, 139, 147, 161, 164, 188, 189, 192, 193, 195, 212, 221, 230, 263, 266, 268, 270, 277, 279, 283, 285, 286, 287, 325, 326], "wai": [1, 8, 11, 15, 23, 49, 74, 111, 199, 242, 263, 269, 284, 287], "walk": [240, 261, 265, 284, 296, 302, 317, 334, 335], "want": [102, 104, 106, 107, 108, 165, 219, 274, 285], "warn": [96, 161, 164, 214, 231, 232, 269, 277, 285, 318], "warn_not_converg": 164, "warranti": 268, "wave": 236, "waveland": [135, 139], "we": [10, 11, 25, 26, 34, 37, 57, 63, 83, 95, 102, 104, 106, 107, 108, 109, 111, 112, 116, 131, 149, 151, 153, 167, 189, 219, 237, 242, 258, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 318, 322, 325, 326, 328], "weak": [95, 148, 149, 286], "weaken": [112, 270], "weaker": 280, "weakli": [95, 286], "web": 269, "weber": [83, 98, 99, 107, 115, 141, 266, 276, 280], "websit": 263, "webteam": 260, "wehmey": [60, 110, 111, 113, 262, 266, 282, 285], "weight": [18, 20, 21, 44, 55, 57, 60, 62, 63, 65, 73, 84, 86, 93, 94, 95, 97, 102, 103, 106, 107, 108, 110, 113, 150, 154, 155, 156, 189, 193, 195, 197, 200, 216, 219, 231, 232, 233, 234, 235, 240, 242, 269, 283, 284, 287, 297, 319, 322, 327, 329], "weights_": [269, 319], "weights_input": 21, "weikl": [116, 121, 165, 167, 170, 172, 284], "weinan": [116, 284], "welch": [95, 96, 276], "well": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 25, 27, 28, 32, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 78, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 127, 198, 199, 200, 204, 225, 239, 261, 265, 266, 268, 270, 271, 272, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 303, 316, 317, 320, 334, 335], "wenchong": 49, "were": [9, 10, 12, 44, 86, 92, 102, 104, 106, 107, 108, 112, 190, 196, 198, 199, 226, 240, 260, 277, 280, 281, 283, 284, 285, 287], "what": [96, 111, 112, 161, 228, 263, 264, 282, 284, 285, 286, 287], "whatev": [212, 268], "when": [11, 12, 14, 18, 55, 57, 58, 63, 64, 82, 85, 86, 91, 92, 93, 95, 96, 98, 102, 103, 104, 106, 107, 108, 111, 112, 139, 149, 161, 171, 195, 197, 198, 199, 200, 212, 223, 228, 231, 232, 233, 234, 235, 239, 242, 245, 263, 264, 266, 268, 269, 276, 283, 284, 285, 286, 287, 288], "whenev": [162, 193, 287], "where": [4, 6, 7, 9, 10, 11, 12, 18, 25, 26, 27, 30, 34, 40, 44, 48, 55, 56, 57, 74, 76, 77, 79, 80, 90, 91, 93, 95, 97, 102, 106, 107, 108, 109, 113, 114, 117, 118, 119, 120, 148, 149, 153, 161, 177, 181, 200, 219, 225, 241, 242, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 325, 326], "wherea": [63, 276, 280, 281], "whether": [1, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 24, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 66, 67, 70, 74, 82, 85, 86, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 120, 144, 150, 151, 153, 154, 155, 156, 179, 180, 183, 186, 190, 191, 193, 194, 196, 198, 200, 202, 204, 212, 215, 218, 219, 222, 224, 226, 227, 228, 236, 237, 238, 240, 243, 244, 268, 279, 281, 283, 287], "which": [1, 6, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 23, 27, 30, 32, 34, 35, 36, 37, 38, 40, 43, 44, 45, 47, 48, 49, 53, 55, 56, 57, 60, 62, 63, 65, 66, 68, 74, 76, 77, 78, 79, 80, 81, 85, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 119, 123, 139, 142, 143, 145, 147, 148, 164, 165, 176, 178, 179, 181, 182, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 202, 207, 208, 212, 218, 219, 226, 236, 240, 241, 242, 250, 251, 252, 253, 254, 260, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 318], "while": [20, 63, 91, 95, 96, 98, 112, 231, 232, 233, 234, 235, 240, 264, 269, 273, 276, 279, 284, 285, 287], "white": [274, 275, 284], "whiten": [19, 21, 44, 55, 57, 230, 275, 287], "whitened_data": 19, "whitened_traj": 275, "whitenend": 287, "whitening_rank_0": 44, "whitening_rank_t": 44, "whitening_transform": 21, "whiteningtransform": 259, "whitespac": 110, "who": 260, "whole": [14, 63, 86, 163, 164, 242, 264, 269], "whom": 268, "whose": [63, 176, 263, 281], "why": 55, "wice": [91, 276], "wide": 269, "width": [189, 195, 197, 211, 284, 326], "wiener": [26, 27, 35, 36, 40, 42, 43], "wilei": [15, 149, 269], "wilhelm": 279, "william": [47, 53, 264, 271, 278, 283], "window": [44, 58, 85, 86, 111, 112, 151, 153, 161, 211, 216, 279, 286], "window_radiu": 217, "wise": [24, 161, 202, 205, 242, 281], "wit": 138, "with_kwarg": 63, "with_traceback": 175, "within": [63, 66, 83, 86, 95, 111, 112, 117, 118, 119, 120, 212, 240, 270, 273, 280, 283, 286], "without": [33, 57, 63, 83, 95, 96, 102, 106, 107, 108, 112, 120, 229, 231, 232, 233, 234, 235, 260, 268, 279, 280, 284], "won": 63, "word": [47, 112], "work": [1, 2, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 198, 199, 200, 214, 223, 250, 262, 268, 272, 280, 281, 285, 288], "workflow": 281, "working_directori": 272, "world": 269, "wors": 200, "worst": [93, 94, 97], "would": [63, 98, 99, 112, 153, 200, 223, 260, 263, 264, 268, 269, 276, 281, 282, 283, 287], "wrap": [23, 63, 208, 243, 244, 263, 282], "write": [0, 112, 206, 207, 208, 209, 210, 281], "writeabl": [0, 112, 206, 207, 208, 209, 210], "written": [44, 57, 123, 132, 266, 276, 277, 283, 287], "wrong": [85, 104, 111, 112, 279, 286], "wrt": 57, "wu": [15, 20, 21, 34, 44, 49, 55, 57, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 151, 157, 163, 164, 262, 264, 266, 269, 276, 279, 283, 285, 286, 287, 288], "www": 260, "x": [4, 5, 6, 7, 11, 12, 15, 18, 21, 22, 23, 25, 26, 27, 31, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 50, 52, 54, 55, 56, 57, 60, 62, 67, 68, 76, 77, 78, 79, 80, 81, 102, 106, 107, 108, 113, 121, 123, 132, 133, 139, 143, 151, 152, 153, 187, 191, 192, 193, 195, 198, 199, 200, 201, 212, 216, 217, 218, 219, 225, 230, 231, 232, 233, 234, 235, 236, 237, 242, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 292, 298, 300, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 321, 325, 328, 330, 331, 333], "x0": [25, 26, 198, 199, 236, 238, 243, 244, 270, 271, 273, 275, 277, 278, 281, 285, 292, 293, 294, 312, 314, 320, 321, 322, 323, 328, 330, 331], "x0_test": 328, "x0_train": 328, "x1": [198, 328], "x2": 328, "x_": [34, 44, 48, 50, 52, 54, 55, 56, 57, 102, 104, 106, 107, 108, 109, 111, 112, 113, 135, 151, 164, 200, 212, 218, 237, 240, 262, 264, 266, 270, 271, 277, 282, 283, 284, 286, 287], "x_0": 281, "x_0e": 281, "x_1": [27, 35, 36, 47, 216, 276, 277, 278, 281], "x_2": [27, 35, 36, 278, 281], "x_3": 281, "x_bar": 216, "x_dot_train": 328, "x_i": [44, 45, 47, 76, 77, 78, 79, 80, 81, 104, 109, 112, 113, 164, 225, 269, 270, 271, 276, 277, 278, 283, 285], "x_inv": 70, "x_j": [277, 278], "x_k": 76, "x_l": [44, 283], "x_m": [47, 278], "x_meshgrid": 201, "x_n": [216, 218, 240, 276, 277, 281], "x_sim": 328, "x_t": [18, 25, 26, 27, 32, 34, 35, 36, 40, 42, 43, 44, 48, 50, 52, 54, 55, 56, 57, 102, 106, 107, 108, 121, 212, 233, 234, 235, 237, 262, 264, 266, 271, 275, 276, 278, 282, 283, 284, 286, 287, 288, 292, 305], "x_test": [281, 328], "x_train": 328, "xaxi": 276, "xdoctest": 63, "xerr": 276, "xi": [198, 199, 281, 328], "xi_1": 281, "xi_2": 281, "xi_i": 281, "xi_n": 281, "xinit_test": 273, "xinit_train": 273, "xint": [306, 310, 311, 315], "xlabel": [191, 226, 269, 272, 273, 274, 275, 279, 280, 281, 287, 288, 308, 328], "xmax": [189, 275, 288], "xmin": 189, "xpu": 63, "xtick": 280, "xval": 273, "xw": 200, "xx": [231, 232, 234, 235, 271, 277, 278], "xxyi": 275, "xy": [31, 232, 234, 235, 265, 273, 275, 277, 278, 288, 305, 306, 310, 311, 312, 315, 317, 320, 334, 335], "xycoord": 311, "xytext": [280, 311], "xyz": [236, 265, 317, 334, 335], "y": [6, 22, 23, 31, 37, 38, 39, 40, 43, 45, 47, 55, 57, 60, 62, 67, 68, 69, 76, 77, 78, 79, 80, 81, 123, 132, 133, 139, 143, 191, 192, 193, 198, 199, 200, 201, 212, 218, 219, 225, 226, 230, 231, 232, 233, 234, 235, 236, 242, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 287, 288, 298, 300, 306, 310, 311, 312, 314, 315, 328, 333], "y0": [274, 281], "y01": [191, 226], "y0_": 274, "y_": 270, "y_0": 281, "y_0e": 281, "y_1": 47, "y_i": [45, 47, 225, 269, 270, 271, 277, 278], "y_j": [76, 77, 78, 79, 80, 81, 277, 278], "y_k": 76, "y_m": 47, "y_meshgrid": 201, "y_pred": 200, "y_t": [18, 234, 235, 276, 277, 288], "y_test": 281, "y_true": 200, "yet": [11, 14, 15, 91, 95, 96, 99, 103, 110, 263], "yi": 107, "yield": [1, 6, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 30, 33, 39, 44, 45, 47, 49, 51, 53, 55, 57, 60, 62, 63, 64, 65, 67, 73, 74, 76, 77, 78, 79, 80, 81, 85, 91, 93, 95, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 187, 189, 190, 198, 211, 217, 225, 227, 230, 236, 237, 238, 240, 241, 243, 244, 264, 269, 271, 274, 276, 283, 287, 288], "yint": [306, 310, 311, 315], "ylabel": [191, 226, 269, 272, 274, 275, 279, 280, 281, 287, 288, 328], "ymax": [189, 275, 288, 304], "ymin": [189, 275, 288, 304], "york": 149, "you": [15, 55, 57, 63, 83, 86, 91, 95, 96, 98, 99, 102, 104, 106, 107, 108, 127, 148, 149, 165, 200, 219, 231, 232, 260, 263, 268, 269], "your": [13, 17, 63, 102, 104, 106, 107, 108, 148, 149, 231, 232, 233, 234, 235, 268, 273, 277, 287, 318], "your_modul": 263, "yusuk": [264, 283], "yv": 270, "yval": 273, "yx": [235, 277, 278], "yy": [235, 271, 277, 278], "z": [22, 31, 39, 53, 139, 192, 236, 272, 273, 275, 277, 278, 282, 288, 300, 320, 328], "z00": 275, "z_": [45, 270], "z_0": 45, "z_1": [45, 270], "z_i": 270, "z_m": 270, "z_t": 45, "zero": [24, 44, 63, 86, 91, 93, 94, 95, 97, 98, 99, 104, 109, 110, 111, 112, 136, 153, 161, 162, 175, 177, 189, 193, 200, 219, 225, 231, 232, 233, 234, 235, 242, 269, 274, 276, 278, 280, 284, 285, 287, 304, 305, 325, 330], "zero_grad": [63, 273], "zerorankerror": 259, "zheng": 107, "zip": [272, 274, 284, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "zlabel": 328, "zorder": [273, 275, 284, 297, 304, 312], "\u00e1": [55, 283], "\u00e9": [15, 20, 21, 34, 39, 44, 55, 57, 60, 65, 73, 74, 85, 91, 95, 98, 99, 102, 103, 104, 107, 109, 110, 111, 113, 116, 121, 123, 132, 133, 143, 151, 164, 262, 264, 266, 269, 276, 279, 282, 283, 284, 285, 286, 287, 288], "\u00f6": [83, 98, 99, 107, 115, 123, 132, 133, 141, 143, 266, 276, 280], "\u00fc": [15, 20, 21, 33, 34, 43, 47, 53, 55, 74, 84, 107, 110, 116, 121, 151, 164, 242, 264, 266, 269, 271, 278, 279, 280, 283, 284, 287]}, "titles": ["<em>class</em> Dataset", "<em>class</em> Estimator", "<em>class</em> Model", "<em>class</em> Transformer", "<em>class</em> Concatenation", "<em>class</em> Identity", "<em>class</em> Monomials", "<em>class</em> Observable", "<em>class</em> BoxDiscretization", "<em>class</em> BoxDiscretizationModel", "<em>class</em> ClusterModel", "<em>class</em> KMeans", "<em>class</em> KMeansModel", "<em>class</em> MetricRegistry", "<em>class</em> MiniBatchKMeans", "<em>class</em> RegularSpace", "<em>function</em> kmeans_plusplus", "<em>data</em> metrics", "<em>class</em> Covariance", "<em>class</em> CovarianceModel", "<em>class</em> KoopmanWeightingEstimator", "<em>class</em> KoopmanWeightingModel", "<em>function</em> abc_flow", "<em>function</em> bickley_jet", "<em>function</em> birth_death_chain", "<em>function</em> custom_ode", "<em>function</em> custom_sde", "<em>function</em> double_well_2d", "<em>function</em> double_well_discrete", "<em>function</em> drunkards_walk", "<em>function</em> ellipsoids", "<em>function</em> lorenz_system", "<em>function</em> ornstein_uhlenbeck", "<em>function</em> position_based_fluids", "<em>function</em> prinz_potential", "<em>function</em> quadruple_well", "<em>function</em> quadruple_well_asymmetric", "<em>function</em> sqrt_model", "<em>function</em> swissroll_model", "<em>function</em> thomas_attractor", "<em>function</em> time_dependent_quintuple_well", "<em>function</em> tmatrix_metropolis1d", "<em>function</em> triple_well_1d", "<em>function</em> triple_well_2d", "<em>class</em> CovarianceKoopmanModel", "<em>class</em> DMD", "<em>class</em> DMDModel", "<em>class</em> EDMD", "<em>class</em> EDMDModel", "<em>class</em> KVAD", "<em>class</em> KVADModel", "<em>class</em> KernelCCA", "<em>class</em> KernelCCAModel", "<em>class</em> KernelEDMD", "<em>class</em> KernelEDMDModel", "<em>class</em> TICA", "<em>class</em> TransferOperatorModel", "<em>class</em> VAMP", "<em>function</em> blocksplit_trajs", "<em>function</em> cvsplit_trajs", "<em>class</em> TAE", "<em>class</em> TAEModel", "<em>class</em> TVAE", "<em>class</em> TVAEEncoder", "<em>class</em> TVAEModel", "<em>class</em> VAMPNet", "<em>class</em> VAMPNetModel", "<em>function</em> covariances", "<em>function</em> koopman_matrix", "<em>function</em> kvad_score", "<em>function</em> sym_inverse", "<em>function</em> vamp_score", "<em>function</em> vampnet_loss", "<em>function</em> vamp_score", "<em>function</em> vamp_score_cv", "<em>function</em> vamp_score_data", "<em>class</em> GaussianKernel", "<em>class</em> GeneralizedGaussianKernel", "<em>class</em> Kernel", "<em>class</em> LaplacianKernel", "<em>class</em> PolynomialKernel", "<em>class</em> TorchGaussianKernel", "<em>function</em> is_torch_kernel", "<em>class</em> PCCAModel", "<em>class</em> ReactiveFlux", "<em>class</em> TransitionCountEstimator", "<em>class</em> TransitionCountModel", "<em>function</em> compute_connected_sets", "<em>function</em> compute_dtrajs_effective", "<em>function</em> compute_effective_stride", "<em>function</em> count_states", "<em>class</em> BayesianHMM", "<em>class</em> BayesianHMMPosterior", "<em>class</em> DiscreteOutputModel", "<em>class</em> GaussianOutputModel", "<em>class</em> HiddenMarkovModel", "<em>class</em> MaximumLikelihoodHMM", "<em>class</em> OutputModel", "<em>function</em> metastable_from_data", "<em>function</em> metastable_from_msm", "<em>function</em> random_guess", "<em>function</em> from_data", "<em>class</em> AugmentedMSM", "<em>class</em> AugmentedMSMEstimator", "<em>class</em> BayesianMSM", "<em>class</em> BayesianMSMPosterior", "<em>class</em> KoopmanReweightedMSM", "<em>class</em> MarkovStateModel", "<em>class</em> MarkovStateModelCollection", "<em>class</em> MaximumLikelihoodMSM", "<em>class</em> OOMReweightedMSM", "<em>class</em> TRAM", "<em>class</em> TRAMDataset", "<em>class</em> TRAMModel", "<em>function</em> number_of_states", "<em>function</em> pcca", "<em>function</em> reactive_flux", "<em>function</em> compute_index_states", "<em>function</em> indices_by_distribution", "<em>function</em> indices_by_sequence", "<em>function</em> indices_by_state", "deeptime.markov.tools.analysis.committor", "deeptime.markov.tools.analysis.committor_sensitivity", "deeptime.markov.tools.analysis.correlation", "deeptime.markov.tools.analysis.eigenvalue_sensitivity", "<em>function</em> eigenvalues", "deeptime.markov.tools.analysis.eigenvector_sensitivity", "<em>function</em> eigenvectors", "deeptime.markov.tools.analysis.expectation", "deeptime.markov.tools.analysis.expectation_sensitivity", "deeptime.markov.tools.analysis.expected_counts", "deeptime.markov.tools.analysis.expected_counts_stationary", "deeptime.markov.tools.analysis.fingerprint_correlation", "deeptime.markov.tools.analysis.fingerprint_relaxation", "deeptime.markov.tools.analysis.hitting_probability", "<em>function</em> is_connected", "<em>function</em> is_rate_matrix", "<em>function</em> is_reversible", "<em>function</em> is_transition_matrix", "deeptime.markov.tools.analysis.mfpt", "deeptime.markov.tools.analysis.mfpt_sensitivity", "deeptime.markov.tools.analysis.pcca_memberships", "<em>function</em> rdl_decomposition", "deeptime.markov.tools.analysis.relaxation", "<em>function</em> stationary_distribution", "deeptime.markov.tools.analysis.stationary_distribution_sensitivity", "deeptime.markov.tools.analysis.timescale_sensitivity", "<em>function</em> timescales", "deeptime.markov.tools.estimation.bootstrap_counts", "deeptime.markov.tools.estimation.bootstrap_trajectories", "deeptime.markov.tools.estimation.connected_sets", "deeptime.markov.tools.estimation.count_matrix", "deeptime.markov.tools.estimation.error_perturbation", "deeptime.markov.tools.estimation.girsanov_reweighted_count_matrix", "deeptime.markov.tools.estimation.is_connected", "deeptime.markov.tools.estimation.largest_connected_set", "deeptime.markov.tools.estimation.largest_connected_submatrix", "deeptime.markov.tools.estimation.log_likelihood", "deeptime.markov.tools.estimation.prior_const", "deeptime.markov.tools.estimation.prior_neighbor", "deeptime.markov.tools.estimation.prior_rev", "deeptime.markov.tools.estimation.rate_matrix", "deeptime.markov.tools.estimation.tmatrix_cov", "deeptime.markov.tools.estimation.tmatrix_sampler", "deeptime.markov.tools.estimation.transition_matrix", "deeptime.markov.tools.flux.coarsegrain", "deeptime.markov.tools.flux.flux_consumers", "deeptime.markov.tools.flux.flux_matrix", "deeptime.markov.tools.flux.flux_producers", "deeptime.markov.tools.flux.flux_production", "deeptime.markov.tools.flux.mfpt", "deeptime.markov.tools.flux.pathways", "deeptime.markov.tools.flux.rate", "deeptime.markov.tools.flux.to_netflux", "deeptime.markov.tools.flux.total_flux", "<em>exception</em> ZeroRankError", "<em>function</em> drop_nan_rows", "<em>function</em> eig_corr", "<em>function</em> eigs", "<em>function</em> is_diagonal_matrix", "<em>function</em> is_square_matrix", "<em>function</em> schatten_norm", "<em>function</em> sort_eigs", "<em>function</em> spd_eig", "<em>function</em> spd_inv", "<em>function</em> spd_inv_split", "<em>function</em> spd_inv_sqrt", "<em>function</em> spd_truncated_svd", "<em>class</em> Energy2dPlot", "<em>class</em> Network", "<em>function</em> plot_adjacency", "<em>function</em> plot_ck_test", "<em>function</em> plot_contour2d_from_xyz", "<em>function</em> plot_density", "<em>function</em> plot_energy2d", "<em>function</em> plot_flux", "<em>function</em> plot_implied_timescales", "<em>function</em> plot_markov_model", "<em>class</em> SINDy", "<em>class</em> SINDyModel", "<em>class</em> STLSQ", "<em>class</em> EnergyLandscape2d", "<em>class</em> QuantityStatistics", "<em>class</em> ProgressCallback", "<em>function</em> supports_progress_interface", "<em>function</em> confidence_interval", "<em>class</em> ConcatDataset", "<em>class</em> TimeLaggedConcatDataset", "<em>class</em> TimeLaggedDataset", "<em>class</em> TrajectoriesDataset", "<em>class</em> TrajectoryDataset", "<em>function</em> sliding_window", "<em>function</em> timeshifted_split", "<em>class</em> cached_property", "<em>function</em> deprecated_argument", "<em>function</em> plotting_function", "<em>function</em> finite_difference_coefficients", "<em>function</em> finite_difference_operator_midpoints", "<em>function</em> tv_derivative", "<em>function</em> energy2d", "<em>function</em> handle_n_jobs", "<em>function</em> handle_progress_bar", "<em>function</em> module_available", "<em>function</em> atleast_nd", "<em>function</em> is_timelagged_dataset", "<em>function</em> to_dataset", "<em>class</em> ChapmanKolmogorovTest", "<em>class</em> ImpliedTimescales", "<em>function</em> ck_test", "<em>function</em> implied_timescales", "<em>class</em> WhiteningTransform", "<em>function</em> covar", "<em>function</em> covars", "<em>function</em> moments_XX", "<em>function</em> moments_XXXY", "<em>function</em> moments_block", "<em>class</em> BickleyJet", "<em>class</em> BirthDeathChain", "<em>class</em> CustomSystem", "<em>class</em> DoubleWellDiscrete", "<em>class</em> DrunkardsWalk", "<em>class</em> Ellipsoids", "<em>class</em> PBFSimulator", "<em>class</em> TimeDependentSystem", "<em>class</em> TimeIndependentSystem", "deeptime.base", "deeptime.basis", "deeptime.clustering", "deeptime.covariance", "deeptime.data", "deeptime.decomposition", "deeptime.kernels", "deeptime.markov", "deeptime.markov.hmm", "deeptime.markov.tools", "deeptime.numeric", "deeptime.plots", "deeptime.sindy", "deeptime.util", "Table Of Contents", "Imprint", "Datasets", "Deep dim reduction", "For developers", "Dimension reduction", "Examples", "Markov state models", "Notebook examples", "Software License", "Clustering", "DMD", "EDMD", "VAMPNets on Alanine Dipeptide", "Coherent set comparison on Bickley jet", "MSM on Prinz potential", "Dimension reduction of double-wedge dataset", "Hidden Markov Models", "Kernel VAMP / kernel CCA", "Kernel EDMD", "Maximum-likelihood MSMs", "Coarse-graining with PCCA+", "SINDy", "Time-lagged autoencoders", "TICA", "Transition path theory", "TRAM", "Transition counting", "VAMP / time-lagged CCA", "VAMPNets", "ODEs", "Arnold-Beltrami-Childress flow", "Bickley Jet", "Custom ODEs", "Lorenz system", "Thomas attractor", "Computation times", "Other", "Drunkard\u2019s walk", "Ellipsoids dataset", "Position-based fluids", "Sqrt model", "Swissroll model", "Computation times", "SDEs", "Birth-death chain model", "Custom SDEs", "Double-well 2D", "Double-well discrete", "One-dimensional Ornstein-Uhlenbeck process", "One-dimensional Prinz potential", "Quadruple-well", "Asymmetric Quadruple-well", "Time-dependent quintuple well", "Metropolis chain in 1D energy landscape", "Triple-well 1D", "Triple-well 2D", "Computation times", "General examples", "Chapman-Kolmogorov test", "Clustering methods comparison", "2D contours from xyz", "2D densities from xy", "Energy surface", "Implied timescales", "Coherent sets: Kernel CCA on the Bickley jet", "Kernel CCA on the sqrt-Model to transform data", "Network plots", "PCCA+ on the Drunkard\u2019s walk", "SINDy: Identification of the R\u00f6ssler system", "Gross and net flux on the Drunkard\u2019s walk", "TRAM on a 1D double well", "TV Derivative", "VAMP on Position Based Fluids", "VAMP vs. TICA vs. PCA", "Computation times", "Computation times"], "titleterms": {"": [297, 327, 329], "1d": [313, 314, 330], "2d": [306, 315, 320, 321], "A": 287, "For": 263, "Of": 259, "One": [308, 309], "The": 284, "abc_flow": 22, "ad": [247, 263], "advanc": 269, "alanin": 272, "altern": 252, "analysi": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 252, 254], "api": [259, 287], "applic": 285, "approxim": 281, "arnold": 290, "asymmetr": 311, "atleast_nd": 223, "attractor": 294, "augmentedmsm": 102, "augmentedmsmestim": 103, "autoencod": 282, "backtransform": 275, "base": [245, 287, 299, 332], "basi": 246, "batch": 269, "bayesian": [276, 279], "bayesianhmm": 91, "bayesianhmmposterior": 92, "bayesianmsm": 104, "bayesianmsmposterior": 105, "beltrami": 290, "bicklei": [273, 291, 324], "bickley_jet": 23, "bickleyjet": 236, "birth": 304, "birth_death_chain": 24, "birthdeathchain": 237, "blocksplit_traj": 58, "bootstrap": 254, "bootstrap_count": 148, "bootstrap_trajectori": 149, "box": 269, "boxdiscret": 8, "boxdiscretizationmodel": 9, "cached_properti": 213, "capabl": 263, "cca": [273, 275, 277, 287, 324, 325], "chain": [304, 313], "chapman": 318, "chapmankolmogorovtest": 226, "childress": 290, "ck_test": 228, "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 188, 189, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 213, 226, 227, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244], "cluster": [247, 269, 319], "clustermodel": 10, "coars": [280, 284], "coarsegrain": 165, "code": 263, "coher": [273, 324], "committor": [121, 254, 284], "committor_sensit": 122, "comparison": [273, 283, 319], "comput": [295, 302, 316, 334, 335], "compute_connected_set": 87, "compute_dtrajs_effect": 88, "compute_effective_strid": 89, "compute_index_st": 117, "concatdataset": 206, "concaten": 4, "confidence_interv": 205, "connect": 254, "connected_set": 150, "content": 259, "contour": 320, "correl": 123, "count": [252, 254, 286], "count_matrix": 151, "count_stat": 90, "countmatrix": 254, "covar": [231, 232], "covari": [18, 67, 248], "covariancekoopmanmodel": 44, "covariancemodel": 19, "custom": [249, 263, 269, 292, 305], "custom_od": 25, "custom_sd": 26, "customsystem": 238, "cvsplit_traj": 59, "data": [17, 249, 258, 325], "dataset": [0, 249, 261, 275, 298], "death": 304, "decomposit": [250, 254, 284], "deep": [250, 262], "deeptim": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 281], "defin": 269, "demonstr": 287, "densiti": 321, "depend": [263, 312], "deprecated_argu": 214, "deriv": 331, "detail": 287, "determinist": 249, "develop": 263, "differenti": 258, "dim": 262, "dimens": [264, 275], "dimension": [308, 309], "dipeptid": 272, "discret": [269, 307], "discreteoutputmodel": 93, "dmd": [45, 270], "dmdmodel": 46, "doc": 259, "document": 263, "doubl": [275, 285, 306, 307, 330], "double_well_2d": 27, "double_well_discret": 28, "doublewelldiscret": 239, "drop_nan_row": 176, "drunkard": [297, 327, 329], "drunkards_walk": 29, "drunkardswalk": 240, "edmd": [47, 271, 275, 278], "edmdmodel": 48, "eig": 178, "eig_corr": 177, "eigenvalu": [125, 255], "eigenvalue_sensit": 124, "eigenvector": [127, 283], "eigenvector_sensit": 126, "ellipsoid": [30, 241, 298], "energi": [313, 322], "energy2d": 219, "energy2dplot": 188, "energylandscape2d": 201, "error_perturb": 152, "estim": [1, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 247, 248, 250, 252, 253, 254, 257, 263, 276, 287], "exampl": [265, 267, 281, 284, 287, 317], "except": 175, "expect": [128, 254], "expectation_sensit": 129, "expected_count": 130, "expected_counts_stationari": 131, "fingerprint": 254, "fingerprint_correl": 132, "fingerprint_relax": 133, "finite_difference_coeffici": 216, "finite_difference_operator_midpoint": 217, "flow": 290, "fluid": [287, 299, 332], "flux": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 254, 284, 329], "flux_consum": 166, "flux_matrix": 167, "flux_produc": 168, "flux_product": 169, "from": [284, 320, 321], "from_data": 101, "function": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 58, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 87, 88, 89, 90, 98, 99, 100, 101, 114, 115, 116, 117, 118, 119, 120, 125, 127, 135, 136, 137, 138, 142, 144, 147, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 204, 205, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 247], "gaussiankernel": 76, "gaussianoutputmodel": 94, "gener": [255, 265, 317], "generalizedgaussiankernel": 77, "girsanov_reweighted_count_matrix": 153, "grain": [280, 284], "gross": 329, "guess": 253, "handle_n_job": 220, "handle_progress_bar": 221, "hidden": 276, "hiddenmarkovmodel": 95, "hitting_prob": 134, "hmm": 253, "idea": 281, "ident": 5, "identif": 328, "implement": 249, "impli": 323, "implied_timescal": 229, "impliedtimescal": 227, "imprint": 260, "indices_by_distribut": 118, "indices_by_sequ": 119, "indices_by_st": 120, "initi": [253, 269], "introduct": 285, "is_connect": [135, 154], "is_diagonal_matrix": 179, "is_rate_matrix": 136, "is_revers": 137, "is_square_matrix": 180, "is_timelagged_dataset": 224, "is_torch_kernel": 82, "is_transition_matrix": 138, "jet": [273, 291, 324], "k": 269, "kernel": [78, 251, 273, 275, 277, 278, 324, 325], "kernelcca": 51, "kernelccamodel": 52, "kerneledmd": 53, "kerneledmdmodel": 54, "kmean": 11, "kmeans_plusplu": 16, "kmeansmodel": 12, "kolmogorov": 318, "koopman": 283, "koopman_matrix": 68, "koopmanreweightedmsm": 106, "koopmanweightingestim": 20, "koopmanweightingmodel": 21, "kvad": [49, 273], "kvad_scor": 69, "kvadmodel": 50, "kvadnet": 273, "lag": [282, 287], "landscap": 313, "laplaciankernel": 79, "largest_connected_set": 155, "largest_connected_submatrix": 156, "licens": 268, "likelihood": 279, "log_likelihood": 157, "look": 287, "lorenz": 293, "lorenz_system": 31, "main": 281, "markov": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 252, 253, 254, 266, 275, 276], "markovstatemodel": 107, "markovstatemodelcollect": 108, "maximum": 279, "maximumlikelihoodhmm": 96, "maximumlikelihoodmsm": 109, "mean": 269, "metastable_from_data": 98, "metastable_from_msm": 99, "method": 319, "metric": [17, 247, 269], "metricregistri": 13, "metropoli": 313, "mfpt": [139, 170], "mfpt_sensit": 140, "mini": 269, "minibatchkmean": 14, "model": [2, 247, 248, 250, 252, 253, 257, 258, 266, 275, 276, 300, 301, 304, 325], "module_avail": 222, "moments_block": 235, "moments_xx": 233, "moments_xxxi": 234, "monomi": 6, "more": 287, "msm": [252, 254, 274, 279], "net": 329, "network": [189, 326], "new": 247, "notebook": 267, "notic": 268, "number_of_st": 114, "numer": 255, "object": 281, "observ": 7, "od": [261, 289, 292], "oomreweightedmsm": 110, "ornstein": 308, "ornstein_uhlenbeck": 32, "other": [258, 259, 261, 296], "output": 253, "outputmodel": 97, "parti": 268, "passag": 254, "path": [254, 284], "pathwai": [171, 254, 284], "pbfsimul": 242, "pca": [283, 333], "pcca": [115, 254, 280, 327], "pcca_membership": 141, "pccamodel": 83, "plot": [256, 326], "plot_adjac": 190, "plot_ck_test": 191, "plot_contour2d_from_xyz": 192, "plot_dens": 193, "plot_energy2d": 194, "plot_flux": 195, "plot_implied_timescal": 196, "plot_markov_model": 197, "plotting_funct": 215, "pmf": 285, "polynomialkernel": 80, "posit": [287, 299, 332], "position_based_fluid": 33, "potenti": [274, 309], "prinz": [274, 309], "prinz_potenti": 34, "prior": 254, "prior_const": 158, "prior_neighbor": 159, "prior_rev": 160, "probabl": 284, "problem": [255, 281], "process": 308, "progresscallback": 203, "pytorch": 263, "quadrupl": [310, 311], "quadruple_wel": 35, "quadruple_well_asymmetr": 36, "quantitystatist": 202, "quintupl": 312, "random_guess": 100, "rate": [172, 254], "rate_matrix": 161, "rdl_decomposit": 142, "reaction": 254, "reactiv": [254, 284], "reactive_flux": 116, "reactiveflux": 84, "recov": 285, "reduct": [262, 264, 275], "regular": 269, "regularspac": 15, "relax": 143, "reweight": 283, "r\u00f6ssler": 328, "sampl": [254, 276, 279], "scale": [283, 287], "schatten_norm": 181, "score": [273, 287], "sde": [261, 303, 305], "select": 286, "sensit": 254, "set": [273, 324], "short": 287, "sindi": [198, 257, 281, 328], "sindymodel": 199, "singular": 287, "sliding_window": 211, "softwar": 268, "solver": 257, "sort_eig": 182, "space": 269, "spd_eig": 183, "spd_inv": 184, "spd_inv_split": 185, "spd_inv_sqrt": 186, "spd_truncated_svd": 187, "special": 252, "sqrt": [300, 325], "sqrt_model": 37, "state": [266, 275], "stationary_distribut": 144, "stationary_distribution_sensit": 145, "statist": 258, "stlsq": 200, "stochast": 249, "submodel": 286, "supports_progress_interfac": 204, "surfac": 322, "swissrol": 301, "swissroll_model": 38, "sym_invers": 70, "system": [249, 293, 328], "tabl": 259, "tae": 60, "taemodel": 61, "test": [263, 318], "theori": [254, 284], "third": 268, "thoma": 294, "thomas_attractor": 39, "tica": [55, 275, 283, 333], "time": [254, 282, 287, 295, 302, 312, 316, 334, 335], "time_dependent_quintuple_wel": 40, "timedependentsystem": 243, "timeindependentsystem": 244, "timelaggedconcatdataset": 207, "timelaggeddataset": 208, "timescal": [147, 323], "timescale_sensit": 146, "timeshifted_split": 212, "tmatrix_cov": 162, "tmatrix_metropolis1d": 41, "tmatrix_sampl": 163, "to_dataset": 225, "to_netflux": 173, "tool": [121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 252, 254, 255], "torchgaussiankernel": 81, "total_flux": 174, "trajectori": 284, "trajectoriesdataset": 209, "trajectorydataset": 210, "tram": [111, 285, 330], "tramdataset": 112, "trammodel": 113, "transferoperatormodel": 56, "transform": [3, 263, 325], "transit": [252, 254, 284, 286], "transition_matrix": 164, "transitioncountestim": 85, "transitioncountmodel": 86, "tripl": [314, 315], "triple_well_1d": 42, "triple_well_2d": 43, "tv": 331, "tv_deriv": 218, "tvae": 62, "tvaeencod": 63, "tvaemodel": 64, "type": 258, "uhlenbeck": 308, "uniform": 269, "util": [248, 250, 252, 258], "v": [283, 333], "valid": [254, 258], "vamp": [57, 273, 275, 277, 287, 332, 333], "vamp_scor": [71, 73], "vamp_score_cv": 74, "vamp_score_data": 75, "vampnet": [65, 272, 273, 275, 288], "vampnet_loss": 72, "vampnetmodel": 66, "variat": 282, "vector": 287, "walk": [297, 327, 329], "wedg": 275, "well": [285, 306, 307, 310, 311, 312, 314, 315, 330], "whiteningtransform": 230, "write": 263, "xy": 321, "xyz": 320, "your": 263, "zerorankerror": 175}})