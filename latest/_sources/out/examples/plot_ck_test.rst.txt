
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "out/examples/plot_ck_test.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_out_examples_plot_ck_test.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_out_examples_plot_ck_test.py:


Chapman-Kolmogorov test
=======================

Tests the Chapman-Kolmogorov equality, see :meth:`ck_test <deeptime.util.validation.ck_test>`.

We demonstrate how to re-use the view grid to overlay two CK tests.

.. GENERATED FROM PYTHON SOURCE LINES 9-34



.. image-sg:: /out/examples/images/sphx_glr_plot_ck_test_001.png
   :alt: plot ck test
   :srcset: /out/examples/images/sphx_glr_plot_ck_test_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/mho/dev/solidity/.venv/lib/python3.13/site-packages/deeptime/plots/chapman_kolmogorov.py:174: ComplexWarning: Your CKtest contains imaginary components which are ignored during plotting.
      warnings.warn("Your CKtest contains imaginary components which are ignored during plotting.",






|

.. code-block:: Python
   :lineno-start: 9

    from deeptime.clustering import KMeans
    from deeptime.data import ellipsoids
    from deeptime.markov import TransitionCountEstimator
    from deeptime.markov.msm import BayesianMSM
    from deeptime.plots.chapman_kolmogorov import plot_ck_test

    traj = ellipsoids().observations(500)
    traj2 = ellipsoids().observations(500)
    dtraj = KMeans(n_clusters=15).fit_transform(traj)
    dtraj2 = KMeans(n_clusters=15).fit_transform(traj2)

    models = []
    models2 = []
    for lag in [2, 3, 5, 13]:
        counts_estimator = TransitionCountEstimator(lagtime=lag, count_mode='effective')
        models.append(BayesianMSM().fit_fetch(counts_estimator.fit_fetch(dtraj).submodel_largest()))
        models2.append(BayesianMSM().fit_fetch(counts_estimator.fit_fetch(dtraj2).submodel_largest()))

    test_model = models[0]
    ck_test = test_model.ck_test(models, n_metastable_sets=2)
    grid = plot_ck_test(ck_test, legend=False)

    test_model2 = models2[0]
    ck_test = test_model2.ck_test(models2, n_metastable_sets=2)
    plot_ck_test(ck_test, legend=True, grid=grid)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.265 seconds)

**Estimated memory usage:**  585 MB


.. _sphx_glr_download_out_examples_plot_ck_test.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ck_test.py <plot_ck_test.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_ck_test.zip <plot_ck_test.zip>`
