
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_kcca_bickley.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_kcca_bickley.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_kcca_bickley.py:


Kernel CCA on the Bickley jet to find coherent sets
===================================================

This example shows an application of :class:`KernelCCA <deeptime.decomposition.KernelCCA>` on the
:meth:`bickley jet <deeptime.data.bickley_jet>` dataset. One can cluster in the singular function space
to find coherent structures.

.. GENERATED FROM PYTHON SOURCE LINES 9-53



.. image:: /examples/images/sphx_glr_plot_kcca_bickley_001.png
    :alt: 1st Eigenfunction, 2nd Eigenfunction, 3rd Eigenfunction, 4th Eigenfunction, 5th Eigenfunction, Clustering of the eigenfunctions
    :class: sphx-glr-single-img





.. code-block:: default
   :lineno-start: 9

    import matplotlib.pyplot as plt
    import numpy as np

    from deeptime.clustering import KMeans
    from deeptime.data import bickley_jet
    from deeptime.decomposition import KernelCCA
    from deeptime.kernels import GaussianKernel

    dataset = bickley_jet(n_particles=1000, n_jobs=8).endpoints_dataset()
    kernel = GaussianKernel(.7)

    estimator = KernelCCA(kernel, n_eigs=5, epsilon=1e-3)
    model = estimator.fit((dataset.data, dataset.data_lagged)).fetch_model()

    ev_real = np.real(model.eigenvectors)
    kmeans = KMeans(n_clusters=7, n_jobs=8).fit(ev_real)
    kmeans = kmeans.fetch_model()

    fig = plt.figure()
    gs = fig.add_gridspec(ncols=2, nrows=3)

    ax = fig.add_subplot(gs[0, 0])
    ax.scatter(*dataset.data.T, c=ev_real[:, 0])
    ax.set_title('1st Eigenfunction')

    ax = fig.add_subplot(gs[0, 1])
    ax.scatter(*dataset.data.T, c=ev_real[:, 1])
    ax.set_title('2nd Eigenfunction')

    ax = fig.add_subplot(gs[1, 0])
    ax.scatter(*dataset.data.T, c=ev_real[:, 2])
    ax.set_title('3rd Eigenfunction')

    ax = fig.add_subplot(gs[1, 1])
    ax.scatter(*dataset.data.T, c=ev_real[:, 3])
    ax.set_title('4th Eigenfunction')

    ax = fig.add_subplot(gs[2, 0])
    ax.scatter(*dataset.data.T, c=ev_real[:, 4])
    ax.set_title('5th Eigenfunction')

    ax = fig.add_subplot(gs[2, 1])
    ax.scatter(*dataset.data.T, c=kmeans.transform(ev_real))
    ax.set_title('Clustering of the eigenfunctions')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.688 seconds)

**Estimated memory usage:**  95 MB


.. _sphx_glr_download_examples_plot_kcca_bickley.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_kcca_bickley.py <plot_kcca_bickley.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_kcca_bickley.ipynb <plot_kcca_bickley.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
