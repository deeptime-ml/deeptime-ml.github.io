
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "out/examples/plot_implied_timescales.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_out_examples_plot_implied_timescales.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_out_examples_plot_implied_timescales.py:


Implied timescales
==================

This example demonstrates how to obtain an implied timescales (ITS) plot for a Bayesian Markov state model.

.. GENERATED FROM PYTHON SOURCE LINES 7-37



.. image-sg:: /out/examples/images/sphx_glr_plot_implied_timescales_001.png
   :alt: Implied timescales
   :srcset: /out/examples/images/sphx_glr_plot_implied_timescales_001.png
   :class: sphx-glr-single-img





.. code-block:: Python
   :lineno-start: 8


    import matplotlib.pyplot as plt
    import numpy as np

    from deeptime.clustering import KMeans
    from deeptime.data import double_well_2d
    from deeptime.markov import TransitionCountEstimator
    from deeptime.markov.msm import BayesianMSM
    from deeptime.plots import plot_implied_timescales
    from deeptime.util.validation import implied_timescales

    system = double_well_2d()
    data = system.trajectory(x0=np.random.normal(scale=.2, size=(10, 2)), length=1000)
    clustering = KMeans(n_clusters=50).fit_fetch(np.concatenate(data))
    dtrajs = [clustering.transform(traj) for traj in data]

    models = []
    lagtimes = np.arange(1, 10)
    for lagtime in lagtimes:
        counts = TransitionCountEstimator(lagtime=lagtime, count_mode='effective').fit_fetch(dtrajs)
        models.append(BayesianMSM(n_samples=50).fit_fetch(counts))

    its_data = implied_timescales(models)

    fig, ax = plt.subplots(1, 1)
    plot_implied_timescales(its_data, n_its=2, ax=ax)
    ax.set_yscale('log')
    ax.set_title('Implied timescales')
    ax.set_xlabel('lag time (steps)')
    ax.set_ylabel('timescale (steps)')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.497 seconds)

**Estimated memory usage:**  580 MB


.. _sphx_glr_download_out_examples_plot_implied_timescales.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_implied_timescales.py <plot_implied_timescales.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_implied_timescales.zip <plot_implied_timescales.zip>`
