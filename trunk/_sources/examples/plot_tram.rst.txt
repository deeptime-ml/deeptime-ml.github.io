
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_tram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_tram.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_tram.py:


TRAM on a 1D double well
========================

This example shows how to use the transition-based reweighting analysis method (TRAM) to estimate the free energies
and Markov model of a simple double-well potential, sampled using umbrella sampling.

For more information see the :class:`TRAM <deeptime.markov.msm.tram.TRAM>` estimator and
its respective `TRAM tutorial <../notebooks/tram.ipynb>`__.

.. GENERATED FROM PYTHON SOURCE LINES 11-87



.. image-sg:: /examples/images/sphx_glr_plot_tram_001.png
   :alt: plot tram
   :srcset: /examples/images/sphx_glr_plot_tram_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?it/s]    Initializing free energies using MBAR:   0%|          | 0/1000 [00:00<?, ?it/s]    Initializing free energies using MBAR:   1%|1         | 10/1000 [00:00<00:10, 91.34it/s]    Initializing free energies using MBAR:   2%|2         | 20/1000 [00:00<00:10, 92.23it/s]    Initializing free energies using MBAR:   3%|3         | 30/1000 [00:00<00:10, 94.97it/s]    Initializing free energies using MBAR:   4%|4         | 41/1000 [00:00<00:09, 97.14it/s]    Initializing free energies using MBAR:   5%|5         | 52/1000 [00:00<00:09, 98.80it/s]    Initializing free energies using MBAR: 100%|##########| 59/59 [00:00<00:00, 97.44it/s]  
      0%|          | 0/1000 [00:00<?, ?it/s]    Running TRAM estimate:   0%|          | 0/1000 [00:00<?, ?it/s]    Running TRAM estimate:   1%|          | 8/1000 [00:00<00:12, 79.40it/s]    Running TRAM estimate:   2%|1         | 17/1000 [00:00<00:12, 81.39it/s]    Running TRAM estimate:   3%|2         | 26/1000 [00:00<00:11, 81.74it/s]    Running TRAM estimate:   4%|3         | 35/1000 [00:00<00:11, 81.99it/s]    Running TRAM estimate: 100%|##########| 39/39 [00:00<00:00, 80.46it/s]  






|

.. code-block:: default
   :lineno-start: 12


    import numpy as np
    import matplotlib.pyplot as plt

    from deeptime.data import tmatrix_metropolis1d
    from deeptime.markov.msm import MarkovStateModel, TRAM
    from deeptime.clustering import ClusterModel

    xs = np.linspace(-1.5, 1.5, num=100)
    n_samples = 10000
    bias_centers = [-1, -0.5, 0.0, 0.5, 1]


    def harmonic(x0, x):
        return 2 * (x - x0) ** 4


    def plot_contour_with_colourbar(data, vmin=None, vmax=None):
        if vmin is None:
            vmin = np.min(data)
        if vmax is None:
            vmax = np.max(data)
        fig, (ax1) = plt.subplots(1, figsize=(3.5, 3))
        im = ax1.contourf(data, vmin=vmin, vmax=vmax, levels=50, cmap='jet')
        plt.colorbar(im)
        plt.show()


    def get_bias_functions():
        bias_functions = []
        for i, bias_center in enumerate(bias_centers):
            bias = lambda x, x0=bias_center: harmonic(x0, x)
            bias_functions.append(bias)
        return bias_functions


    def sample_trajectories(bias_functions):
        trajs = np.zeros((len(bias_centers), n_samples), dtype=np.int32)

        for i, bias in enumerate(bias_functions):
            biased_energies = (xs - 1) ** 4 * (xs + 1) ** 4 - 0.1 * xs + bias(xs)

            biased_energies /= np.max(biased_energies)
            transition_matrix = tmatrix_metropolis1d(biased_energies)

            msm = MarkovStateModel(transition_matrix)
            trajs[i] = msm.simulate(n_steps=n_samples)
        return trajs


    if __name__ == "__main__":
        bias_functions = get_bias_functions()
        trajectories = sample_trajectories(bias_functions)

        # move from trajectory over 100 bins back to the space of the xs: (-1.5, 1.5)
        trajectories = trajectories / 100 * 3 - 1.5

        bias_matrices = np.zeros((len(bias_centers), n_samples, len(bias_centers)))
        for i, traj in enumerate(trajectories):
            for j, bias_function in enumerate(bias_functions):
                bias_matrices[i, :, j] = bias_function(traj)

        # discretize the trajectories into two Markov states (centered around the two wells)
        clustering = ClusterModel(cluster_centers=np.asarray([-0.75, 0.75]), metric='euclidean')

        dtrajs = clustering.transform(trajectories.flatten()).reshape((len(bias_matrices), n_samples))

        from tqdm import tqdm
        tram = TRAM(lagtime=1, maxiter=1000, maxerr=1e-3, progress=tqdm, init_strategy="MBAR")

        # For every simulation frame seen in trajectory i and time step t, btrajs[i][t,k] is the
        # bias energy of that frame evaluated in the k'th thermodynamic state (i.e. at the k'th
        # Umbrella/Hamiltonian/temperature).
        model = tram.fit_fetch((dtrajs, bias_matrices))

        plot_contour_with_colourbar(model.biased_conf_energies)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.439 seconds)

**Estimated memory usage:**  10 MB


.. _sphx_glr_download_examples_plot_tram.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tram.py <plot_tram.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tram.ipynb <plot_tram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
